/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// main.ts
__export(exports, {
  default: () => BibleReferencePlugin
});
var import_obsidian3 = __toModule(require("obsidian"));

// src/data/BibleVersionCollection.ts
var BibleVersionCollection = [
  {
    key: "web",
    versionName: "World English Bible",
    language: "English",
    apiUrl: "https://bible-api.com"
  },
  {
    key: "clementine",
    versionName: "Clementine Latin Vulgate",
    language: "Latin",
    apiUrl: "https://bible-api.com"
  },
  {
    key: "kjv",
    versionName: "King James Version",
    language: "English",
    apiUrl: "https://bible-api.com"
  },
  {
    key: "bbe",
    versionName: "Bible in Basic English",
    language: "English",
    apiUrl: "https://bible-api.com"
  },
  {
    key: "oeb-us",
    versionName: "Open English Bible, US Edition",
    language: "English",
    apiUrl: "https://bible-api.com"
  },
  {
    key: "almeida",
    versionName: "Jo\xE3o Ferreira de Almeida",
    language: "Portuguese",
    apiUrl: "https://bible-api.com"
  },
  {
    key: "rccv",
    versionName: "Romanian Corrected Cornilescu Version",
    language: "Romanian",
    apiUrl: "https://bible-api.com"
  },
  {
    key: "cherokee",
    versionName: "Cherokee New Testament",
    language: "Cherokee",
    apiUrl: "https://bible-api.com"
  }
];

// src/data/constants.ts
var APP_NAMING = {
  appName: "Bible Reference",
  appAuthor: "tim-hub",
  appUrl: "",
  defaultStatus: ""
};
var DEFAULT_SETTINGS = {
  bibleVersion: BibleVersionCollection[0].key
};

// src/ui/BibleReferenceSettingTab.ts
var import_obsidian = __toModule(require("obsidian"));
var BibleReferenceSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.getAllBibleVersionsWithLanguageNameAlphabetically = () => {
      return this.getAllBibleVersionsWithLanguageName().sort((a, b) => {
        const languageCompare = a.language.localeCompare(b.language);
        if (languageCompare === 0) {
          return a.versionName.localeCompare(b.versionName);
        } else {
          return languageCompare;
        }
      });
    };
    this.getAllBibleVersionsWithLanguageName = () => {
      return BibleVersionCollection;
    };
    this.SetUpVersionSettingsAndVersionOptions = (containerEl) => {
      new import_obsidian.Setting(containerEl).setName("Bible Version").setDesc("Choose the Bible Version You Prefer").addDropdown((dropdown) => {
        const allVersionOptions = this.getAllBibleVersionsWithLanguageNameAlphabetically();
        allVersionOptions.forEach((version) => {
          dropdown.addOption(version.key, `${version.language} - ${version.versionName}`);
        });
        dropdown.setValue(this.plugin.settings.bibleVersion).onChange((value) => __async(this, null, function* () {
          this.plugin.settings.bibleVersion = value;
          console.log("Bible Version: " + value);
          yield this.plugin.saveSettings();
          new import_obsidian.Notice("Bible Reference Settings Updated ");
        }));
      });
    };
    this.plugin = plugin;
  }
  display() {
    let { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Settings for " + APP_NAMING.appName });
    this.SetUpVersionSettingsAndVersionOptions(containerEl);
  }
};

// src/VerseEditorSuggestor.ts
var import_obsidian2 = __toModule(require("obsidian"));

// src/VerseTypoCheck.ts
var shortReg = /\-{2}([123])*[A-z]{3,}\d{1,3}\:\d{1,3}(\-\d{1,3})*/;
var VerseTypoCheck = (verse) => {
  var _a;
  return (_a = verse.match(shortReg)) == null ? void 0 : _a.first();
};

// src/data/BibleVersionApiAdapter.ts
var BibleVersionAPIAdapter = class {
  formatBibleVerses(verses) {
    return verses;
  }
  constructor(key, versionName, language, apiUrl) {
    this._key = key;
    this._apiUrl = apiUrl;
    this._versionName = versionName;
    this._language = language;
    this._queryString = null;
  }
  get BibleVersionKey() {
    return this._key;
  }
  get VersesUrl() {
    if (this._queryString) {
      return `${this._apiUrl}/${this._queryString}?translation=${this.BibleVersionKey}`;
    }
    console.error("No query string set");
  }
  query(queryString) {
    return __async(this, null, function* () {
      if (!this._versionName || !this._language) {
        throw "version or language not set";
      }
      this._queryString = queryString;
      try {
        const url = this.VersesUrl;
        const response = yield fetch(url);
        const data = yield response.json();
        return this.formatBibleVerses(data.verses);
      } catch (e) {
        console.error("error while querying bible-api", e);
        return yield Promise.reject(e);
      }
    });
  }
  static BuildBibleVersionAPIAdapterFromIBibleVersion(bibleVersion) {
    const { key, versionName, language, apiUrl } = bibleVersion;
    return new BibleVersionAPIAdapter(key, versionName, language, apiUrl);
  }
};

// src/VerseSuggesting.ts
var VerseSuggesting = class {
  constructor(bookName, chapterNumber, verseNumber, verseNumberEnd, bibleVersion) {
    this.bookName = bookName;
    this.chapterNumber = chapterNumber;
    this.verseNumber = verseNumber;
    this.verseNumberEnd = verseNumberEnd;
    this.bookName = bookName;
    this.chapterNumber = chapterNumber;
    this.verseNumber = verseNumber;
    this.verseNumberEnd = verseNumberEnd;
    this.bibleVersion = bibleVersion;
  }
  get queryString() {
    let queryString = `${this.bookName}+${this.chapterNumber}:`;
    if ((this == null ? void 0 : this.verseNumberEnd) > 0) {
      queryString += `${this.verseNumber}-${this.verseNumberEnd}`;
    } else {
      queryString += `${this.verseNumber}`;
    }
    return queryString;
  }
  getVerses() {
    return __async(this, null, function* () {
      console.debug(this.bibleVersion);
      if (this.bibleVersion === DEFAULT_SETTINGS.bibleVersion) {
        console.log("match to default language plus version");
      }
      const bibleVersion = BibleVersionCollection.find((bv) => bv.key === this.bibleVersion);
      if (!this.bibleVersionApiAdapter || this.bibleVersionApiAdapter.BibleVersionKey !== bibleVersion.key) {
        this.bibleVersionApiAdapter = BibleVersionAPIAdapter.BuildBibleVersionAPIAdapterFromIBibleVersion(bibleVersion);
      }
      return this.bibleVersionApiAdapter.query(this.queryString);
    });
  }
  fetchAndSetVersesText() {
    return __async(this, null, function* () {
      const verses = yield this.getVerses();
      let text = "";
      verses.forEach((verse) => {
        text += verse.text;
      });
      this.text = text;
    });
  }
  getVerseReference() {
    return `-- [${this.bookName} ${this.chapterNumber}:${this.verseNumber}${this.verseNumberEnd ? `-${this.verseNumberEnd}` : ""}](${this.bibleVersionApiAdapter.VersesUrl})`;
  }
  get ReplacementContent() {
    return `> ${this.text.trim() + `
>> ${this.getVerseReference()}`}`;
  }
};

// src/VerseEditorSuggestor.ts
var VerseEditorSuggestor = class extends import_obsidian2.EditorSuggest {
  constructor(plugin, settings) {
    super(plugin.app);
    this.plugin = plugin;
    this.settings = settings;
  }
  onTrigger(cursor, editor, _) {
    const currentContent = editor.getLine(cursor.line).substring(0, cursor.ch);
    const match = VerseTypoCheck(currentContent);
    if (match) {
      console.debug("trigger on", currentContent);
      const editorSuggestTriggerInfo = {
        end: cursor,
        start: {
          line: cursor.line,
          ch: currentContent.lastIndexOf(match)
        },
        query: match
      };
      return editorSuggestTriggerInfo;
    }
    return null;
  }
  getSuggestions(context) {
    return __async(this, null, function* () {
      console.debug("get suggestion for query ", context.query.toLowerCase());
      const bookName = context.query.match(/[123]*[A-z]{3,}/).first();
      const numbersPartsOfQueryString = context.query.substring(2 + bookName.length);
      const numbers = numbersPartsOfQueryString.split(/[-:]+/);
      const chapterNumber = parseInt(numbers[0]);
      const verseNumber = parseInt(numbers[1]);
      const verseEndNumber = numbers.length === 3 ? parseInt(numbers[2]) : void 0;
      const suggestingVerse = new VerseSuggesting(bookName, chapterNumber, verseNumber, verseEndNumber, this.settings.bibleVersion);
      console.debug(bookName, chapterNumber, verseNumber, verseEndNumber, suggestingVerse, this.settings.bibleVersion);
      yield suggestingVerse.fetchAndSetVersesText();
      return [suggestingVerse];
    });
  }
  renderSuggestion(suggestion, el) {
    const outer = el.createDiv({ cls: "obr-suggester-container" });
    outer.createDiv({ cls: "obr-shortcode" }).setText(suggestion.text);
  }
  selectSuggestion(suggestion) {
    if (this.context) {
      this.context.editor.replaceRange(suggestion.ReplacementContent, this.context.start, this.context.end);
    }
  }
};

// main.ts
var BibleReferencePlugin = class extends import_obsidian3.Plugin {
  onload() {
    return __async(this, null, function* () {
      console.log("loading plugin -", APP_NAMING.appName);
      yield this.loadSettings();
      this.addSettingTab(new BibleReferenceSettingTab(this.app, this));
      this.registerEditorSuggest(new VerseEditorSuggestor(this, this.settings));
    });
  }
  onunload() {
    console.log("unloading plugin", APP_NAMING.appName);
  }
  loadSettings() {
    return __async(this, null, function* () {
      this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
      console.debug(this.settings);
    });
  }
  saveSettings() {
    return __async(this, null, function* () {
      yield this.saveData(this.settings);
    });
  }
};
