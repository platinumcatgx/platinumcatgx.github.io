/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// main.ts
__export(exports, {
  default: () => AttachmentNameFormatting
});
var import_obsidian = __toModule(require("obsidian"));
var DEFAULT_SETTINGS = {
  imageFormat: "image"
};
var extensions = {
  image: ["png", "jpg", "jpeg", "gif", "bmp", "svg"]
};
var AttachmentNameFormatting = class extends import_obsidian.Plugin {
  onload() {
    return __async(this, null, function* () {
      yield this.loadSettings();
      this.addSettingTab(new AttachmentNameFormattingSettingTab(this.app, this));
      this.registerEvent(this.app.metadataCache.on("changed", (file) => this.handleAttachmentNameFormatting(file)));
    });
  }
  loadSettings() {
    return __async(this, null, function* () {
      this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
    });
  }
  saveSettings() {
    return __async(this, null, function* () {
      yield this.saveData(this.settings);
    });
  }
  handleAttachmentNameFormatting(file) {
    return __async(this, null, function* () {
      if (this.app.workspace.getActiveFile() !== file) {
        return;
      }
      const attachments = this.app.metadataCache.getFileCache(file);
      if (attachments.hasOwnProperty("embeds")) {
        let num = 1;
        for (let item of attachments.embeds.filter((d) => extensions.image.contains(d.link.split(".").pop()))) {
          let file_path = (0, import_obsidian.parseLinktext)(item.link).path;
          let attachmentFile = this.app.vault.getAbstractFileByPath(file_path);
          if (!attachmentFile) {
            attachmentFile = this.app.metadataCache.getFirstLinkpathDest(file_path, file_path);
          }
          if (attachmentFile instanceof import_obsidian.TFile) {
            let parent_path = attachmentFile.path.substring(0, attachmentFile.path.length - attachmentFile.name.length);
            let newName = [file.basename, this.settings.imageFormat, num].join(" ") + "." + attachmentFile.extension;
            let fullName = parent_path + newName;
            let destinationFile = this.app.vault.getAbstractFileByPath(fullName);
            if (destinationFile && destinationFile !== attachmentFile) {
              yield this.app.fileManager.renameFile(attachmentFile, parent_path + "tmp_" + newName);
            } else {
              yield this.app.fileManager.renameFile(attachmentFile, fullName);
            }
            num++;
          }
        }
      }
    });
  }
};
var AttachmentNameFormattingSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Attachment Name Formatting" });
    containerEl.createEl("p", { text: 'This plugin will format all attachments in the format: "filename attachmentType indexNumber.xxx".' });
    containerEl.createEl("p", { text: "Each type of attachment will have individual index." });
    containerEl.createEl("p", { text: "Only recognize the file type that can be recognized by Obsidian." });
    containerEl.createEl("p", { text: "(Only support image right now)" });
    new import_obsidian.Setting(containerEl).setName("Format for image").setDesc("Set the format for image attachment.").addText((text) => text.setPlaceholder("image").setValue(this.plugin.settings.imageFormat === "image" ? "" : this.plugin.settings.imageFormat).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.imageFormat = value;
      yield this.plugin.saveSettings();
    })));
  }
};
