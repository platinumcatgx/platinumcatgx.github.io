/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

const idOnlyRegex = /([0-9]+|[a-z]+)/g;
const lettersIDComponentSuccessors = {
    a: "b",
    b: "c",
    c: "d",
    d: "e",
    e: "f",
    f: "g",
    g: "h",
    h: "i",
    i: "j",
    j: "k",
    k: "l",
    l: "m",
    m: "n",
    n: "o",
    o: "p",
    p: "q",
    q: "r",
    r: "s",
    s: "t",
    t: "u",
    u: "v",
    v: "w",
    w: "x",
    x: "y",
    y: "z",
    z: "aa",
};
const DEFAULT_SETTINGS = {
    matchRule: 'strict',
    addTitle: false,
    separator: '⁝ '
};
class LuhmanSettingTab extends obsidian.PluginSettingTab {
    constructor(app, plugin) {
        super(app, plugin);
        this.plugin = plugin;
    }
    display() {
        let { containerEl } = this;
        const { matchRule, separator, addTitle } = this.plugin.settings;
        containerEl.empty();
        containerEl.createEl('p', { text: 'The ID is a block of letters and numbers at the beginning of the filename' });
        new obsidian.Setting(containerEl)
            .setName('ID matching rule')
            .setDesc('Strict means filenames consist of only an ID. ' +
            'Separator means the ID must be followed by the separator. ' +
            'Fuzzy treats the first non-alphanumeric character as the end of the ID.')
            .addDropdown(setting => setting
            .addOption('strict', 'Strict')
            .addOption('separator', 'Separator')
            .addOption('fuzzy', 'Fuzzy')
            .setValue(matchRule)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.matchRule = value;
            yield this.plugin.saveSettings();
            this.display();
        })));
        if (matchRule !== 'strict') {
            new obsidian.Setting(containerEl)
                .setName('Add titles automatically')
                .setDesc('Add the separator and the title of the note when creating filenames')
                .setDisabled(matchRule !== 'strict')
                .addToggle(setting => setting
                .setValue(addTitle)
                .onChange((value) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.addTitle = value;
                yield this.plugin.saveSettings();
                this.display();
            })));
        }
        const useSeparator = matchRule !== 'strict' &&
            (addTitle || matchRule === 'separator');
        if (useSeparator) {
            new obsidian.Setting(containerEl)
                .setName('ID Separator')
                .setDesc('Used between id and title, include whitespace padding if needed')
                .setDisabled(useSeparator)
                .addText(text => text
                .setPlaceholder('Enter your separator')
                .setValue(separator)
                .onChange((value) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.separator = value;
                yield this.plugin.saveSettings();
            })));
        }
    }
}
class NewZettel extends obsidian.Plugin {
    constructor() {
        super(...arguments);
        this.settings = DEFAULT_SETTINGS;
    }
    loadSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
        });
    }
    saveSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.saveData(this.settings);
        });
    }
    incrementStringIDComponent(id) {
        let comps = id.split("");
        let last = comps.pop();
        return comps.concat([lettersIDComponentSuccessors[last]]).join("");
    }
    incrementNumberIDComponent(id) {
        return (parseInt(id) + 1).toString();
    }
    isNumber(string) {
        return /^\d+$/.test(string);
    }
    incrementIDComponent(id) {
        if (this.isNumber(id)) {
            return this.incrementNumberIDComponent(id);
        }
        else {
            return this.incrementStringIDComponent(id);
        }
    }
    incrementID(id) {
        var parts = id.match(idOnlyRegex);
        var lastPart = parts.pop();
        return parts.concat([this.incrementIDComponent(lastPart)]).join("");
    }
    parentID(id) {
        var parts = id.match(idOnlyRegex);
        if (parts) {
            parts.pop();
            return parts.join("");
        }
        else {
            return "";
        }
    }
    nextComponentOf(id) {
        const parts = id.match(idOnlyRegex);
        const lastPart = parts.pop();
        if (this.isNumber(lastPart)) {
            return "a";
        }
        else {
            return "1";
        }
    }
    firstChildOf(parentID) {
        return parentID + this.nextComponentOf(parentID);
    }
    fileToId(filename) {
        const ruleRegexes = {
            strict: /^((?:[0-9]+|[a-z]+)+)$/,
            separator: new RegExp(`^((?:[0-9]+|[a-z]+)+)${this.settings.separator}.*`),
            fuzzy: /^((?:[0-9]+|[a-z]+)+).*/
        };
        const match = filename.match(ruleRegexes[this.settings.matchRule]);
        if (match) {
            return match[1];
        }
        return '';
    }
    idExists(id) {
        const fileMatcher = (file) => this.fileToId(file.basename) === id;
        return (this.app.vault.getMarkdownFiles().filter(fileMatcher).length != 0);
    }
    firstAvailableID(startingID) {
        var nextID = startingID;
        while (this.idExists(nextID)) {
            nextID = this.incrementID(nextID);
        }
        return nextID;
    }
    makeNoteForNextSiblingOf(sibling) {
        var nextID = this.firstAvailableID(this.incrementID(this.fileToId(sibling.basename)));
        return nextID;
    }
    makeNoteForNextChildOf(parent) {
        var childID = this.firstAvailableID(this.firstChildOf(this.fileToId(parent.basename)));
        return childID;
    }
    makeNote(path, title, content, placeCursorAtStartOfContent) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            let app = this.app;
            let titleContent = "# " + title + "\n\n";
            let fullContent = titleContent + content;
            let file = yield this.app.vault.create(path, fullContent);
            let active = app.workspace.getLeaf();
            if (active == null) {
                return;
            }
            yield active.openFile(file);
            let editor = (_a = app.workspace.getActiveViewOfType(obsidian.MarkdownView)) === null || _a === void 0 ? void 0 : _a.editor;
            if (editor == null) {
                return;
            }
            if (placeCursorAtStartOfContent) {
                let position = { line: 2, ch: 0 };
                editor.setCursor(position);
            }
            else {
                editor.exec("goEnd");
            }
        });
    }
    isZettelFile(name) {
        const mdRegex = /.*\.md$/;
        return mdRegex.exec(name) != null && this.fileToId(name) !== '';
    }
    makeNoteFunction(idGenerator) {
        var _a;
        var file = this.app.workspace.getActiveFile();
        if (file == null) {
            return;
        }
        if (this.isZettelFile(file.name)) {
            this.fileToId(file.basename);
            let fileLink = "[[" + file.basename + "]]";
            let editor = (_a = this.app.workspace.getActiveViewOfType(obsidian.MarkdownView)) === null || _a === void 0 ? void 0 : _a.editor;
            if (editor == null) {
                return;
            }
            let selection = editor.getSelection();
            let nextID = idGenerator.bind(this, file)();
            let nextPath = (title) => (file === null || file === void 0 ? void 0 : file.path)
                ? this.app.fileManager.getNewFileParent(file.path).path +
                    "/" +
                    nextID +
                    (this.settings.addTitle
                        ? this.settings.separator + title
                        : '') +
                    ".md"
                : '';
            let newLink = "[[" + nextID + "]]";
            if (selection) {
                let title = selection
                    .split(/\s+/)
                    .map((w) => w[0].toUpperCase() + w.slice(1))
                    .join(" ");
                let selectionPos = editor.listSelections()[0];
                let positionCH = Math.max(selectionPos.head.ch, selectionPos.anchor.ch);
                let position = {
                    line: selectionPos.anchor.line,
                    ch: positionCH + 1,
                };
                editor.replaceRange(" " + newLink, position, position);
                this.makeNote(nextPath(title), title, fileLink, true);
            }
            else {
                new NewZettelModal(this.app, (title) => {
                    this.insertTextIntoCurrentNote(newLink);
                    this.makeNote(nextPath(title), title, fileLink, true);
                }).open();
            }
        }
    }
    renameZettel(id, toId) {
        return __awaiter(this, void 0, void 0, function* () {
            this.settings.separator;
            let zettel = this.app.vault
                .getMarkdownFiles()
                .filter((file) => this.fileToId(file.basename) == id)
                .first();
            if (zettel) {
                const id = this.fileToId(zettel.basename);
                const rest = zettel.basename.split(id)[1];
                this.app.fileManager.renameFile(zettel, zettel.parent.path + toId + rest + '.' + zettel.extension);
            }
        });
    }
    moveChildrenDown(id) {
        return __awaiter(this, void 0, void 0, function* () {
            let children = this.getDirectChildZettels(id);
            for (const child of children) {
                yield this.moveZettelDown(this.fileToId(child.basename));
            }
        });
    }
    moveZettelDown(id) {
        return __awaiter(this, void 0, void 0, function* () {
            this.moveChildrenDown(id);
            yield this.renameZettel(id, this.firstAvailableID(id));
        });
    }
    outdentZettel(id) {
        return __awaiter(this, void 0, void 0, function* () {
            let newID = this.incrementID(this.parentID(id));
            if (this.idExists(newID)) {
                yield this.moveZettelDown(newID);
            }
            for (const child of this.getDirectChildZettels(id)) {
                let newChildID = this.firstAvailableID(this.firstChildOf(newID));
                yield this.renameZettel(this.fileToId(child.basename), newChildID);
            }
            yield this.renameZettel(id, newID);
        });
    }
    onload() {
        return __awaiter(this, void 0, void 0, function* () {
            console.log("loading New Zettel");
            this.loadSettings();
            this.addSettingTab(new LuhmanSettingTab(this.app, this));
            // this.app.workspace.onLayoutReady(this.initialize);
            this.addCommand({
                id: "new-sibling-note",
                name: "New Sibling Zettel Note",
                callback: () => {
                    this.makeNoteFunction(this.makeNoteForNextSiblingOf);
                },
            });
            this.addCommand({
                id: "new-child-note",
                name: "New Child Zettel Note",
                callback: () => {
                    this.makeNoteFunction(this.makeNoteForNextChildOf);
                },
            });
            this.addCommand({
                id: "insert-zettel-link",
                name: "Insert Zettel Link",
                callback: () => __awaiter(this, void 0, void 0, function* () {
                    // let completion = (te)
                    let titles = yield this.getAllNoteTitles();
                    new ZettelSuggester(this.app, titles, this.currentlySelectedText(), (file) => {
                        this.insertTextIntoCurrentNote("[[" + file.basename + "]]");
                    }).open();
                }),
            });
            this.addCommand({
                id: "open-zettel",
                name: "Open Zettel",
                callback: () => __awaiter(this, void 0, void 0, function* () {
                    let titles = yield this.getAllNoteTitles();
                    new ZettelSuggester(this.app, titles, this.currentlySelectedText(), (file) => {
                        this.app.workspace.getLeaf().openFile(file);
                    }).open();
                }),
            });
            this.addCommand({
                id: "open-parent-zettel",
                name: "Open Parent Zettel",
                callback: () => {
                    let file = this.currentFile();
                    if (file) {
                        this.openZettel(this.parentID(this.fileToId(file.basename)));
                    }
                },
            });
            this.addCommand({
                id: "outdent-zettel",
                name: "Outdent Zettel",
                callback: () => {
                    let file = this.currentFile();
                    if (file) {
                        this.outdentZettel(this.fileToId(file.basename));
                    }
                },
            });
        });
    }
    onunload() {
        console.log("unloading New Zettel");
        // this.initialize(true);
    }
    currentFile() {
        var _a;
        return (_a = this.app.workspace.getActiveViewOfType(obsidian.MarkdownView)) === null || _a === void 0 ? void 0 : _a.file;
    }
    openZettel(id) {
        let file = this.app.vault
            .getMarkdownFiles()
            .filter((file) => this.fileToId(file.basename) == id)
            .first();
        if (file) {
            this.app.workspace.getLeaf().openFile(file);
        }
    }
    currentlySelectedText() {
        var _a;
        return (_a = this.app.workspace
            .getActiveViewOfType(obsidian.MarkdownView)) === null || _a === void 0 ? void 0 : _a.editor.getSelection();
    }
    insertTextIntoCurrentNote(text) {
        let view = this.app.workspace.getActiveViewOfType(obsidian.MarkdownView);
        if (view) {
            let editor = view.editor;
            let position;
            if (editor.getSelection()) {
                let selectionPos = editor.listSelections()[0];
                let positionCH = Math.max(selectionPos.head.ch, selectionPos.anchor.ch);
                position = { line: selectionPos.anchor.line, ch: positionCH + 1 };
            }
            else {
                position = editor.getCursor();
            }
            editor.replaceRange(" " + text, position, position);
        }
    }
    getZettels() {
        return this.app.vault.getMarkdownFiles().filter(file => {
            return;
        });
    }
    getDirectChildZettels(ofParent) {
        return this.getZettels().filter((file) => {
            return this.parentID(this.fileToId(file.basename)) == ofParent;
        });
    }
    getAllNoteTitles() {
        return __awaiter(this, void 0, void 0, function* () {
            const regex = /# (.+)\s*/;
            let titles = new Map();
            for (const file of this.getZettels()) {
                let text = yield this.app.vault.cachedRead(file);
                let match = text.match(regex);
                if (match) {
                    titles.set(match[1], file);
                }
            }
            return titles;
        });
    }
}
class NewZettelModal extends obsidian.Modal {
    constructor(app, completion) {
        super(app);
        this.completion = completion;
        let { contentEl } = this;
        contentEl.parentElement.addClass("zettel-modal");
        this.titleEl.setText("New zettel title...");
        let container = contentEl.createEl("div", {
            cls: "zettel-modal-container",
        });
        this.textBox = contentEl.createEl("input", {
            type: "text",
            cls: "zettel-modal-textbox",
        });
        this.textBox.id = "zettel-modal-textbox";
        this.textBox.addEventListener("keydown", (event) => {
            if (event.key == "Enter") {
                event.preventDefault();
                this.goTapped();
            }
        });
        container.append(this.textBox);
        let button = contentEl.createEl("input", {
            type: "button",
            value: "GO",
            cls: "zettel-modal-button",
        });
        button.addEventListener("click", (e) => this.goTapped());
        container.append(button);
        contentEl.append(container);
    }
    onOpen() {
        window.setTimeout(() => {
            this.textBox.focus();
        }, 0);
    }
    goTapped() {
        let title = this.textBox.value;
        this.completion(title);
        this.close();
    }
}
class ZettelSuggester extends obsidian.FuzzySuggestModal {
    constructor(app, titles, search, completion) {
        super(app);
        this.initialQuery = search !== null && search !== void 0 ? search : "";
        this.titles = titles;
        this.completion = completion;
        this.emptyStateText = "No zettels found";
        this.setPlaceholder("Search for a zettel...");
        console.log(this.initialQuery);
    }
    onOpen() {
        super.onOpen();
        this.inputEl.value = this.initialQuery;
        var event = new Event("input");
        this.inputEl.dispatchEvent(event);
    }
    getItems() {
        return Array.from(this.titles.keys()).sort();
    }
    getItemText(item) {
        return item;
    }
    renderSuggestion(value, el) {
        el.setText(value.item);
        let matches = value.match.matches;
        if (matches == null || matches.length == 0) {
            return;
        }
        let start = matches[0][0];
        let end = matches[0][1];
        let range = new Range();
        let text = el.firstChild;
        if (text == null) {
            return;
        }
        range.setStart(text, start);
        range.setEnd(text, end);
        range.surroundContents(document.createElement("b"));
    }
    onChooseItem(item, evt) {
        this.completion(this.titles.get(item));
    }
}

module.exports = NewZettel;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
