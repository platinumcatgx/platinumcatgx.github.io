/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// main.ts
__export(exports, {
  default: () => VimImPlugin
});
var import_obsidian = __toModule(require("obsidian"));
var os = __toModule(require("os"));
var DEFAULT_SETTINGS = {
  defaultIM: "",
  obtainCmd: "",
  switchCmd: "",
  windowsDefaultIM: "",
  windowsObtainCmd: "",
  windowsSwitchCmd: ""
};
var VimImPlugin = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    this.currentInsertIM = "";
    this.isWinPlatform = false;
    this.initialized = false;
    this.editorMode = null;
  }
  onload() {
    return __async(this, null, function* () {
      yield this.loadSettings();
      this.app.workspace.on("file-open", (_file) => __async(this, null, function* () {
        if (!this.initialized)
          yield this.initialize();
        let view = this.getActiveView();
        if (view) {
          var editor = this.getCodeMirror(view);
          if (editor) {
            editor.on("vim-mode-change", (modeObj) => {
              if (modeObj) {
                this.onVimModeChanged(modeObj);
              }
            });
          }
        }
      }));
      this.addSettingTab(new SampleSettingTab(this.app, this));
      console.log("VimIm::OS type: " + os.type());
      this.isWinPlatform = os.type() == "Windows_NT";
      this.currentInsertIM = this.isWinPlatform ? this.settings.windowsDefaultIM : this.settings.defaultIM;
      if (this.isWinPlatform) {
        console.log("VimIm Use Windows config");
      }
    });
  }
  initialize() {
    return __async(this, null, function* () {
      if (this.initialized)
        return;
      if ("editor:toggle-source" in this.app.commands.editorCommands) {
        this.editorMode = "cm6";
        console.log("Vimrc plugin: using CodeMirror 6 mode");
      } else {
        this.editorMode = "cm5";
        console.log("Vimrc plugin: using CodeMirror 5 mode");
      }
      this.initialized = true;
    });
  }
  getActiveView() {
    return this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
  }
  getCodeMirror(view) {
    var _a, _b, _c, _d;
    if (this.editorMode == "cm6")
      return (_c = (_b = (_a = view.sourceMode) == null ? void 0 : _a.cmEditor) == null ? void 0 : _b.cm) == null ? void 0 : _c.cm;
    else
      return (_d = view.sourceMode) == null ? void 0 : _d.cmEditor;
  }
  onVimModeChanged(modeObj) {
    const { exec } = require("child_process");
    let switchToInsert;
    if (this.currentInsertIM) {
      switchToInsert = this.isWinPlatform ? this.settings.windowsSwitchCmd.replace(/{im}/, this.currentInsertIM) : this.settings.switchCmd.replace(/{im}/, this.currentInsertIM);
    }
    const obtainc = this.isWinPlatform ? this.settings.windowsObtainCmd : this.settings.obtainCmd;
    const switchFromInsert = this.isWinPlatform ? this.settings.windowsSwitchCmd.replace(/{im}/, this.settings.windowsDefaultIM) : this.settings.switchCmd.replace(/{im}/, this.settings.defaultIM);
    switch (modeObj.mode) {
      case "insert":
        console.log("change to insert");
        if (typeof switchToInsert != "undefined" && switchToInsert) {
          exec(switchToInsert, (error, stdout, stderr) => {
            if (error) {
              console.error(`switch error: ${error}`);
              return;
            }
            console.log(`switch im: ${switchToInsert}`);
          });
        }
        break;
      default:
        console.log("change to noInsert");
        if (typeof obtainc != "undefined" && obtainc) {
          exec(obtainc, (error, stdout, stderr) => {
            if (error) {
              console.error(`obtain error: ${error}`);
              return;
            }
            this.currentInsertIM = stdout;
            console.log(`obtain im: ${this.currentInsertIM}`);
          });
        }
        if (typeof switchFromInsert != "undefined" && switchFromInsert) {
          exec(switchFromInsert, (error, stdout, stderr) => {
            if (error) {
              console.error(`switch error: ${error}`);
              return;
            }
            console.log(`switch im: ${switchFromInsert}`);
          });
        }
        break;
    }
  }
  onunload() {
    console.log("onunload");
  }
  loadSettings() {
    return __async(this, null, function* () {
      this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
    });
  }
  saveSettings() {
    return __async(this, null, function* () {
      yield this.saveData(this.settings);
    });
  }
};
var SampleSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Vim IM Select Settings." });
    containerEl.createEl("h3", { text: "Settings for default platform." });
    new import_obsidian.Setting(containerEl).setName("Default IM").setDesc("IM for normal mode").addText((text) => text.setPlaceholder("Default IM").setValue(this.plugin.settings.defaultIM).onChange((value) => __async(this, null, function* () {
      console.log("Default IM: " + value);
      this.plugin.settings.defaultIM = value;
      yield this.plugin.saveSettings();
    })));
    new import_obsidian.Setting(containerEl).setName("Obtaining Command").setDesc("Command for obtaining current IM(must be excutable)").addText((text) => text.setPlaceholder("Obtaining Command").setValue(this.plugin.settings.obtainCmd).onChange((value) => __async(this, null, function* () {
      console.log("Obtain Cmd: " + value);
      this.plugin.settings.obtainCmd = value;
      yield this.plugin.saveSettings();
    })));
    new import_obsidian.Setting(containerEl).setName("Switching Command").setDesc("Command for switching to specific IM(must be excutable)").addText((text) => text.setPlaceholder("Use {im} as placeholder of IM").setValue(this.plugin.settings.switchCmd).onChange((value) => __async(this, null, function* () {
      console.log("Switch Cmd: " + value);
      this.plugin.settings.switchCmd = value;
      yield this.plugin.saveSettings();
    })));
    containerEl.createEl("h3", { text: "Settings for Windows platform." });
    new import_obsidian.Setting(containerEl).setName("Windows Default IM").setDesc("IM for normal mode").addText((text) => text.setPlaceholder("Default IM").setValue(this.plugin.settings.windowsDefaultIM).onChange((value) => __async(this, null, function* () {
      console.log("Default IM: " + value);
      this.plugin.settings.windowsDefaultIM = value;
      yield this.plugin.saveSettings();
    })));
    new import_obsidian.Setting(containerEl).setName("Obtaining Command on Windows").setDesc("Command for obtaining current IM(must be excutable)").addText((text) => text.setPlaceholder("Obtaining Command").setValue(this.plugin.settings.windowsObtainCmd).onChange((value) => __async(this, null, function* () {
      console.log("Obtain Cmd: " + value);
      this.plugin.settings.windowsObtainCmd = value;
      yield this.plugin.saveSettings();
    })));
    new import_obsidian.Setting(containerEl).setName("Switching Command on Windows").setDesc("Command for switching to specific IM(must be excutable)").addText((text) => text.setPlaceholder("Use {im} as placeholder of IM").setValue(this.plugin.settings.windowsSwitchCmd).onChange((value) => __async(this, null, function* () {
      console.log("Switch Cmd: " + value);
      this.plugin.settings.windowsSwitchCmd = value;
      yield this.plugin.saveSettings();
    })));
  }
};
