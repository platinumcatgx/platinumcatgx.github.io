/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

// From https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#escaping,
// which, as a code snippet, is in the public domain, per 
// https://developer.mozilla.org/en-US/docs/MDN/About#copyrights_and_licenses
// (as of 2021-07-15):
function escapeRegExp(string) {
    // $& means the whole matched string:
    return string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
}
const toggleQuote = (linesInput, prefix) => __awaiter(void 0, void 0, void 0, function* () {
    const fullLines = [...linesInput];
    const escapedPrefix = escapeRegExp(prefix);
    const leadingWhitespaces = fullLines.map((e) => {
        const whitespaceMatch = e.match(new RegExp(`^(\\s*)`));
        return whitespaceMatch !== null ? whitespaceMatch[1] : "";
    });
    // This is in its own variable to aid in debugging:
    let filteredLeadingWhitespaces = leadingWhitespaces.filter((e, i) => {
        // Get rid of blank lines, which might be part of multi-line
        // passages:
        return fullLines[i] !== "";
    });
    // Account for if all lines actually *are* unindented, and we thus
    // filtered all lines out immediately above:
    const filteredLeadingLengths = (filteredLeadingWhitespaces.length > 0 ? filteredLeadingWhitespaces : [""]).map((e) => e.length);
    const minLeadingWhitespaceLength = Math.min(...filteredLeadingLengths);
    // Determine whether *every* line is Prefixed or not. If not, we will
    // add the prefix to every line; if so, we will remove it from every line.
    const isEveryLinePrefixed = fullLines.every((e) => {
        const prefixMatch = e.match(new RegExp(`^\\s{${minLeadingWhitespaceLength}}${escapedPrefix}`));
        if (prefixMatch !== null) {
            return true;
        }
        return false;
    });
    // Make an educated guess about using tabs vs spaces (lacking access to the
    // "Use Tabs" setting value in Obsidian for now) by just repurposing the
    // first actual instance of leading whitespace:
    const exampleLeadingWhitespace = leadingWhitespaces.filter((e) => e.length === minLeadingWhitespaceLength);
    // Update the text in-place:
    for (const [i, text] of fullLines.entries()) {
        if (isEveryLinePrefixed === true) {
            if (text === "") {
                fullLines[i] =
                    exampleLeadingWhitespace.length > 0
                        ? exampleLeadingWhitespace[0]
                        : " ".repeat(minLeadingWhitespaceLength);
                continue;
            }
            fullLines[i] = text.replace(new RegExp(`^(\\s{${minLeadingWhitespaceLength}})${escapedPrefix}`), "$1");
            continue;
        }
        if (text === "") {
            fullLines[i] =
                (exampleLeadingWhitespace.length > 0
                    ? exampleLeadingWhitespace[0]
                    : " ".repeat(minLeadingWhitespaceLength)) + prefix;
            continue;
        }
        // If the prefix is already in the correct place, do not add to it:
        if (!text.match(new RegExp(`^\\s{${minLeadingWhitespaceLength}}${escapedPrefix}`))) {
            fullLines[i] = text.replace(new RegExp(`^(\\s{${minLeadingWhitespaceLength}})`), `$1${prefix}`);
        }
    }
    return {
        lines: fullLines,
        minLeadingWhitespaceLength: minLeadingWhitespaceLength,
        isEveryLinePrefixed: isEveryLinePrefixed,
    };
});
const toggleQuoteInEditor = (view, prefix) => __awaiter(void 0, void 0, void 0, function* () {
    const editor = view.editor;
    const currentSelectionStart = editor.getCursor("from");
    const currentSelectionEnd = editor.getCursor("to");
    const replacementRange = [
        { line: currentSelectionStart.line, ch: 0 },
        {
            line: currentSelectionEnd.line,
            ch: editor.getLine(currentSelectionEnd.line).length,
        },
    ];
    const fullSelectedLines = editor
        .getRange(replacementRange[0], replacementRange[1])
        .split("\n");
    const { lines, minLeadingWhitespaceLength, isEveryLinePrefixed } = yield toggleQuote(fullSelectedLines, prefix);
    editor.replaceRange(lines.join("\n"), replacementRange[0], replacementRange[1]);
    let newSelectionStartCh;
    if (currentSelectionStart.ch < minLeadingWhitespaceLength) {
        newSelectionStartCh = currentSelectionStart.ch;
    }
    else {
        if (isEveryLinePrefixed) {
            newSelectionStartCh = currentSelectionStart.ch - prefix.length;
        }
        else {
            newSelectionStartCh = currentSelectionStart.ch + prefix.length;
        }
    }
    let newSelectionEndCh;
    if (currentSelectionEnd.ch < minLeadingWhitespaceLength) {
        newSelectionEndCh = currentSelectionEnd.ch;
    }
    else {
        if (isEveryLinePrefixed) {
            newSelectionEndCh = currentSelectionEnd.ch - prefix.length;
        }
        else {
            newSelectionEndCh = currentSelectionEnd.ch + prefix.length;
        }
    }
    editor.setSelection({
        line: currentSelectionStart.line,
        ch: newSelectionStartCh,
    }, {
        line: currentSelectionEnd.line,
        ch: newSelectionEndCh,
    });
});

var Mode;
(function (Mode) {
    Mode["Text"] = "Text";
    Mode["TextBlockquote"] = "Text (Blockquote)";
    Mode["Markdown"] = "Markdown";
    Mode["MarkdownBlockquote"] = "Markdown (Blockquote)";
    Mode["CodeBlock"] = "Code Block";
    Mode["CodeBlockBlockquote"] = "Code Block (Blockquote)";
    Mode["Passthrough"] = "Passthrough";
})(Mode || (Mode = {}));
class PasteModeModal extends obsidian.FuzzySuggestModal {
    constructor({ app, onChooseItem, currentValue, }) {
        super(app);
        this.setPlaceholder(`Current: ${currentValue}`);
        this.setInstructions([
            {
                command: `Paste Mode`,
                purpose: "",
            },
        ]);
        this.onChooseItem = (patternIndex) => {
            onChooseItem(patternIndex);
            // Note: Using this.close() here was causing a bug whereby new
            // text was unable to be typed until the user had opened another
            // modal or switched away from the window. @lishid noted at
            // https://github.com/obsidianmd/obsidian-releases/pull/396#issuecomment-894017526
            // that the modal is automatically closed at the conclusion of
            // onChooseItem.
        };
    }
    getItems() {
        return Object.keys(Mode).map((key, index) => index);
    }
    getItemText(index) {
        return Object.values(Mode)[index];
    }
}
const DEFAULT_SETTINGS = {
    blockquotePrefix: "> ",
    mode: Mode.Markdown,
    apiVersion: 2,
};
class PastetoIndentationPlugin extends obsidian.Plugin {
    onload() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.loadSettings();
            const changePasteMode = (value) => __awaiter(this, void 0, void 0, function* () {
                this.settings.mode = value;
                yield this.saveSettings();
                this.statusBar.setText(`Paste Mode: ${value}`);
            });
            this.addSettingTab(new SettingTab(this.app, this));
            this.app.workspace.on("editor-paste", (evt, editor) => __awaiter(this, void 0, void 0, function* () {
                // Per https://github.com/obsidianmd/obsidian-api/blob/master/obsidian.d.ts#L3690,
                // "Check for `evt.defaultPrevented` before attempting to handle this
                // event, and return if it has been already handled."
                if (evt.defaultPrevented) {
                    return;
                }
                if (evt.clipboardData.types.every((type) => type === "files")) {
                    return;
                }
                let mode = this.settings.mode;
                if (mode === Mode.Passthrough) {
                    return;
                }
                evt.preventDefault();
                let clipboardContents = "";
                let output = "";
                if (mode === Mode.Markdown || mode === Mode.MarkdownBlockquote) {
                    clipboardContents = obsidian.htmlToMarkdown(evt.clipboardData.getData("text/html"));
                    // htmlToMarkdown() will return a blank string if
                    // there is no HTML to convert. If that is the case,
                    // we will switch to the equivalent Text mode:
                    if (clipboardContents === "") {
                        if (mode === Mode.Markdown) {
                            mode = Mode.Text;
                        }
                        if (mode === Mode.MarkdownBlockquote) {
                            mode = Mode.TextBlockquote;
                        }
                    }
                }
                if (mode === Mode.Text ||
                    mode === Mode.TextBlockquote ||
                    mode === Mode.CodeBlock ||
                    mode === Mode.CodeBlockBlockquote) {
                    clipboardContents = evt.clipboardData.getData("text");
                }
                const leadingWhitespaceMatch = editor
                    .getLine(editor.getCursor().line)
                    .match(new RegExp(`^(\\s*)`));
                const leadingWhitespace = leadingWhitespaceMatch !== null ? leadingWhitespaceMatch[1] : "";
                let input = clipboardContents.split("\n").map((line, i) => {
                    if (i === 0) {
                        return line;
                    }
                    return leadingWhitespace + line;
                });
                if (mode === Mode.Text || mode === Mode.Markdown) {
                    output = input.join("\n");
                }
                if (mode === Mode.CodeBlock) {
                    output = `\`\`\`\n${leadingWhitespace}${input.join("\n")}\n${leadingWhitespace}\`\`\``;
                }
                if (mode === Mode.CodeBlockBlockquote) {
                    input = ["```", leadingWhitespace + input, leadingWhitespace + "```"];
                }
                if (mode === Mode.TextBlockquote ||
                    mode === Mode.MarkdownBlockquote ||
                    mode === Mode.CodeBlockBlockquote) {
                    const toggledText = yield toggleQuote(
                    // We will remove leadingWhitespace from line 0 at the end.
                    // It's just here to calculate overall leading whitespace.
                    [leadingWhitespace + input[0], ...input.slice(1)], this.settings.blockquotePrefix);
                    toggledText.lines[0] = toggledText.lines[0].replace(new RegExp(`^${leadingWhitespace}`), "");
                    output = toggledText.lines.join("\n");
                }
                const transaction = {
                    replaceSelection: output,
                };
                editor.transaction(transaction);
            }));
            Object.values(Mode).forEach((value) => {
                this.addCommand({
                    id: `paste-mode-${value}`,
                    name: `Set Paste Mode to ${value}`,
                    callback: () => changePasteMode(value),
                });
            });
            Object.values(Mode).forEach((value) => {
                this.addCommand({
                    id: `cycle-paste-mode`,
                    name: `Cycle Paste Mode`,
                    callback: () => __awaiter(this, void 0, void 0, function* () {
                        const nextMode = () => {
                            const currentMode = this.settings.mode;
                            const modeValues = Object.values(Mode);
                            let newMode;
                            modeValues.forEach((value, index) => {
                                if (value === currentMode) {
                                    if (index === modeValues.length - 1) {
                                        newMode = modeValues[0];
                                        return newMode;
                                    }
                                    newMode = modeValues[index + 1];
                                    return newMode;
                                }
                            });
                            return newMode;
                        };
                        const newPasteMode = nextMode();
                        yield changePasteMode(newPasteMode);
                        new obsidian.Notice(`Paste mode changed to ${newPasteMode}`);
                    }),
                });
            });
            this.addCommand({
                id: "toggle-blockquote-at-current-indentation",
                name: "Toggle blockquote at current indentation",
                checkCallback: (checking) => {
                    let view = this.app.workspace.getActiveViewOfType(obsidian.MarkdownView);
                    if (view) {
                        if (!checking && view instanceof obsidian.MarkdownView) {
                            toggleQuoteInEditor(view, this.settings.blockquotePrefix);
                        }
                        return true;
                    }
                    return false;
                },
            });
            this.addCommand({
                id: "set-paste-mode",
                name: "Set paste mode",
                callback: () => {
                    const newMode = new PasteModeModal({
                        app,
                        onChooseItem,
                        currentValue: this.settings.mode,
                    });
                    newMode.open();
                },
            });
            this.statusBar = this.addStatusBarItem();
            this.statusBar.setText(`Paste Mode: ${this.settings.mode}`);
            const onChooseItem = (item) => __awaiter(this, void 0, void 0, function* () {
                const selection = Object.values(Mode)[item];
                yield changePasteMode(selection);
            });
            const app = this.app;
            this.statusBar.onClickEvent(() => {
                const newMode = new PasteModeModal({
                    app,
                    onChooseItem,
                    currentValue: this.settings.mode,
                });
                newMode.open();
            });
        });
    }
    loadSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
            if (!Object.values(Mode).includes(this.settings.mode)) {
                this.settings.mode = Object.values(Mode)[0];
                this.saveSettings();
            }
        });
    }
    saveSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.saveData(this.settings);
        });
    }
}
class SettingTab extends obsidian.PluginSettingTab {
    constructor(app, plugin) {
        super(app, plugin);
        this.plugin = plugin;
    }
    display() {
        let { containerEl } = this;
        containerEl.empty();
        containerEl.createEl("h2", { text: "Paste to Current Indentation" });
        new obsidian.Setting(containerEl)
            .setName("Paste Mode")
            .setDesc("Mode that the paste command will invoke.")
            .addDropdown((dropdown) => dropdown
            .addOption(Mode.Text, "Plain Text")
            .addOption(Mode.TextBlockquote, "Plain Text (Blockquote)")
            .addOption(Mode.Markdown, "Markdown")
            .addOption(Mode.MarkdownBlockquote, "Markdown (Blockquote)")
            .addOption(Mode.Passthrough, "Passthrough")
            .setValue(this.plugin.settings.mode || DEFAULT_SETTINGS.mode)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.mode =
                value || DEFAULT_SETTINGS.mode;
            yield this.plugin.saveSettings();
            this.plugin.statusBar.setText(`Paste Mode: ${this.plugin.settings.mode}`);
        })));
        new obsidian.Setting(containerEl)
            .setName("Blockquote Prefix")
            .setDesc("Markdown syntax to signify that a line is part of a blockquote.")
            .addText((text) => text
            .setPlaceholder(">•")
            .setValue(this.plugin.settings.blockquotePrefix ===
            DEFAULT_SETTINGS.blockquotePrefix
            ? ""
            : this.plugin.settings.blockquotePrefix)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.blockquotePrefix =
                value !== "" ? value : DEFAULT_SETTINGS.blockquotePrefix;
            yield this.plugin.saveSettings();
        })));
    }
}

module.exports = PastetoIndentationPlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
