/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/main.ts
__export(exports, {
  default: () => TitleSerialNumberPlugin
});
var import_obsidian2 = __toModule(require("obsidian"));

// src/serialNumberHelper.ts
var _SerialNumberHelper = class {
  static resetHxSerialNumbers(idx) {
    for (let index = idx; index < 6; index++) {
      _SerialNumberHelper.hxSerialNumbers[index] = 0;
    }
  }
  static getSerialNumberStr(level, startWith, endWith) {
    if (level >= endWith) {
      return "";
    }
    if (level < startWith) {
      return "";
    }
    level = level - startWith + 1;
    let newSerialNumber = "";
    for (let idx = 0; idx < level; idx++) {
      if (idx == level - 1) {
        _SerialNumberHelper.resetHxSerialNumbers(idx + 1);
        _SerialNumberHelper.hxSerialNumbers[idx] += 1;
        newSerialNumber += `${_SerialNumberHelper.hxSerialNumbers[idx]}`;
      } else {
        newSerialNumber += `${_SerialNumberHelper.hxSerialNumbers[idx]}.`;
      }
    }
    return `${newSerialNumber}`;
  }
};
var SerialNumberHelper = _SerialNumberHelper;
SerialNumberHelper.hxSerialNumbers = [0, 0, 0, 0, 0, 0];

// src/settings.ts
var import_obsidian = __toModule(require("obsidian"));
var TitleSerialNumberPluginSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Settings for title serial number plugin." });
    new import_obsidian.Setting(containerEl).setName("Start With (X)").setDesc("To add serial number when header level in interval [X, Y].").addDropdown((dropdown) => {
      for (const i of [1, 2, 3, 4, 5, 6]) {
        dropdown.addOption(i.toString(), i.toString());
      }
      dropdown.setValue(this.plugin.settings.startWith);
      dropdown.onChange((value) => __async(this, null, function* () {
        this.plugin.settings.startWith = value;
        yield this.plugin.saveSettings();
      }));
    });
    new import_obsidian.Setting(containerEl).setName("End With (Y)").setDesc("To add serial number when header level in interval [X, Y].").addDropdown((dropdown) => {
      for (const i of [1, 2, 3, 4, 5, 6]) {
        dropdown.addOption(i.toString(), i.toString());
      }
      dropdown.setValue(this.plugin.settings.endWith);
      dropdown.onChange((value) => __async(this, null, function* () {
        this.plugin.settings.endWith = value;
        yield this.plugin.saveSettings();
      }));
    });
  }
};

// src/main.ts
var DEFAULT_SETTINGS = {
  startWith: "1",
  endWith: "6"
};
var TitleSerialNumberPlugin = class extends import_obsidian2.Plugin {
  onload() {
    return __async(this, null, function* () {
      yield this.loadSettings();
      this.addCommand({
        id: "set-title-serial-number-editor-command",
        name: "Set Serial Number For Title",
        editorCallback: (editor, view) => {
          let startWith = parseInt(this.settings.startWith);
          let endWith = parseInt(this.settings.endWith);
          if (startWith > endWith) {
            new import_obsidian2.Notice("Your configuration is ERROR, command terminated!");
            return;
          }
          endWith += 1;
          const regex = /^([#]+) ([0-9.]* *)(.*)$/gm;
          let originVal = editor.getValue();
          let m;
          while ((m = regex.exec(originVal)) !== null) {
            if (m.index === regex.lastIndex) {
              regex.lastIndex++;
            }
            let str = m[0];
            let wellStr = m[1];
            let oldSerialNumber = m[2];
            let title = m[3];
            let matchStartIndex = m.index;
            let newSerialNumber = SerialNumberHelper.getSerialNumberStr(wellStr.length, startWith, endWith);
            let result = "";
            if (newSerialNumber === "") {
              result = `${wellStr} ${title}`;
            } else {
              result = `${wellStr} ${newSerialNumber} ${title}`;
            }
            let sub1 = originVal.substring(0, matchStartIndex);
            let sub2 = originVal.substring(matchStartIndex + str.length);
            originVal = sub1 + "" + result + sub2;
          }
          editor.setValue(originVal);
          SerialNumberHelper.resetHxSerialNumbers(0);
        }
      });
      this.addCommand({
        id: "clear-title-serial-number-editor-command",
        name: "Clear Serial Number For Title",
        editorCallback: (editor, view) => {
          const regex2 = /^([#]+) ([0-9.]* *)(.*)$/gm;
          let originVal = editor.getValue();
          let m;
          while ((m = regex2.exec(originVal)) !== null) {
            if (m.index === regex2.lastIndex) {
              regex2.lastIndex++;
            }
            console.log(m);
            let str = m[0];
            let wellStr = m[1];
            let oldSerialNumber = m[2];
            let title = m[3];
            let matchStartIndex = m.index;
            let result = `${wellStr} ${title}`;
            let sub1 = originVal.substring(0, matchStartIndex);
            let sub2 = originVal.substring(matchStartIndex + str.length);
            originVal = sub1 + "" + result + sub2;
          }
          editor.setValue(originVal);
          SerialNumberHelper.resetHxSerialNumbers(0);
        }
      });
      this.addSettingTab(new TitleSerialNumberPluginSettingTab(this.app, this));
      this.registerDomEvent(document, "click", (evt) => {
        console.log("click", evt);
      });
    });
  }
  onunload() {
  }
  loadSettings() {
    return __async(this, null, function* () {
      this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
    });
  }
  saveSettings() {
    return __async(this, null, function* () {
      yield this.saveData(this.settings);
    });
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsic3JjL21haW4udHMiLCAic3JjL3NlcmlhbE51bWJlckhlbHBlci50cyIsICJzcmMvc2V0dGluZ3MudHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImltcG9ydCB7IEFwcCwgRWRpdG9yLCBNYXJrZG93blZpZXcsIE1vZGFsLCBOb3RpY2UsIFBsdWdpbiwgUGx1Z2luU2V0dGluZ1RhYiwgU2V0dGluZyB9IGZyb20gJ29ic2lkaWFuJztcclxuaW1wb3J0IHsgU2VyaWFsTnVtYmVySGVscGVyIH0gZnJvbSAnLi9zZXJpYWxOdW1iZXJIZWxwZXInO1xyXG5pbXBvcnQgeyBUaXRsZVNlcmlhbE51bWJlclBsdWdpblNldHRpbmdzLCBUaXRsZVNlcmlhbE51bWJlclBsdWdpblNldHRpbmdUYWIgfSBmcm9tICcuL3NldHRpbmdzJztcclxuXHJcblxyXG5cclxuXHJcbmNvbnN0IERFRkFVTFRfU0VUVElOR1M6IFRpdGxlU2VyaWFsTnVtYmVyUGx1Z2luU2V0dGluZ3MgPSB7XHJcblx0c3RhcnRXaXRoOiAnMScsXHJcblx0ZW5kV2l0aDogJzYnXHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRpdGxlU2VyaWFsTnVtYmVyUGx1Z2luIGV4dGVuZHMgUGx1Z2luIHtcclxuXHRzZXR0aW5nczogVGl0bGVTZXJpYWxOdW1iZXJQbHVnaW5TZXR0aW5ncztcclxuXHJcblx0YXN5bmMgb25sb2FkKCkge1xyXG5cdFx0YXdhaXQgdGhpcy5sb2FkU2V0dGluZ3MoKTtcclxuXHJcblx0XHQvLyBUaGlzIGFkZHMgYW4gZWRpdG9yIGNvbW1hbmQgdGhhdCBjYW4gcGVyZm9ybSBzb21lIG9wZXJhdGlvbiBvbiB0aGUgY3VycmVudCBlZGl0b3IgaW5zdGFuY2VcclxuXHRcdHRoaXMuYWRkQ29tbWFuZCh7XHJcblx0XHRcdGlkOiAnc2V0LXRpdGxlLXNlcmlhbC1udW1iZXItZWRpdG9yLWNvbW1hbmQnLFxyXG5cdFx0XHRuYW1lOiAnU2V0IFNlcmlhbCBOdW1iZXIgRm9yIFRpdGxlJyxcclxuXHRcdFx0ZWRpdG9yQ2FsbGJhY2s6IChlZGl0b3I6IEVkaXRvciwgdmlldzogTWFya2Rvd25WaWV3KSA9PiB7XHJcblx0XHRcdFx0Ly9jb25zb2xlLmxvZyh0aGlzLnNldHRpbmdzKTtcclxuXHRcdFx0XHRsZXQgc3RhcnRXaXRoOiBudW1iZXIgPSBwYXJzZUludCh0aGlzLnNldHRpbmdzLnN0YXJ0V2l0aCk7XHJcblx0XHRcdFx0bGV0IGVuZFdpdGg6IG51bWJlciA9IHBhcnNlSW50KHRoaXMuc2V0dGluZ3MuZW5kV2l0aCk7XHJcblx0XHRcdFx0aWYoc3RhcnRXaXRoID4gZW5kV2l0aCl7XHJcblx0XHRcdFx0XHRuZXcgTm90aWNlKCdZb3VyIGNvbmZpZ3VyYXRpb24gaXMgRVJST1IsIGNvbW1hbmQgdGVybWluYXRlZCEnKTtcclxuXHRcdFx0XHRcdHJldHVybjtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0Ly9zdGFydFdpdGggPT0gZW5kV2l0aFx1NjVGNlx1RkYwQ1x1NEVDNVx1NEVDNVx1NUJGOVx1OEZEOVx1NEUwMFx1NjU3MFx1N0VDNFx1N0I0OVx1N0VBN1x1NzY4NFx1OEZEQlx1ODg0Q1x1NjgwN1x1OTg5OFx1NkRGQlx1NTJBMFx1NjRDRFx1NEY1Q1xyXG5cdFx0XHRcdGVuZFdpdGggKz0gMTsvL1x1NEUzQVx1NEU4Nlx1NTE5OVx1N0EwQlx1NUU4Rlx1NjVCOVx1NEZCRlx1RkYwQ1x1NjI4QVx1N0VEM1x1Njc1Rlx1ODFFQVx1NTg5RTFcclxuXHJcblx0XHRcdFx0Y29uc3QgcmVnZXggPSAvXihbI10rKSAoWzAtOS5dKiAqKSguKikkL2dtO1xyXG5cdFx0XHRcdGxldCBvcmlnaW5WYWw6IHN0cmluZyA9IGVkaXRvci5nZXRWYWx1ZSgpO1xyXG5cdFx0XHRcdGxldCBtO1xyXG5cdFx0XHRcdHdoaWxlICgobSA9IHJlZ2V4LmV4ZWMob3JpZ2luVmFsKSkgIT09IG51bGwpIHtcclxuXHRcdFx0XHRcdGlmIChtLmluZGV4ID09PSByZWdleC5sYXN0SW5kZXgpIHtcclxuXHRcdFx0XHRcdFx0cmVnZXgubGFzdEluZGV4Kys7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHQvL2pzIFx1OEZENFx1NTZERVx1NzY4NFx1NTMzOVx1OTE0RFx1N0VEM1x1Njc5Q1x1RkYxQWdyb3VwSW5kZXg9MFx1ODg2OFx1NzkzQVx1NTMzOVx1OTE0RFx1NTIzMFx1NzY4NFx1NUI1N1x1N0IyNlx1NEUzMlx1MzAwMWdyb3VwSW5kZXg9MVx1ODg2OFx1NzkzQVx1NTMzOVx1OTE0RFx1NTIzMFx1NzY4NFx1NUI1N1x1N0IyNlx1NEUzMlx1NzY4NFx1N0IyQ1x1NEUwMFx1NEUyQVx1NTIwNlx1N0VDNFx1NzY4NFx1NTAzQ1x1MzAwMWdyb3VwSW5kZXg9Mlx1ODg2OFx1NzkzQVx1NTMzOVx1OTE0RFx1NTIzMFx1NzY4NFx1NUI1N1x1N0IyNlx1NEUzMlx1NzY4NFx1N0IyQ1x1NEU4Q1x1NEUyQVx1NTIwNlx1N0VDNFx1NzY4NFx1NTAzQ1xyXG5cdFx0XHRcdFx0bGV0IHN0cjogc3RyaW5nID0gbVswXTsvL1x1NUY1M1x1NTI0RFx1NTMzOVx1OTE0RFx1NTIzMFx1NzY4NFx1NUI4Q1x1NjU3NFx1NUI1N1x1N0IyNlx1NEUzMlxyXG5cdFx0XHRcdFx0bGV0IHdlbGxTdHI6c3RyaW5nID0gbVsxXTsvL1x1NEU5NVx1NTNGN1x1NzY4NFx1NUI1N1x1N0IyNlx1NEUzMlx1RkYxQlx1NzUyOFx1NEU4RVx1NTIyNFx1NUI5QVx1NjYyRmgxXHU4RkQ4XHU2NjJGaDJcdThGRDhcdTY2MkZcdTIwMjZcdTIwMjZoNlxyXG5cdFx0XHRcdFx0bGV0IG9sZFNlcmlhbE51bWJlcjogc3RyaW5nID0gbVsyXTsvL1x1NjVFN1x1NzY4NFx1NjgwN1x1OTg5OFx1NTNGN1x1RkYwOFx1NTk4Mlx1Njc5Q1x1NjcwOVx1RkYwOVx1RkYxQlx1NTk4MjEuMSwgMS4gLCAyLjIuMSxcdTIwMjZcdTIwMjZcclxuXHRcdFx0XHRcdGxldCB0aXRsZTpzdHJpbmcgPSBtWzNdO1xyXG5cdFx0XHRcdFx0bGV0IG1hdGNoU3RhcnRJbmRleDpudW1iZXIgPSBtLmluZGV4Oy8vXHU1MzM5XHU5MTREXHU5ODc5XHU1NzI4XHU2NTg3XHU2NzJDXHU0RTJEXHU3Njg0XHU3RDIyXHU1RjE1XHU0RjREXHU3RjZFXHJcblx0XHRcdFx0XHQvL1x1ODNCN1x1NTNENlx1NUU4Rlx1NTNGN1xyXG5cdFx0XHRcdFx0bGV0IG5ld1NlcmlhbE51bWJlciA9IFNlcmlhbE51bWJlckhlbHBlci5nZXRTZXJpYWxOdW1iZXJTdHIod2VsbFN0ci5sZW5ndGgsIHN0YXJ0V2l0aCwgZW5kV2l0aCk7Ly9cdTY1QjBcdTc2ODRcdTVFOEZcdTUzRjdcclxuXHRcdFx0XHRcdGxldCByZXN1bHQgPSAnJztcclxuXHRcdFx0XHRcdGlmIChuZXdTZXJpYWxOdW1iZXIgPT09ICcnKSB7XHJcblx0XHRcdFx0XHRcdHJlc3VsdCA9IGAke3dlbGxTdHJ9ICR7dGl0bGV9YDtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdGVsc2V7XHJcblx0XHRcdFx0XHRcdHJlc3VsdCA9IGAke3dlbGxTdHJ9ICR7bmV3U2VyaWFsTnVtYmVyfSAke3RpdGxlfWA7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRsZXQgc3ViMSA9IG9yaWdpblZhbC5zdWJzdHJpbmcoMCwgbWF0Y2hTdGFydEluZGV4KTtcclxuXHRcdFx0XHRcdGxldCBzdWIyID0gb3JpZ2luVmFsLnN1YnN0cmluZyhtYXRjaFN0YXJ0SW5kZXggKyBzdHIubGVuZ3RoKTtcclxuXHRcdFx0XHRcdG9yaWdpblZhbCA9IHN1YjEgKyAnJyArIHJlc3VsdCArIHN1YjI7XHRcdFx0XHRcdFxyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRlZGl0b3Iuc2V0VmFsdWUob3JpZ2luVmFsKTtcclxuXHRcdFx0XHRTZXJpYWxOdW1iZXJIZWxwZXIucmVzZXRIeFNlcmlhbE51bWJlcnMoMCk7Ly9cdTUxNjhcdTkwRThcdTkxQ0RcdTdGNkVcdTRFM0EwXHVGRjFCXHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cclxuXHRcdHRoaXMuYWRkQ29tbWFuZCh7XHJcblx0XHRcdGlkOiAnY2xlYXItdGl0bGUtc2VyaWFsLW51bWJlci1lZGl0b3ItY29tbWFuZCcsXHJcblx0XHRcdG5hbWU6ICdDbGVhciBTZXJpYWwgTnVtYmVyIEZvciBUaXRsZScsXHJcblx0XHRcdGVkaXRvckNhbGxiYWNrOiAoZWRpdG9yOiBFZGl0b3IsIHZpZXc6IE1hcmtkb3duVmlldykgPT4ge1xyXG5cdFx0XHRcdFxyXG5cdFx0XHRcdGNvbnN0IHJlZ2V4MiA9IC9eKFsjXSspIChbMC05Ll0qICopKC4qKSQvZ207XHJcblx0XHRcdFx0bGV0IG9yaWdpblZhbDogc3RyaW5nID0gZWRpdG9yLmdldFZhbHVlKCk7XHJcblx0XHRcdFx0bGV0IG07XHJcblx0XHRcdFx0d2hpbGUgKChtID0gcmVnZXgyLmV4ZWMob3JpZ2luVmFsKSkgIT09IG51bGwpIHtcclxuXHRcdFx0XHRcdGlmIChtLmluZGV4ID09PSByZWdleDIubGFzdEluZGV4KSB7XHJcblx0XHRcdFx0XHRcdHJlZ2V4Mi5sYXN0SW5kZXgrKztcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdGNvbnNvbGUubG9nKG0pO1xyXG5cdFx0XHRcdFx0Ly9qcyBcdThGRDRcdTU2REVcdTc2ODRcdTUzMzlcdTkxNERcdTdFRDNcdTY3OUNcdUZGMUFncm91cEluZGV4PTBcdTg4NjhcdTc5M0FcdTUzMzlcdTkxNERcdTUyMzBcdTc2ODRcdTVCNTdcdTdCMjZcdTRFMzJcdTMwMDFncm91cEluZGV4PTFcdTg4NjhcdTc5M0FcdTUzMzlcdTkxNERcdTUyMzBcdTc2ODRcdTVCNTdcdTdCMjZcdTRFMzJcdTc2ODRcdTdCMkNcdTRFMDBcdTRFMkFcdTUyMDZcdTdFQzRcdTc2ODRcdTUwM0NcdTMwMDFncm91cEluZGV4PTJcdTg4NjhcdTc5M0FcdTUzMzlcdTkxNERcdTUyMzBcdTc2ODRcdTVCNTdcdTdCMjZcdTRFMzJcdTc2ODRcdTdCMkNcdTRFOENcdTRFMkFcdTUyMDZcdTdFQzRcdTc2ODRcdTUwM0NcclxuXHRcdFx0XHRcdGxldCBzdHI6IHN0cmluZyA9IG1bMF07Ly9cdTVGNTNcdTUyNERcdTUzMzlcdTkxNERcdTUyMzBcdTc2ODRcdTVCOENcdTY1NzRcdTVCNTdcdTdCMjZcdTRFMzJcclxuXHRcdFx0XHRcdGxldCB3ZWxsU3RyOnN0cmluZyA9IG1bMV07Ly9cdTRFOTVcdTUzRjdcdTc2ODRcdTVCNTdcdTdCMjZcdTRFMzJcdUZGMUJcdTc1MjhcdTRFOEVcdTUyMjRcdTVCOUFcdTY2MkZoMVx1OEZEOFx1NjYyRmgyXHU4RkQ4XHU2NjJGXHUyMDI2XHUyMDI2aDZcclxuXHRcdFx0XHRcdGxldCBvbGRTZXJpYWxOdW1iZXI6IHN0cmluZyA9IG1bMl07Ly9cdTY1RTdcdTc2ODRcdTY4MDdcdTk4OThcdTUzRjdcdUZGMDhcdTU5ODJcdTY3OUNcdTY3MDlcdUZGMDlcdUZGMUJcdTU5ODIxLjEsIDEuICwgMi4yLjEsXHUyMDI2XHUyMDI2XHJcblx0XHRcdFx0XHRsZXQgdGl0bGU6c3RyaW5nID0gbVszXTtcclxuXHRcdFx0XHRcdGxldCBtYXRjaFN0YXJ0SW5kZXg6bnVtYmVyID0gbS5pbmRleDsvL1x1NTMzOVx1OTE0RFx1OTg3OVx1NTcyOFx1NjU4N1x1NjcyQ1x1NEUyRFx1NzY4NFx1N0QyMlx1NUYxNVx1NEY0RFx1N0Y2RVxyXG5cdFx0XHRcdFx0XHJcblx0XHRcdFx0XHRsZXQgcmVzdWx0ID0gYCR7d2VsbFN0cn0gJHt0aXRsZX1gO1xyXG5cdFx0XHRcdFx0bGV0IHN1YjEgPSBvcmlnaW5WYWwuc3Vic3RyaW5nKDAsIG1hdGNoU3RhcnRJbmRleCk7XHJcblx0XHRcdFx0XHRsZXQgc3ViMiA9IG9yaWdpblZhbC5zdWJzdHJpbmcobWF0Y2hTdGFydEluZGV4ICsgc3RyLmxlbmd0aCk7XHJcblx0XHRcdFx0XHRvcmlnaW5WYWwgPSBzdWIxICsgJycgKyByZXN1bHQgKyBzdWIyO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRlZGl0b3Iuc2V0VmFsdWUob3JpZ2luVmFsKTtcclxuXHRcdFx0XHRTZXJpYWxOdW1iZXJIZWxwZXIucmVzZXRIeFNlcmlhbE51bWJlcnMoMCk7Ly9cdTUxNjhcdTkwRThcdTkxQ0RcdTdGNkVcdTRFM0EwXHVGRjFCXHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cclxuXHRcdC8vIFRoaXMgYWRkcyBhIHNldHRpbmdzIHRhYiBzbyB0aGUgdXNlciBjYW4gY29uZmlndXJlIHZhcmlvdXMgYXNwZWN0cyBvZiB0aGUgcGx1Z2luXHJcblx0XHR0aGlzLmFkZFNldHRpbmdUYWIobmV3IFRpdGxlU2VyaWFsTnVtYmVyUGx1Z2luU2V0dGluZ1RhYih0aGlzLmFwcCwgdGhpcykpO1xyXG5cclxuXHRcdC8vIElmIHRoZSBwbHVnaW4gaG9va3MgdXAgYW55IGdsb2JhbCBET00gZXZlbnRzIChvbiBwYXJ0cyBvZiB0aGUgYXBwIHRoYXQgZG9lc24ndCBiZWxvbmcgdG8gdGhpcyBwbHVnaW4pXHJcblx0XHQvLyBVc2luZyB0aGlzIGZ1bmN0aW9uIHdpbGwgYXV0b21hdGljYWxseSByZW1vdmUgdGhlIGV2ZW50IGxpc3RlbmVyIHdoZW4gdGhpcyBwbHVnaW4gaXMgZGlzYWJsZWQuXHJcblx0XHR0aGlzLnJlZ2lzdGVyRG9tRXZlbnQoZG9jdW1lbnQsICdjbGljaycsIChldnQ6IE1vdXNlRXZlbnQpID0+IHtcclxuXHRcdFx0Y29uc29sZS5sb2coJ2NsaWNrJywgZXZ0KTtcclxuXHRcdH0pO1xyXG5cdH1cclxuXHJcblx0b251bmxvYWQoKSB7XHJcblxyXG5cdH1cclxuXHJcblx0YXN5bmMgbG9hZFNldHRpbmdzKCkge1xyXG5cdFx0dGhpcy5zZXR0aW5ncyA9IE9iamVjdC5hc3NpZ24oe30sIERFRkFVTFRfU0VUVElOR1MsIGF3YWl0IHRoaXMubG9hZERhdGEoKSk7XHJcblx0fVxyXG5cclxuXHRhc3luYyBzYXZlU2V0dGluZ3MoKSB7XHJcblx0XHRhd2FpdCB0aGlzLnNhdmVEYXRhKHRoaXMuc2V0dGluZ3MpO1xyXG5cdH1cclxufVxyXG4iLCAiXHJcblxyXG4vKipcclxuICogXHU1RThGXHU1M0Y3XHU3QzdCXHJcbiAqL1xyXG4gZXhwb3J0IGNsYXNzIFNlcmlhbE51bWJlckhlbHBlcntcclxuICAgIC8qKiBIeFx1NzY4NFx1NUU4Rlx1NTNGNyAqL1xyXG4gICAgcHJpdmF0ZSBzdGF0aWMgaHhTZXJpYWxOdW1iZXJzOiBudW1iZXJbXSA9IFswLCAwLCAwLCAwLCAwLCAwXTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFx1OTFDRFx1N0Y2RVx1NTMzQVx1OTVGNFx1NEUzQVtpZHgsNl1cdTc2ODRcdTVFOEZcdTUzRjdcdTRFM0EwXHJcbiAgICAgKiBAcGFyYW0gaWR4IFx1ODJFNWlkeD0yXHVGRjA4XHU3RDIyXHU1RjE1XHU0RUNFMFx1NUYwMFx1NTlDQlx1RkYwQ1x1NjU0NVx1ODg2OFx1NzkzQVx1NUY1M1x1NTI0RFx1NEUzQWgzXHVGRjA5XHVGRjBDXHU1MjE5XHU2MjhBaDNcdTMwMDFoNFx1MzAwMWg1XHUzMDAxaDZcdTc2ODRcdTVFOEZcdTUzRjdcdTkxQ0RcdTdGNkVcdTRFM0EwXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgcmVzZXRIeFNlcmlhbE51bWJlcnMoaWR4OiBudW1iZXIpe1xyXG4gICAgICAgIGZvciAobGV0IGluZGV4ID0gaWR4OyBpbmRleCA8IDY7IGluZGV4KyspIHtcclxuICAgICAgICAgICAgU2VyaWFsTnVtYmVySGVscGVyLmh4U2VyaWFsTnVtYmVyc1tpbmRleF0gPSAwO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcblx0LyoqXHJcblx0ICogXHU4M0I3XHU1M0Q2XHU1RThGXHU1M0Y3XHJcblx0ICogQHBhcmFtIGxldmVsIFx1NUY1M1x1NTI0RFx1NjgwN1x1OTg5OFx1N0I0OVx1N0VBN1x1RkYxQlx1NTk4Mmg0XHVGRjBDXHU1MjE5bGV2ZWw9NFxyXG5cdCAqIEBwYXJhbSBzdGFydFdpdGggXHU1M0Q2XHU1MDNDXHU4MzAzXHU1NkY0XHVGRjFBMX42XHVGRjFCXHU0RUNFaFx1NTFFMFx1NUYwMFx1NTlDQlx1NkRGQlx1NTJBMFx1NjgwN1x1OTg5OFx1RkYwQ1x1NTk4MjJcdUZGMENcdTUyMTkjXHU0RTBEXHU3NTFGXHU2MjEwXHU1RThGXHU1M0Y3XHVGRjBDIyNcdTc1MUZcdTYyMTBcdTVFOEZcdTUzRjcxXHUzMDAxMlx1MzAwMTNcdUZGMEMjIyNcdTc1MUZcdTYyMTBcdTVFOEZcdTUzRjcxLjFcdTMwMDExLjJcdTMwMDExLjNcdTIwMjZcdTIwMjZcclxuXHQgKiBAcGFyYW0gZW5kV2l0aCBcdTUzRDZcdTUwM0NcdTgzMDNcdTU2RjQgMX43XHVGRjFCXHU1OTgyMlx1RkYwQ1x1NTIxOVx1NTNFQVx1NUJGOWgxXHU3NTFGXHU2MjEwXHU1RThGXHU1M0Y3XHVGRjFCXHU1OTgyN1x1RkYwQ1x1NTIxOVx1NUJGOWgxfjZcdTc1MUZcdTYyMTBcdTVFOEZcdTUzRjdcclxuXHQgKiBAcmV0dXJucyBcdTcwQjlcdTUyMDZcdTVFOEZcdTUzRjcgXHU2MjE2IFx1N0E3QVx1NUI1N1x1N0IyNlx1NEUzMlxyXG5cdCAqL1xyXG4gICAgcHVibGljIHN0YXRpYyBnZXRTZXJpYWxOdW1iZXJTdHIobGV2ZWw6IG51bWJlciwgc3RhcnRXaXRoOiBudW1iZXIsIGVuZFdpdGg6IG51bWJlcik6IHN0cmluZ3tcclxuXHRcdGlmKGxldmVsID49IGVuZFdpdGgpe1xyXG5cdFx0XHRyZXR1cm4gJyc7Ly9cdTU5MjdcdTRFOEVlbmRXaXRoXHU3Njg0XHU0RTBEXHU3NTFGXHU2MjEwXHU1RThGXHU1M0Y3XHJcblx0XHR9XHJcblx0XHRpZihsZXZlbCA8IHN0YXJ0V2l0aCl7XHJcblx0XHRcdHJldHVybiAnJzsvL1x1NUMwRlx1NEU4RXN0YXJ0V2l0aFx1NzY4NFx1NEUwRFx1NzUxRlx1NjIxMFx1NUU4Rlx1NTNGN1xyXG5cdFx0fVxyXG4gICAgICAgIGxldmVsID0gbGV2ZWwgLSBzdGFydFdpdGggKyAxO1xyXG4gICAgICAgIGxldCBuZXdTZXJpYWxOdW1iZXI6IHN0cmluZyA9ICcnOy8vXHU2NUIwXHU3Njg0XHU1RThGXHU1M0Y3XHJcbiAgICAgICAgZm9yIChsZXQgaWR4ID0gMDsgaWR4IDwgbGV2ZWw7IGlkeCsrKSB7XHJcbiAgICAgICAgICAgIGlmIChpZHggPT0gbGV2ZWwgLSAxKSB7XHJcbiAgICAgICAgICAgICAgICBTZXJpYWxOdW1iZXJIZWxwZXIucmVzZXRIeFNlcmlhbE51bWJlcnMoaWR4ICsgMSk7Ly9cdTgyRTVcdTVGNTNcdTUyNERcdTY2MkZoM1x1RkYwQ1x1NTIxOVx1NjI4QWg0XHUzMDAxaDVcdTMwMDFoNlx1NzY4NFx1N0QyMlx1NUYxNVx1NTAzQ1x1NjBDNVx1NTFCNVx1NEUzQTBcdUZGMUJcclxuICAgICAgICAgICAgICAgIFNlcmlhbE51bWJlckhlbHBlci5oeFNlcmlhbE51bWJlcnNbaWR4XSArPSAxO1xyXG4gICAgICAgICAgICAgICAgbmV3U2VyaWFsTnVtYmVyICs9IGAke1NlcmlhbE51bWJlckhlbHBlci5oeFNlcmlhbE51bWJlcnNbaWR4XX1gO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2V7XHJcbiAgICAgICAgICAgICAgICBuZXdTZXJpYWxOdW1iZXIgKz0gYCR7U2VyaWFsTnVtYmVySGVscGVyLmh4U2VyaWFsTnVtYmVyc1tpZHhdfS5gO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBgJHtuZXdTZXJpYWxOdW1iZXJ9YDtcclxuICAgIH1cclxufSIsICJpbXBvcnQgeyBBcHAsIFBsdWdpblNldHRpbmdUYWIsIFNldHRpbmcgfSBmcm9tICdvYnNpZGlhbic7XHJcbmltcG9ydCBUaXRsZVNlcmlhbE51bWJlclBsdWdpbiBmcm9tICcuL21haW4nO1xyXG5cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgVGl0bGVTZXJpYWxOdW1iZXJQbHVnaW5TZXR0aW5ncyB7XHJcblx0c3RhcnRXaXRoOiBzdHJpbmc7Ly9cdTRFQ0VoXHU1MUUwIFx1NjgwN1x1OTg5OFx1NUYwMFx1NTlDQlx1NTJBMFx1NUU4Rlx1NTNGN1xyXG5cdGVuZFdpdGg6IHN0cmluZzsvL1x1NEVDRWhcdTUxRTAgXHU2ODA3XHU5ODk4XHU1NDBFXHVGRjBDXHU0RTBEXHU1MkEwXHU1RThGXHU1M0Y3XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBUaXRsZVNlcmlhbE51bWJlclBsdWdpblNldHRpbmdUYWIgZXh0ZW5kcyBQbHVnaW5TZXR0aW5nVGFiIHtcclxuXHRwbHVnaW46IFRpdGxlU2VyaWFsTnVtYmVyUGx1Z2luO1xyXG5cclxuXHRjb25zdHJ1Y3RvcihhcHA6IEFwcCwgcGx1Z2luOiBUaXRsZVNlcmlhbE51bWJlclBsdWdpbikge1xyXG5cdFx0c3VwZXIoYXBwLCBwbHVnaW4pO1xyXG5cdFx0dGhpcy5wbHVnaW4gPSBwbHVnaW47XHJcblx0fVxyXG5cclxuXHRkaXNwbGF5KCk6IHZvaWQge1xyXG5cdFx0Y29uc3Qge2NvbnRhaW5lckVsfSA9IHRoaXM7XHJcblxyXG5cdFx0Y29udGFpbmVyRWwuZW1wdHkoKTtcclxuXHJcblx0XHRjb250YWluZXJFbC5jcmVhdGVFbCgnaDInLCB7dGV4dDogJ1NldHRpbmdzIGZvciB0aXRsZSBzZXJpYWwgbnVtYmVyIHBsdWdpbi4nfSk7XHJcblxyXG5cdFx0bmV3IFNldHRpbmcoY29udGFpbmVyRWwpXHJcblx0XHRcdC5zZXROYW1lKCdTdGFydCBXaXRoIChYKScpXHJcblx0XHRcdC5zZXREZXNjKCdUbyBhZGQgc2VyaWFsIG51bWJlciB3aGVuIGhlYWRlciBsZXZlbCBpbiBpbnRlcnZhbCBbWCwgWV0uJylcclxuXHRcdFx0LmFkZERyb3Bkb3duKGRyb3Bkb3duPT57XHJcblx0XHRcdFx0Zm9yIChjb25zdCBpIG9mIFsxLCAyLCAzLCA0LCA1LCA2XSkge1xyXG5cdFx0XHRcdFx0ZHJvcGRvd24uYWRkT3B0aW9uKGkudG9TdHJpbmcoKSwgaS50b1N0cmluZygpKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0ZHJvcGRvd24uc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3Muc3RhcnRXaXRoKTtcclxuXHRcdFx0XHRkcm9wZG93bi5vbkNoYW5nZShhc3luYyAodmFsdWUpPT57XHJcblx0XHRcdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5zdGFydFdpdGggPSB2YWx1ZTtcclxuXHRcdFx0XHRcdGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG5cdFx0XHRcdH0pXHJcblx0XHRcdH0pO1xyXG5cdFx0bmV3IFNldHRpbmcoY29udGFpbmVyRWwpXHJcblx0XHQuc2V0TmFtZSgnRW5kIFdpdGggKFkpJylcclxuXHRcdC5zZXREZXNjKCdUbyBhZGQgc2VyaWFsIG51bWJlciB3aGVuIGhlYWRlciBsZXZlbCBpbiBpbnRlcnZhbCBbWCwgWV0uJylcclxuXHRcdC5hZGREcm9wZG93bihkcm9wZG93bj0+e1xyXG5cdFx0XHRmb3IgKGNvbnN0IGkgb2YgWzEsIDIsIDMsIDQsIDUsIDZdKSB7XHJcblx0XHRcdFx0ZHJvcGRvd24uYWRkT3B0aW9uKGkudG9TdHJpbmcoKSwgaS50b1N0cmluZygpKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRkcm9wZG93bi5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5lbmRXaXRoKTtcclxuXHRcdFx0ZHJvcGRvd24ub25DaGFuZ2UoYXN5bmMgKHZhbHVlKT0+e1xyXG5cdFx0XHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLmVuZFdpdGggPSB2YWx1ZTtcclxuXHRcdFx0XHRhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuXHRcdFx0fSlcclxuXHRcdH0pO1xyXG5cdH1cclxufSJdLAogICJtYXBwaW5ncyI6ICI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFBQTtBQUFBO0FBQUEsdUJBQTRGOzs7QUNLcEYsZ0NBQXdCO0FBQUEsU0FRZCxxQkFBcUIsS0FBWTtBQUMzQyxhQUFTLFFBQVEsS0FBSyxRQUFRLEdBQUcsU0FBUztBQUN0QywwQkFBbUIsZ0JBQWdCLFNBQVM7QUFBQTtBQUFBO0FBQUEsU0FXdEMsbUJBQW1CLE9BQWUsV0FBbUIsU0FBd0I7QUFDN0YsUUFBRyxTQUFTLFNBQVE7QUFDbkIsYUFBTztBQUFBO0FBRVIsUUFBRyxRQUFRLFdBQVU7QUFDcEIsYUFBTztBQUFBO0FBRUYsWUFBUSxRQUFRLFlBQVk7QUFDNUIsUUFBSSxrQkFBMEI7QUFDOUIsYUFBUyxNQUFNLEdBQUcsTUFBTSxPQUFPLE9BQU87QUFDbEMsVUFBSSxPQUFPLFFBQVEsR0FBRztBQUNsQiw0QkFBbUIscUJBQXFCLE1BQU07QUFDOUMsNEJBQW1CLGdCQUFnQixRQUFRO0FBQzNDLDJCQUFtQixHQUFHLG9CQUFtQixnQkFBZ0I7QUFBQSxhQUV6RDtBQUNBLDJCQUFtQixHQUFHLG9CQUFtQixnQkFBZ0I7QUFBQTtBQUFBO0FBR2pFLFdBQU8sR0FBRztBQUFBO0FBQUE7QUF4Q1Y7QUFFVyxBQUZYLG1CQUVXLGtCQUE0QixDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRzs7O0FDUC9ELHNCQUErQztBQVN4QyxzREFBZ0QsaUNBQWlCO0FBQUEsRUFHdkUsWUFBWSxLQUFVLFFBQWlDO0FBQ3RELFVBQU0sS0FBSztBQUNYLFNBQUssU0FBUztBQUFBO0FBQUEsRUFHZixVQUFnQjtBQUNmLFVBQU0sRUFBQyxnQkFBZTtBQUV0QixnQkFBWTtBQUVaLGdCQUFZLFNBQVMsTUFBTSxFQUFDLE1BQU07QUFFbEMsUUFBSSx3QkFBUSxhQUNWLFFBQVEsa0JBQ1IsUUFBUSw4REFDUixZQUFZLGNBQVU7QUFDdEIsaUJBQVcsS0FBSyxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxJQUFJO0FBQ25DLGlCQUFTLFVBQVUsRUFBRSxZQUFZLEVBQUU7QUFBQTtBQUVwQyxlQUFTLFNBQVMsS0FBSyxPQUFPLFNBQVM7QUFDdkMsZUFBUyxTQUFTLENBQU8sVUFBUTtBQUNoQyxhQUFLLE9BQU8sU0FBUyxZQUFZO0FBQ2pDLGNBQU0sS0FBSyxPQUFPO0FBQUE7QUFBQTtBQUdyQixRQUFJLHdCQUFRLGFBQ1gsUUFBUSxnQkFDUixRQUFRLDhEQUNSLFlBQVksY0FBVTtBQUN0QixpQkFBVyxLQUFLLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUk7QUFDbkMsaUJBQVMsVUFBVSxFQUFFLFlBQVksRUFBRTtBQUFBO0FBRXBDLGVBQVMsU0FBUyxLQUFLLE9BQU8sU0FBUztBQUN2QyxlQUFTLFNBQVMsQ0FBTyxVQUFRO0FBQ2hDLGFBQUssT0FBTyxTQUFTLFVBQVU7QUFDL0IsY0FBTSxLQUFLLE9BQU87QUFBQTtBQUFBO0FBQUE7QUFBQTs7O0FGeEN0QixJQUFNLG1CQUFvRDtBQUFBLEVBQ3pELFdBQVc7QUFBQSxFQUNYLFNBQVM7QUFBQTtBQUdWLDRDQUFxRCx3QkFBTztBQUFBLEVBR3JELFNBQVM7QUFBQTtBQUNkLFlBQU0sS0FBSztBQUdYLFdBQUssV0FBVztBQUFBLFFBQ2YsSUFBSTtBQUFBLFFBQ0osTUFBTTtBQUFBLFFBQ04sZ0JBQWdCLENBQUMsUUFBZ0IsU0FBdUI7QUFFdkQsY0FBSSxZQUFvQixTQUFTLEtBQUssU0FBUztBQUMvQyxjQUFJLFVBQWtCLFNBQVMsS0FBSyxTQUFTO0FBQzdDLGNBQUcsWUFBWSxTQUFRO0FBQ3RCLGdCQUFJLHdCQUFPO0FBQ1g7QUFBQTtBQUdELHFCQUFXO0FBRVgsZ0JBQU0sUUFBUTtBQUNkLGNBQUksWUFBb0IsT0FBTztBQUMvQixjQUFJO0FBQ0osaUJBQVEsS0FBSSxNQUFNLEtBQUssZ0JBQWdCLE1BQU07QUFDNUMsZ0JBQUksRUFBRSxVQUFVLE1BQU0sV0FBVztBQUNoQyxvQkFBTTtBQUFBO0FBR1AsZ0JBQUksTUFBYyxFQUFFO0FBQ3BCLGdCQUFJLFVBQWlCLEVBQUU7QUFDdkIsZ0JBQUksa0JBQTBCLEVBQUU7QUFDaEMsZ0JBQUksUUFBZSxFQUFFO0FBQ3JCLGdCQUFJLGtCQUF5QixFQUFFO0FBRS9CLGdCQUFJLGtCQUFrQixtQkFBbUIsbUJBQW1CLFFBQVEsUUFBUSxXQUFXO0FBQ3ZGLGdCQUFJLFNBQVM7QUFDYixnQkFBSSxvQkFBb0IsSUFBSTtBQUMzQix1QkFBUyxHQUFHLFdBQVc7QUFBQSxtQkFFcEI7QUFDSCx1QkFBUyxHQUFHLFdBQVcsbUJBQW1CO0FBQUE7QUFFM0MsZ0JBQUksT0FBTyxVQUFVLFVBQVUsR0FBRztBQUNsQyxnQkFBSSxPQUFPLFVBQVUsVUFBVSxrQkFBa0IsSUFBSTtBQUNyRCx3QkFBWSxPQUFPLEtBQUssU0FBUztBQUFBO0FBRWxDLGlCQUFPLFNBQVM7QUFDaEIsNkJBQW1CLHFCQUFxQjtBQUFBO0FBQUE7QUFJMUMsV0FBSyxXQUFXO0FBQUEsUUFDZixJQUFJO0FBQUEsUUFDSixNQUFNO0FBQUEsUUFDTixnQkFBZ0IsQ0FBQyxRQUFnQixTQUF1QjtBQUV2RCxnQkFBTSxTQUFTO0FBQ2YsY0FBSSxZQUFvQixPQUFPO0FBQy9CLGNBQUk7QUFDSixpQkFBUSxLQUFJLE9BQU8sS0FBSyxnQkFBZ0IsTUFBTTtBQUM3QyxnQkFBSSxFQUFFLFVBQVUsT0FBTyxXQUFXO0FBQ2pDLHFCQUFPO0FBQUE7QUFFUixvQkFBUSxJQUFJO0FBRVosZ0JBQUksTUFBYyxFQUFFO0FBQ3BCLGdCQUFJLFVBQWlCLEVBQUU7QUFDdkIsZ0JBQUksa0JBQTBCLEVBQUU7QUFDaEMsZ0JBQUksUUFBZSxFQUFFO0FBQ3JCLGdCQUFJLGtCQUF5QixFQUFFO0FBRS9CLGdCQUFJLFNBQVMsR0FBRyxXQUFXO0FBQzNCLGdCQUFJLE9BQU8sVUFBVSxVQUFVLEdBQUc7QUFDbEMsZ0JBQUksT0FBTyxVQUFVLFVBQVUsa0JBQWtCLElBQUk7QUFDckQsd0JBQVksT0FBTyxLQUFLLFNBQVM7QUFBQTtBQUVsQyxpQkFBTyxTQUFTO0FBQ2hCLDZCQUFtQixxQkFBcUI7QUFBQTtBQUFBO0FBSzFDLFdBQUssY0FBYyxJQUFJLGtDQUFrQyxLQUFLLEtBQUs7QUFJbkUsV0FBSyxpQkFBaUIsVUFBVSxTQUFTLENBQUMsUUFBb0I7QUFDN0QsZ0JBQVEsSUFBSSxTQUFTO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFJdkIsV0FBVztBQUFBO0FBQUEsRUFJTCxlQUFlO0FBQUE7QUFDcEIsV0FBSyxXQUFXLE9BQU8sT0FBTyxJQUFJLGtCQUFrQixNQUFNLEtBQUs7QUFBQTtBQUFBO0FBQUEsRUFHMUQsZUFBZTtBQUFBO0FBQ3BCLFlBQU0sS0FBSyxTQUFTLEtBQUs7QUFBQTtBQUFBO0FBQUE7IiwKICAibmFtZXMiOiBbXQp9Cg==
