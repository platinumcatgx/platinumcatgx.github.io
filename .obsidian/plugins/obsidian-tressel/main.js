/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[Object.keys(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// node_modules/truncate-utf8-bytes/lib/truncate.js
var require_truncate = __commonJS({
  "node_modules/truncate-utf8-bytes/lib/truncate.js"(exports, module2) {
    "use strict";
    function isHighSurrogate(codePoint) {
      return codePoint >= 55296 && codePoint <= 56319;
    }
    function isLowSurrogate(codePoint) {
      return codePoint >= 56320 && codePoint <= 57343;
    }
    module2.exports = function truncate(getLength, string, byteLength) {
      if (typeof string !== "string") {
        throw new Error("Input must be string");
      }
      var charLength = string.length;
      var curByteLength = 0;
      var codePoint;
      var segment;
      for (var i = 0; i < charLength; i += 1) {
        codePoint = string.charCodeAt(i);
        segment = string[i];
        if (isHighSurrogate(codePoint) && isLowSurrogate(string.charCodeAt(i + 1))) {
          i += 1;
          segment += string[i];
        }
        curByteLength += getLength(segment);
        if (curByteLength === byteLength) {
          return string.slice(0, i + 1);
        } else if (curByteLength > byteLength) {
          return string.slice(0, i - segment.length + 1);
        }
      }
      return string;
    };
  }
});

// node_modules/utf8-byte-length/browser.js
var require_browser = __commonJS({
  "node_modules/utf8-byte-length/browser.js"(exports, module2) {
    "use strict";
    function isHighSurrogate(codePoint) {
      return codePoint >= 55296 && codePoint <= 56319;
    }
    function isLowSurrogate(codePoint) {
      return codePoint >= 56320 && codePoint <= 57343;
    }
    module2.exports = function getByteLength(string) {
      if (typeof string !== "string") {
        throw new Error("Input must be string");
      }
      var charLength = string.length;
      var byteLength = 0;
      var codePoint = null;
      var prevCodePoint = null;
      for (var i = 0; i < charLength; i++) {
        codePoint = string.charCodeAt(i);
        if (isLowSurrogate(codePoint)) {
          if (prevCodePoint != null && isHighSurrogate(prevCodePoint)) {
            byteLength += 1;
          } else {
            byteLength += 3;
          }
        } else if (codePoint <= 127) {
          byteLength += 1;
        } else if (codePoint >= 128 && codePoint <= 2047) {
          byteLength += 2;
        } else if (codePoint >= 2048 && codePoint <= 65535) {
          byteLength += 3;
        }
        prevCodePoint = codePoint;
      }
      return byteLength;
    };
  }
});

// node_modules/truncate-utf8-bytes/browser.js
var require_browser2 = __commonJS({
  "node_modules/truncate-utf8-bytes/browser.js"(exports, module2) {
    "use strict";
    var truncate = require_truncate();
    var getLength = require_browser();
    module2.exports = truncate.bind(null, getLength);
  }
});

// node_modules/sanitize-filename/index.js
var require_sanitize_filename = __commonJS({
  "node_modules/sanitize-filename/index.js"(exports, module2) {
    "use strict";
    var truncate = require_browser2();
    var illegalRe = /[\/\?<>\\:\*\|"]/g;
    var controlRe = /[\x00-\x1f\x80-\x9f]/g;
    var reservedRe = /^\.+$/;
    var windowsReservedRe = /^(con|prn|aux|nul|com[0-9]|lpt[0-9])(\..*)?$/i;
    var windowsTrailingRe = /[\. ]+$/;
    function sanitize2(input, replacement) {
      if (typeof input !== "string") {
        throw new Error("Input must be string");
      }
      var sanitized = input.replace(illegalRe, replacement).replace(controlRe, replacement).replace(reservedRe, replacement).replace(windowsReservedRe, replacement).replace(windowsTrailingRe, replacement);
      return truncate(sanitized, 255);
    }
    module2.exports = function(input, options) {
      var replacement = options && options.replacement || "";
      var output = sanitize2(input, replacement);
      if (replacement === "") {
        return output;
      }
      return sanitize2(output, "");
    };
  }
});

// main.ts
__export(exports, {
  default: () => TresselPlugin
});
var import_obsidian = __toModule(require("obsidian"));
var import_sanitize_filename = __toModule(require_sanitize_filename());
var DEFAULT_SETTINGS = {
  tresselUserToken: "XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX",
  tweetsToIgnore: [],
  threadsToIgnore: []
};
var TresselPlugin = class extends import_obsidian.Plugin {
  onload() {
    return __async(this, null, function* () {
      yield this.loadSettings();
      yield this.syncTressel(true);
      yield this.saveSettings();
      this.addRibbonIcon("sync", "Sync Tressel", (evt) => __async(this, null, function* () {
        yield this.syncTressel();
        yield this.saveSettings();
        new import_obsidian.Notice("Finished Tressel sync");
      }));
      this.addSettingTab(new TresselSettingTab(this.app, this));
    });
  }
  syncTressel(onload) {
    return __async(this, null, function* () {
      if (!onload) {
        new import_obsidian.Notice("Starting Tressel sync");
      }
      if (this.settings.tresselUserToken !== "XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX") {
        try {
          const userData = JSON.parse(yield (0, import_obsidian.request)({
            url: `https://us-central1-tressel-646e8.cloudfunctions.net/getUserDataByObsidianToken?token=${this.settings.tresselUserToken}`
          }));
          const tresselFolder = this.app.vault.getAbstractFileByPath("\u{1F5C3}\uFE0F Tressel");
          const tresselFolderExists = tresselFolder instanceof import_obsidian.TFolder;
          if (!tresselFolderExists) {
            yield this.app.vault.createFolder("\u{1F5C3}\uFE0F Tressel");
          }
          if (userData.tweets.length !== 0) {
            for (let tweet of userData.tweets) {
              if (!this.settings.tweetsToIgnore.includes(tweet.id)) {
                let templateArray = [
                  `# ${tweet.text.replace(/(\r\n|\n|\r)/gm, " ").slice(0, 50)}...`,
                  `## Metadata`,
                  `- Author: [${tweet.author.name}](https://twitter.com/${tweet.author.username})`,
                  `- Type: \u{1F424} Tweet #tweet`,
                  `- URL: ${tweet.url}
`,
                  `## Tweet`,
                  `${tweet.text}
`
                ];
                if (tweet.media) {
                  for (let mediaUrl of tweet.media) {
                    templateArray.push(`![](${mediaUrl})
`);
                  }
                }
                let template = templateArray.join("\n");
                yield this.app.vault.create("\u{1F5C3}\uFE0F Tressel/" + (0, import_sanitize_filename.default)(tweet.text.replace(/(\r\n|\n|\r)/gm, " ").replace("\n\n", " ").replace("\n\n\n", " ").slice(0, 50)) + ".md", template);
                this.settings.tweetsToIgnore.push(tweet.id);
              }
            }
          }
          if (userData.threads.length !== 0) {
            for (let thread of userData.threads) {
              if (!this.settings.threadsToIgnore.includes(thread.id)) {
                let templateArray = [
                  `# ${thread.fullThreadText[0].replace(/(\r\n|\n|\r)/gm, " ").slice(0, 50)}...`,
                  `## Metadata`,
                  `- Author: [${thread.author.name}](https://twitter.com/${thread.author.username})`,
                  `- Type: \u{1F9F5} Thread #thread`,
                  `- URL: ${thread.threadUrl}
`,
                  `## Thread`
                ];
                for (let tweetId in thread) {
                  if (tweetId !== "author" && tweetId !== "fullThreadText" && tweetId !== "id" && tweetId !== "threadUrl") {
                    let tweetInThread = thread[tweetId];
                    templateArray.push(`${tweetInThread.text}
`);
                    if (tweetInThread.media) {
                      for (let mediaUrl of tweetInThread.media) {
                        templateArray.push(`![](${mediaUrl})
`);
                      }
                    }
                  }
                }
                let template = templateArray.join("\n");
                yield this.app.vault.create("\u{1F5C3}\uFE0F Tressel/" + (0, import_sanitize_filename.default)(thread.fullThreadText[0].replace(/(\r\n|\n|\r)/gm, " ").replace("\n\n", " ").replace("\n\n\n", " ").slice(0, 50)) + ".md", template);
                this.settings.threadsToIgnore.push(thread.id);
              }
            }
          }
        } catch (e) {
          new import_obsidian.Notice("Unable to sync from Tressel - invalid token provided");
        }
      } else {
        new import_obsidian.Notice("Unable to sync from Tressel - please fill out your Tressel user token before syncing");
      }
    });
  }
  clearSyncMemory() {
    return __async(this, null, function* () {
      this.settings.threadsToIgnore = [];
      this.settings.tweetsToIgnore = [];
      yield this.saveSettings();
      new import_obsidian.Notice("Cleared Tressel sync memory");
    });
  }
  onunload() {
  }
  loadSettings() {
    return __async(this, null, function* () {
      this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
    });
  }
  saveSettings() {
    return __async(this, null, function* () {
      yield this.saveData(this.settings);
    });
  }
};
var TresselSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Tressel Settings" });
    new import_obsidian.Setting(containerEl).setName("Tressel User Token").setDesc("Get your unique token from the Obsidian settings page in Tressel").addText((text) => text.setPlaceholder("Enter your token").setValue(this.plugin.settings.tresselUserToken).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.tresselUserToken = value;
      yield this.plugin.saveSettings();
    })));
    new import_obsidian.Setting(containerEl).setName("Clear Sync Memory").setDesc("Forget what you've already synced from your Tressel library and start from scratch").addButton((button) => {
      button.setButtonText("Clear Sync Memory").onClick(() => __async(this, null, function* () {
        yield this.plugin.clearSyncMemory();
      }));
    });
  }
};
