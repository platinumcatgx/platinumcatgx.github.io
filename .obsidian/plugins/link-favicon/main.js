/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
https://github.com/joethei/obisidian-link-favicon
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[Object.keys(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// node_modules/@aidenlx/obsidian-icon-shortcodes/lib/index.js
var require_lib = __commonJS({
  "node_modules/@aidenlx/obsidian-icon-shortcodes/lib/index.js"(exports) {
    var a = Object.create;
    var t = Object.defineProperty;
    var d = Object.getOwnPropertyDescriptor;
    var p = Object.getOwnPropertyNames;
    var f = Object.getPrototypeOf;
    var g = Object.prototype.hasOwnProperty;
    var o = (n) => t(n, "__esModule", { value: true });
    var l = (n, e) => {
      o(n);
      for (var i in e)
        t(n, i, { get: e[i], enumerable: true });
    };
    var c = (n, e, i) => {
      if (e && typeof e == "object" || typeof e == "function")
        for (let r of p(e))
          !g.call(n, r) && r !== "default" && t(n, r, { get: () => e[r], enumerable: !(i = d(e, r)) || i.enumerable });
      return n;
    };
    var u = (n) => c(o(t(n != null ? a(f(n)) : {}, "default", n && n.__esModule && "default" in n ? { get: () => n.default, enumerable: true } : { value: n, enumerable: true })), n);
    l(exports, { getApi: () => s, isPluginEnabled: () => P });
    var v = u(require("obsidian"));
    var s = (n) => {
      var e;
      return n ? (e = n.app.plugins.plugins["obsidian-icon-shortcodes"]) == null ? void 0 : e.api : window.IconSCAPIv0;
    };
    var P = (n) => s(n) !== void 0;
  }
});

// schemas.json
var require_schemas = __commonJS({
  "schemas.json"(exports, module2) {
    module2.exports = [
      {
        "URI Scheme": "aaa",
        Template: "",
        Description: "Diameter Protocol",
        Status: "Permanent",
        "Well-Known URI Support": "-",
        Reference: "[RFC6733]",
        Notes: "",
        schema: "aaa"
      },
      {
        "URI Scheme": "aaas",
        Template: "",
        Description: "Diameter Protocol with Secure Transport",
        Status: "Permanent",
        "Well-Known URI Support": "-",
        Reference: "[RFC6733]",
        Notes: "",
        schema: "aaas"
      },
      {
        "URI Scheme": "about",
        Template: "",
        Description: "about",
        Status: "Permanent",
        "Well-Known URI Support": "-",
        Reference: "[RFC6694]",
        Notes: "",
        schema: "about"
      },
      {
        "URI Scheme": "acap",
        Template: "",
        Description: "application configuration access protocol",
        Status: "Permanent",
        "Well-Known URI Support": "-",
        Reference: "[RFC2244]",
        Notes: "",
        schema: "acap"
      },
      {
        "URI Scheme": "acct",
        Template: "",
        Description: "acct",
        Status: "Permanent",
        "Well-Known URI Support": "-",
        Reference: "[RFC7565]",
        Notes: "",
        schema: "acct"
      },
      {
        "URI Scheme": "acd",
        Template: "prov/acd",
        Description: "acd",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[Michael_Hedenus]",
        Notes: "",
        schema: "acd"
      },
      {
        "URI Scheme": "acr",
        Template: "prov/acr",
        Description: "acr",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[OMA-OMNA]",
        Notes: "",
        schema: "acr"
      },
      {
        "URI Scheme": "adiumxtra",
        Template: "prov/adiumxtra",
        Description: "adiumxtra",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[Dave_Thaler]",
        Notes: "",
        schema: "adiumxtra"
      },
      {
        "URI Scheme": "adt",
        Template: "prov/adt",
        Description: "adt",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[SAP_SE]",
        Notes: "",
        schema: "adt"
      },
      {
        "URI Scheme": "afp",
        Template: "prov/afp",
        Description: "afp",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[Dave_Thaler]",
        Notes: "",
        schema: "afp"
      },
      {
        "URI Scheme": "afs",
        Template: "",
        Description: "Andrew File System global file names",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[RFC1738]",
        Notes: "",
        schema: "afs"
      },
      {
        "URI Scheme": "aim",
        Template: "prov/aim",
        Description: "aim",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[Dave_Thaler]",
        Notes: "",
        schema: "aim"
      },
      {
        "URI Scheme": "amss",
        Template: "prov/amss",
        Description: "amss",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[RadioDNS_Project]",
        Notes: "",
        schema: "amss"
      },
      {
        "URI Scheme": "android",
        Template: "prov/android",
        Description: "android",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[Adam_Barth][https://developer.android.com/guide/topics/manifest/manifest-intro]",
        Notes: "",
        schema: "android"
      },
      {
        "URI Scheme": "appdata",
        Template: "prov/appdata",
        Description: "appdata",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[urischemeowners_at_microsoft.com]",
        Notes: "",
        schema: "appdata"
      },
      {
        "URI Scheme": "apt",
        Template: "prov/apt",
        Description: "apt",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[Dave_Thaler]",
        Notes: "",
        schema: "apt"
      },
      {
        "URI Scheme": "ar",
        Template: "prov/ar",
        Description: "ar",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[Arweave_Team]",
        Notes: "",
        schema: "ar"
      },
      {
        "URI Scheme": "ark",
        Template: "prov/ark",
        Description: "ark",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[ARK_agency][https://n2t.net/ark:/21206/10015]",
        Notes: "",
        schema: "ark"
      },
      {
        "URI Scheme": "attachment",
        Template: "prov/attachment",
        Description: "attachment",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[Dave_Thaler]",
        Notes: "",
        schema: "attachment"
      },
      {
        "URI Scheme": "aw",
        Template: "prov/aw",
        Description: "aw",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[Dave_Thaler]",
        Notes: "",
        schema: "aw"
      },
      {
        "URI Scheme": "barion",
        Template: "prov/barion",
        Description: "barion",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[B\xEDr\xF3_Tam\xE1s]",
        Notes: "",
        schema: "barion"
      },
      {
        "URI Scheme": "beshare",
        Template: "prov/beshare",
        Description: "beshare",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[Dave_Thaler]",
        Notes: "",
        schema: "beshare"
      },
      {
        "URI Scheme": "bitcoin",
        Template: "prov/bitcoin",
        Description: "bitcoin",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[Dave_Thaler]",
        Notes: "",
        schema: "bitcoin"
      },
      {
        "URI Scheme": "bitcoincash",
        Template: "prov/bitcoincash",
        Description: "bitcoincash",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[Corentin_Mercier]",
        Notes: "",
        schema: "bitcoincash"
      },
      {
        "URI Scheme": "blob",
        Template: "prov/blob",
        Description: "blob",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[W3C_WebApps_Working_Group][Chris_Rebert]",
        Notes: "",
        schema: "blob"
      },
      {
        "URI Scheme": "bolo",
        Template: "prov/bolo",
        Description: "bolo",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[Dave_Thaler]",
        Notes: "",
        schema: "bolo"
      },
      {
        "URI Scheme": "browserext",
        Template: "prov/browserext",
        Description: "browserext",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[Mike_Pietraszak]",
        Notes: "",
        schema: "browserext"
      },
      {
        "URI Scheme": "cabal",
        Template: "prov/cabal",
        Description: "cabal",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[Fr\xE9d\xE9ric_Wang][Cabal_Club]",
        Notes: "",
        schema: "cabal"
      },
      {
        "URI Scheme": "calculator",
        Template: "prov/calculator",
        Description: "calculator",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[urischemeowners_at_microsoft.com]",
        Notes: "",
        schema: "calculator"
      },
      {
        "URI Scheme": "callto",
        Template: "prov/callto",
        Description: "callto",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[Alexey_Melnikov]",
        Notes: "",
        schema: "callto"
      },
      {
        "URI Scheme": "cap",
        Template: "",
        Description: "Calendar Access Protocol",
        Status: "Permanent",
        "Well-Known URI Support": "-",
        Reference: "[RFC4324]",
        Notes: "",
        schema: "cap"
      },
      {
        "URI Scheme": "cast",
        Template: "prov/cast",
        Description: "cast",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[Adam_Barth][https://developers.google.com/cast/docs/registration]",
        Notes: "",
        schema: "cast"
      },
      {
        "URI Scheme": "casts",
        Template: "prov/casts",
        Description: "casts",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[Adam_Barth][https://developers.google.com/cast/docs/registration]",
        Notes: "",
        schema: "casts"
      },
      {
        "URI Scheme": "chrome",
        Template: "prov/chrome",
        Description: "chrome",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[Dave_Thaler]",
        Notes: "",
        schema: "chrome"
      },
      {
        "URI Scheme": "chrome-extension",
        Template: "prov/chrome-extension",
        Description: "chrome-extension",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[Dave_Thaler]",
        Notes: "",
        schema: "chrome-extension"
      },
      {
        "URI Scheme": "cid",
        Template: "",
        Description: "content identifier",
        Status: "Permanent",
        "Well-Known URI Support": "-",
        Reference: "[RFC2392]",
        Notes: "",
        schema: "cid"
      },
      {
        "URI Scheme": "coap",
        Template: "",
        Description: "coap",
        Status: "Permanent",
        "Well-Known URI Support": "[RFC7252]",
        Reference: "[RFC7252]",
        Notes: "",
        schema: "coap"
      },
      {
        "URI Scheme": "coap+tcp",
        Template: "",
        Description: "coap+tcp [1]",
        Status: "Permanent",
        "Well-Known URI Support": "[RFC8323]",
        Reference: "[RFC8323]",
        Notes: "",
        schema: "coap+tcp"
      },
      {
        "URI Scheme": "coap+ws",
        Template: "",
        Description: "coap+ws [1]",
        Status: "Permanent",
        "Well-Known URI Support": "[RFC8323]",
        Reference: "[RFC8323]",
        Notes: "",
        schema: "coap+ws"
      },
      {
        "URI Scheme": "coaps",
        Template: "",
        Description: "coaps",
        Status: "Permanent",
        "Well-Known URI Support": "[RFC7252]",
        Reference: "[RFC7252]",
        Notes: "",
        schema: "coaps"
      },
      {
        "URI Scheme": "coaps+tcp",
        Template: "",
        Description: "coaps+tcp [1]",
        Status: "Permanent",
        "Well-Known URI Support": "[RFC8323]",
        Reference: "[RFC8323]",
        Notes: "",
        schema: "coaps+tcp"
      },
      {
        "URI Scheme": "coaps+ws",
        Template: "",
        Description: "coaps+ws [1]",
        Status: "Permanent",
        "Well-Known URI Support": "[RFC8323]",
        Reference: "[RFC8323]",
        Notes: "",
        schema: "coaps+ws"
      },
      {
        "URI Scheme": "com-eventbrite-attendee",
        Template: "prov/com-eventbrite-attendee",
        Description: "com-eventbrite-attendee",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[Bob_Van_Zant]",
        Notes: "",
        schema: "com-eventbrite-attendee"
      },
      {
        "URI Scheme": "content",
        Template: "prov/content",
        Description: "content",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[Dave_Thaler]",
        Notes: "",
        schema: "content"
      },
      {
        "URI Scheme": "content-type",
        Template: "prov/content-type",
        Description: "content-type",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[Donald_Eastlake]",
        Notes: "",
        schema: "content-type"
      },
      {
        "URI Scheme": "crid",
        Template: "",
        Description: "TV-Anytime Content Reference Identifier",
        Status: "Permanent",
        "Well-Known URI Support": "-",
        Reference: "[RFC4078]",
        Notes: "",
        schema: "crid"
      },
      {
        "URI Scheme": "cvs",
        Template: "prov/cvs",
        Description: "cvs",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[Dave_Thaler]",
        Notes: "",
        schema: "cvs"
      },
      {
        "URI Scheme": "dab",
        Template: "prov/dab",
        Description: "dab",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[RadioDNS_Project]",
        Notes: "",
        schema: "dab"
      },
      {
        "URI Scheme": "dat",
        Template: "prov/dat",
        Description: "dat",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[Fr\xE9d\xE9ric_Wang][Paul_Frazee]",
        Notes: "",
        schema: "dat"
      },
      {
        "URI Scheme": "data",
        Template: "",
        Description: "data",
        Status: "Permanent",
        "Well-Known URI Support": "-",
        Reference: "[RFC2397]",
        Notes: "",
        schema: "data"
      },
      {
        "URI Scheme": "dav",
        Template: "",
        Description: "dav",
        Status: "Permanent",
        "Well-Known URI Support": "-",
        Reference: "[RFC4918]",
        Notes: "",
        schema: "dav"
      },
      {
        "URI Scheme": "diaspora",
        Template: "prov/diaspora",
        Description: "diaspora",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[Dennis_Schubert]",
        Notes: "",
        schema: "diaspora"
      },
      {
        "URI Scheme": "dict",
        Template: "",
        Description: "dictionary service protocol",
        Status: "Permanent",
        "Well-Known URI Support": "-",
        Reference: "[RFC2229]",
        Notes: "",
        schema: "dict"
      },
      {
        "URI Scheme": "did",
        Template: "prov/did",
        Description: "did",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[W3C_Decentralized_Identifier_Working_Group ][Manu_Sporny][Ivan_Herman]",
        Notes: "",
        schema: "did"
      },
      {
        "URI Scheme": "dis",
        Template: "prov/dis",
        Description: "dis",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[Christophe_Meessen]",
        Notes: "",
        schema: "dis"
      },
      {
        "URI Scheme": "dlna-playcontainer",
        Template: "prov/dlna-playcontainer",
        Description: "dlna-playcontainer",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[DLNA]",
        Notes: "",
        schema: "dlna-playcontainer"
      },
      {
        "URI Scheme": "dlna-playsingle",
        Template: "prov/dlna-playsingle",
        Description: "dlna-playsingle",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[DLNA]",
        Notes: "",
        schema: "dlna-playsingle"
      },
      {
        "URI Scheme": "dns",
        Template: "",
        Description: "Domain Name System",
        Status: "Permanent",
        "Well-Known URI Support": "-",
        Reference: "[RFC4501]",
        Notes: "",
        schema: "dns"
      },
      {
        "URI Scheme": "dntp",
        Template: "prov/dntp",
        Description: "dntp",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[Hans-Dieter_A._Hiep]",
        Notes: "",
        schema: "dntp"
      },
      {
        "URI Scheme": "doi",
        Template: "prov/doi",
        Description: "doi",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[Fr\xE9d\xE9ric_Wang][International_DOI_Foundation]",
        Notes: "",
        schema: "doi"
      },
      {
        "URI Scheme": "dpp",
        Template: "prov/dpp",
        Description: "dpp",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[Gaurav_Jain][Wi-Fi_Alliance]",
        Notes: "",
        schema: "dpp"
      },
      {
        "URI Scheme": "drm",
        Template: "prov/drm",
        Description: "drm",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[RadioDNS_Project]",
        Notes: "",
        schema: "drm"
      },
      {
        "URI Scheme": "drop",
        Template: "prov/drop",
        Description: "drop",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[Tim_McSweeney]",
        Notes: "",
        schema: "drop"
      },
      {
        "URI Scheme": "dtmi",
        Template: "prov/dtmi",
        Description: "dtmi",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[urischemeowners_at_microsoft.com]",
        Notes: "",
        schema: "dtmi"
      },
      {
        "URI Scheme": "dtn",
        Template: "",
        Description: "DTNRG research and development",
        Status: "Permanent",
        "Well-Known URI Support": "-",
        Reference: "[RFC-ietf-dtn-bpbis-31]",
        Notes: "",
        schema: "dtn"
      },
      {
        "URI Scheme": "dvb",
        Template: "",
        Description: "dvb",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[draft-mcroberts-uri-dvb]",
        Notes: "",
        schema: "dvb"
      },
      {
        "URI Scheme": "dvx",
        Template: "prov/dvx",
        Description: "dvx",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[Clemens_Bastian]",
        Notes: "",
        schema: "dvx"
      },
      {
        "URI Scheme": "dweb",
        Template: "prov/dweb",
        Description: "dweb",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[Fr\xE9d\xE9ric_Wang][Protocol_Labs]",
        Notes: "",
        schema: "dweb"
      },
      {
        "URI Scheme": "ed2k",
        Template: "prov/ed2k",
        Description: "ed2k",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[Dave_Thaler]",
        Notes: "",
        schema: "ed2k"
      },
      {
        "URI Scheme": "elsi",
        Template: "prov/elsi",
        Description: "elsi",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[Kimmo_Lindholm]",
        Notes: "",
        schema: "elsi"
      },
      {
        "URI Scheme": "embedded",
        Template: "prov/embedded",
        Description: "embedded",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[Peter_Hoddie]",
        Notes: "",
        schema: "embedded"
      },
      {
        "URI Scheme": "ens",
        Template: "prov/ens",
        Description: "ens",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[Ricky_Bloomfield][Bradley_Nelson]",
        Notes: "",
        schema: "ens"
      },
      {
        "URI Scheme": "ethereum",
        Template: "prov/ethereum",
        Description: "ethereum",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[Fr\xE9d\xE9ric_Wang][ligi]",
        Notes: "",
        schema: "ethereum"
      },
      {
        "URI Scheme": "example",
        Template: "",
        Description: "example",
        Status: "Permanent",
        "Well-Known URI Support": "-",
        Reference: "[RFC7595]",
        Notes: "",
        schema: "example"
      },
      {
        "URI Scheme": "facetime",
        Template: "prov/facetime",
        Description: "facetime",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[Dave_Thaler]",
        Notes: "",
        schema: "facetime"
      },
      {
        "URI Scheme": "fax",
        Template: "",
        Description: "fax",
        Status: "Historical",
        "Well-Known URI Support": "-",
        Reference: "[RFC2806][RFC3966]",
        Notes: "",
        schema: "fax"
      },
      {
        "URI Scheme": "feed",
        Template: "prov/feed",
        Description: "feed",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[Dave_Thaler]",
        Notes: "",
        schema: "feed"
      },
      {
        "URI Scheme": "feedready",
        Template: "prov/feedready",
        Description: "feedready",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[Mirko_Nosenzo]",
        Notes: "",
        schema: "feedready"
      },
      {
        "URI Scheme": "fido",
        Template: "prov/fido",
        Description: "fido",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[Adam_Langley]",
        Notes: "",
        schema: "fido"
      },
      {
        "URI Scheme": "file",
        Template: "",
        Description: "Host-specific file names",
        Status: "Permanent",
        "Well-Known URI Support": "-",
        Reference: "[RFC8089]",
        Notes: "",
        schema: "file"
      },
      {
        "URI Scheme": "filesystem",
        Template: "historic/filesystem",
        Description: "filesystem",
        Status: "Historical",
        "Well-Known URI Support": "-",
        Reference: "[W3C_WebApps_Working_Group][Chris_Rebert]",
        Notes: "",
        schema: "filesystem"
      },
      {
        "URI Scheme": "finger",
        Template: "prov/finger",
        Description: "finger",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[Dave_Thaler]",
        Notes: "",
        schema: "finger"
      },
      {
        "URI Scheme": "first-run-pen-experience",
        Template: "prov/first-run-pen-experience",
        Description: "first-run-pen-experience",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[urischemeowners_at_microsoft.com]",
        Notes: "",
        schema: "first-run-pen-experience"
      },
      {
        "URI Scheme": "fish",
        Template: "prov/fish",
        Description: "fish",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[Dave_Thaler]",
        Notes: "",
        schema: "fish"
      },
      {
        "URI Scheme": "fm",
        Template: "prov/fm",
        Description: "fm",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[RadioDNS_Project]",
        Notes: "",
        schema: "fm"
      },
      {
        "URI Scheme": "ftp",
        Template: "",
        Description: "File Transfer Protocol",
        Status: "Permanent",
        "Well-Known URI Support": "-",
        Reference: "[RFC1738]",
        Notes: "",
        schema: "ftp"
      },
      {
        "URI Scheme": "fuchsia-pkg",
        Template: "prov/fuchsia-pkg",
        Description: "fuchsia-pkg",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[Adam_Barth][https://fuchsia.googlesource.com/fuchsia/]",
        Notes: "",
        schema: "fuchsia-pkg"
      },
      {
        "URI Scheme": "geo",
        Template: "",
        Description: "Geographic Locations",
        Status: "Permanent",
        "Well-Known URI Support": "-",
        Reference: "[RFC5870]",
        Notes: "",
        schema: "geo"
      },
      {
        "URI Scheme": "gg",
        Template: "prov/gg",
        Description: "gg",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[Dave_Thaler]",
        Notes: "",
        schema: "gg"
      },
      {
        "URI Scheme": "git",
        Template: "prov/git",
        Description: "git",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[Dave_Thaler]",
        Notes: "",
        schema: "git"
      },
      {
        "URI Scheme": "gizmoproject",
        Template: "prov/gizmoproject",
        Description: "gizmoproject",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[Dave_Thaler]",
        Notes: "",
        schema: "gizmoproject"
      },
      {
        "URI Scheme": "go",
        Template: "",
        Description: "go",
        Status: "Permanent",
        "Well-Known URI Support": "-",
        Reference: "[RFC3368]",
        Notes: "",
        schema: "go"
      },
      {
        "URI Scheme": "gopher",
        Template: "",
        Description: "The Gopher Protocol",
        Status: "Permanent",
        "Well-Known URI Support": "-",
        Reference: "[RFC4266]",
        Notes: "",
        schema: "gopher"
      },
      {
        "URI Scheme": "graph",
        Template: "prov/graph",
        Description: "graph",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[Alastair_Green]",
        Notes: "",
        schema: "graph"
      },
      {
        "URI Scheme": "gtalk",
        Template: "prov/gtalk",
        Description: "gtalk",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[Dave_Thaler]",
        Notes: "",
        schema: "gtalk"
      },
      {
        "URI Scheme": "h323",
        Template: "",
        Description: "H.323",
        Status: "Permanent",
        "Well-Known URI Support": "-",
        Reference: "[RFC3508]",
        Notes: "",
        schema: "h323"
      },
      {
        "URI Scheme": "ham",
        Template: "",
        Description: "ham",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[RFC7046]",
        Notes: "",
        schema: "ham"
      },
      {
        "URI Scheme": "hcap",
        Template: "prov/hcap",
        Description: "hcap",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[urischemeowners_at_microsoft.com]",
        Notes: "",
        schema: "hcap"
      },
      {
        "URI Scheme": "hcp",
        Template: "prov/hcp",
        Description: "hcp",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[Alexey_Melnikov]",
        Notes: "",
        schema: "hcp"
      },
      {
        "URI Scheme": "http",
        Template: "",
        Description: "Hypertext Transfer Protocol",
        Status: "Permanent",
        "Well-Known URI Support": "[RFC8615]",
        Reference: "[RFC-ietf-httpbis-semantics-19, Section 4.2.1]",
        Notes: "",
        schema: "http"
      },
      {
        "URI Scheme": "https",
        Template: "",
        Description: "Hypertext Transfer Protocol Secure",
        Status: "Permanent",
        "Well-Known URI Support": "[RFC8615]",
        Reference: "[RFC-ietf-httpbis-semantics-19, Section 4.2.2]",
        Notes: "",
        schema: "https"
      },
      {
        "URI Scheme": "hxxp",
        Template: "prov/hxxp",
        Description: "hxxp",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[draft-salgado-hxxp]",
        Notes: "",
        schema: "hxxp"
      },
      {
        "URI Scheme": "hxxps",
        Template: "prov/hxxps",
        Description: "hxxps",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[draft-salgado-hxxp]",
        Notes: "",
        schema: "hxxps"
      },
      {
        "URI Scheme": "hydrazone",
        Template: "prov/hydrazone",
        Description: "hydrazone",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[Matthias_Merkel][https://tech.hydrazone.pro/uri/specification/hydrazone.txt]",
        Notes: "",
        schema: "hydrazone"
      },
      {
        "URI Scheme": "hyper",
        Template: "prov/hyper",
        Description: "hyper",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[Fr\xE9d\xE9ric_Wang][Paul_Frazee]",
        Notes: "",
        schema: "hyper"
      },
      {
        "URI Scheme": "iax",
        Template: "",
        Description: "Inter-Asterisk eXchange Version 2",
        Status: "Permanent",
        "Well-Known URI Support": "-",
        Reference: "[RFC5456]",
        Notes: "",
        schema: "iax"
      },
      {
        "URI Scheme": "icap",
        Template: "",
        Description: "Internet Content Adaptation Protocol",
        Status: "Permanent",
        "Well-Known URI Support": "-",
        Reference: "[RFC3507]",
        Notes: "",
        schema: "icap"
      },
      {
        "URI Scheme": "icon",
        Template: "",
        Description: "icon",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[draft-lafayette-icon-uri-scheme]",
        Notes: "",
        schema: "icon"
      },
      {
        "URI Scheme": "im",
        Template: "",
        Description: "Instant Messaging",
        Status: "Permanent",
        "Well-Known URI Support": "-",
        Reference: "[RFC3860]",
        Notes: "",
        schema: "im"
      },
      {
        "URI Scheme": "imap",
        Template: "",
        Description: "internet message access protocol",
        Status: "Permanent",
        "Well-Known URI Support": "-",
        Reference: "[RFC5092]",
        Notes: "",
        schema: "imap"
      },
      {
        "URI Scheme": "info",
        Template: "",
        Description: 'Information Assets with Identifiers in Public Namespaces. [RFC4452] (section 3) defines an "info" registry of public namespaces, which is maintained by NISO and can be accessed from [http://info-uri.info/].',
        Status: "Permanent",
        "Well-Known URI Support": "-",
        Reference: "[RFC4452]",
        Notes: "",
        schema: "info"
      },
      {
        "URI Scheme": "iotdisco",
        Template: "prov/iotdisco",
        Description: "iotdisco",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[Peter_Waher][http://www.iana.org/assignments/uri-schemes/prov/iotdisco.pdf]",
        Notes: "",
        schema: "iotdisco"
      },
      {
        "URI Scheme": "ipfs",
        Template: "prov/ipfs",
        Description: "ipfs",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[Fr\xE9d\xE9ric_Wang][Protocol_Labs]",
        Notes: "",
        schema: "ipfs"
      },
      {
        "URI Scheme": "ipn",
        Template: "",
        Description: "ipn",
        Status: "Permanent",
        "Well-Known URI Support": "-",
        Reference: "[RFC-ietf-dtn-bpbis-31]",
        Notes: "",
        schema: "ipn"
      },
      {
        "URI Scheme": "ipns",
        Template: "prov/ipns",
        Description: "ipns",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[Fr\xE9d\xE9ric_Wang][Protocol_Labs]",
        Notes: "",
        schema: "ipns"
      },
      {
        "URI Scheme": "ipp",
        Template: "",
        Description: "Internet Printing Protocol",
        Status: "Permanent",
        "Well-Known URI Support": "-",
        Reference: "[RFC3510]",
        Notes: "",
        schema: "ipp"
      },
      {
        "URI Scheme": "ipps",
        Template: "",
        Description: "Internet Printing Protocol over HTTPS",
        Status: "Permanent",
        "Well-Known URI Support": "-",
        Reference: "[RFC7472]",
        Notes: "",
        schema: "ipps"
      },
      {
        "URI Scheme": "irc",
        Template: "prov/irc",
        Description: "irc",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[Dave_Thaler]",
        Notes: "",
        schema: "irc"
      },
      {
        "URI Scheme": "irc6",
        Template: "prov/irc6",
        Description: "irc6",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[Dave_Thaler]",
        Notes: "",
        schema: "irc6"
      },
      {
        "URI Scheme": "ircs",
        Template: "prov/ircs",
        Description: "ircs",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[Dave_Thaler]",
        Notes: "",
        schema: "ircs"
      },
      {
        "URI Scheme": "iris",
        Template: "",
        Description: "Internet Registry Information Service",
        Status: "Permanent",
        "Well-Known URI Support": "-",
        Reference: "[RFC3981]",
        Notes: "",
        schema: "iris"
      },
      {
        "URI Scheme": "iris.beep",
        Template: "",
        Description: "iris.beep",
        Status: "Permanent",
        "Well-Known URI Support": "-",
        Reference: "[RFC3983]",
        Notes: "",
        schema: "iris.beep"
      },
      {
        "URI Scheme": "iris.lwz",
        Template: "",
        Description: "iris.lwz",
        Status: "Permanent",
        "Well-Known URI Support": "-",
        Reference: "[RFC4993]",
        Notes: "",
        schema: "iris.lwz"
      },
      {
        "URI Scheme": "iris.xpc",
        Template: "",
        Description: "iris.xpc",
        Status: "Permanent",
        "Well-Known URI Support": "-",
        Reference: "[RFC4992]",
        Notes: "",
        schema: "iris.xpc"
      },
      {
        "URI Scheme": "iris.xpcs",
        Template: "",
        Description: "iris.xpcs",
        Status: "Permanent",
        "Well-Known URI Support": "-",
        Reference: "[RFC4992]",
        Notes: "",
        schema: "iris.xpcs"
      },
      {
        "URI Scheme": "isostore",
        Template: "prov/isostore",
        Description: "isostore",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[urischemeowners_at_microsoft.com]",
        Notes: "",
        schema: "isostore"
      },
      {
        "URI Scheme": "itms",
        Template: "prov/itms",
        Description: "itms",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[Dave_Thaler]",
        Notes: "",
        schema: "itms"
      },
      {
        "URI Scheme": "jabber",
        Template: "perm/jabber",
        Description: "jabber",
        Status: "Permanent",
        "Well-Known URI Support": "-",
        Reference: "[Peter_Saint-Andre]",
        Notes: "",
        schema: "jabber"
      },
      {
        "URI Scheme": "jar",
        Template: "prov/jar",
        Description: "jar",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[Dave_Thaler]",
        Notes: "",
        schema: "jar"
      },
      {
        "URI Scheme": "jms",
        Template: "",
        Description: "Java Message Service",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[RFC6167]",
        Notes: "",
        schema: "jms"
      },
      {
        "URI Scheme": "keyparc",
        Template: "prov/keyparc",
        Description: "keyparc",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[Dave_Thaler]",
        Notes: "",
        schema: "keyparc"
      },
      {
        "URI Scheme": "lastfm",
        Template: "prov/lastfm",
        Description: "lastfm",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[Dave_Thaler]",
        Notes: "",
        schema: "lastfm"
      },
      {
        "URI Scheme": "lbry",
        Template: "prov/lbry",
        Description: "lbry",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[Alex_Grintsvayg]",
        Notes: "",
        schema: "lbry"
      },
      {
        "URI Scheme": "ldap",
        Template: "",
        Description: "Lightweight Directory Access Protocol",
        Status: "Permanent",
        "Well-Known URI Support": "-",
        Reference: "[RFC4516]",
        Notes: "",
        schema: "ldap"
      },
      {
        "URI Scheme": "ldaps",
        Template: "prov/ldaps",
        Description: "ldaps",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[Dave_Thaler]",
        Notes: "",
        schema: "ldaps"
      },
      {
        "URI Scheme": "leaptofrogans",
        Template: "",
        Description: "leaptofrogans",
        Status: "Permanent",
        "Well-Known URI Support": "-",
        Reference: "[RFC8589]",
        Notes: "",
        schema: "leaptofrogans"
      },
      {
        "URI Scheme": "lorawan",
        Template: "prov/lorawan",
        Description: "lorawan",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[OMA-DMSE]",
        Notes: "",
        schema: "lorawan"
      },
      {
        "URI Scheme": "lvlt",
        Template: "prov/lvlt",
        Description: "lvlt",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[Alexander_Shishenko]",
        Notes: "",
        schema: "lvlt"
      },
      {
        "URI Scheme": "magnet",
        Template: "prov/magnet",
        Description: "magnet",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[Dave_Thaler]",
        Notes: "",
        schema: "magnet"
      },
      {
        "URI Scheme": "mailserver",
        Template: "",
        Description: "Access to data available from mail servers",
        Status: "Historical",
        "Well-Known URI Support": "-",
        Reference: "[RFC6196]",
        Notes: "",
        schema: "mailserver"
      },
      {
        "URI Scheme": "mailto",
        Template: "",
        Description: "Electronic mail address",
        Status: "Permanent",
        "Well-Known URI Support": "-",
        Reference: "[RFC6068]",
        Notes: "",
        schema: "mailto"
      },
      {
        "URI Scheme": "maps",
        Template: "prov/maps",
        Description: "maps",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[Dave_Thaler]",
        Notes: "",
        schema: "maps"
      },
      {
        "URI Scheme": "market",
        Template: "prov/market",
        Description: "market",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[Dave_Thaler]",
        Notes: "",
        schema: "market"
      },
      {
        "URI Scheme": "matrix",
        Template: "prov/matrix",
        Description: "matrix",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[Hubert_Chathi]",
        Notes: "",
        schema: "matrix"
      },
      {
        "URI Scheme": "message",
        Template: "prov/message",
        Description: "message",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[Dave_Thaler]",
        Notes: "",
        schema: "message"
      },
      {
        "URI Scheme": "microsoft.windows.camera",
        Template: "prov/microsoft.windows.camera",
        Description: "microsoft.windows.camera",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[urischemeowners_at_microsoft.com]",
        Notes: "",
        schema: "microsoft.windows.camera"
      },
      {
        "URI Scheme": "microsoft.windows.camera.multipicker",
        Template: "prov/microsoft.windows.camera.multipicker",
        Description: "microsoft.windows.camera.multipicker",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[urischemeowners_at_microsoft.com]",
        Notes: "",
        schema: "microsoft.windows.camera.multipicker"
      },
      {
        "URI Scheme": "microsoft.windows.camera.picker",
        Template: "prov/microsoft.windows.camera.picker",
        Description: "microsoft.windows.camera.picker",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[urischemeowners_at_microsoft.com]",
        Notes: "",
        schema: "microsoft.windows.camera.picker"
      },
      {
        "URI Scheme": "mid",
        Template: "",
        Description: "message identifier",
        Status: "Permanent",
        "Well-Known URI Support": "-",
        Reference: "[RFC2392]",
        Notes: "",
        schema: "mid"
      },
      {
        "URI Scheme": "mms",
        Template: "prov/mms",
        Description: "mms",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[Alexey_Melnikov]",
        Notes: "",
        schema: "mms"
      },
      {
        "URI Scheme": "modem",
        Template: "",
        Description: "modem",
        Status: "Historical",
        "Well-Known URI Support": "-",
        Reference: "[RFC2806][RFC3966]",
        Notes: "",
        schema: "modem"
      },
      {
        "URI Scheme": "mongodb",
        Template: "prov/mongodb",
        Description: "mongodb",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[Ignacio_Losiggio][Mongo_DB_Inc]",
        Notes: "",
        schema: "mongodb"
      },
      {
        "URI Scheme": "moz",
        Template: "prov/moz",
        Description: "moz",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[Joe_Hildebrand]",
        Notes: "",
        schema: "moz"
      },
      {
        "URI Scheme": "ms-access",
        Template: "prov/ms-access",
        Description: "ms-access",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[urischemeowners_at_microsoft.com]",
        Notes: "",
        schema: "ms-access"
      },
      {
        "URI Scheme": "ms-browser-extension",
        Template: "prov/ms-browser-extension",
        Description: "ms-browser-extension",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[urischemeowners_at_microsoft.com]",
        Notes: "",
        schema: "ms-browser-extension"
      },
      {
        "URI Scheme": "ms-calculator",
        Template: "prov/ms-calculator",
        Description: "ms-calculator",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[urischemeowners_at_microsoft.com]",
        Notes: "",
        schema: "ms-calculator"
      },
      {
        "URI Scheme": "ms-drive-to",
        Template: "prov/ms-drive-to",
        Description: "ms-drive-to",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[urischemeowners_at_microsoft.com]",
        Notes: "",
        schema: "ms-drive-to"
      },
      {
        "URI Scheme": "ms-enrollment",
        Template: "prov/ms-enrollment",
        Description: "ms-enrollment",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[urischemeowners_at_microsoft.com]",
        Notes: "",
        schema: "ms-enrollment"
      },
      {
        "URI Scheme": "ms-excel",
        Template: "prov/ms-excel",
        Description: "ms-excel",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[urischemeowners_at_microsoft.com]",
        Notes: "",
        schema: "ms-excel"
      },
      {
        "URI Scheme": "ms-eyecontrolspeech",
        Template: "prov/ms-eyecontrolspeech",
        Description: "ms-eyecontrolspeech",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[urischemeowners_at_microsoft.com]",
        Notes: "",
        schema: "ms-eyecontrolspeech"
      },
      {
        "URI Scheme": "ms-gamebarservices",
        Template: "prov/ms-gamebarservices",
        Description: "ms-gamebarservices",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[urischemeowners_at_microsoft.com]",
        Notes: "",
        schema: "ms-gamebarservices"
      },
      {
        "URI Scheme": "ms-gamingoverlay",
        Template: "prov/ms-gamingoverlay",
        Description: "ms-gamingoverlay",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[urischemeowners_at_microsoft.com]",
        Notes: "",
        schema: "ms-gamingoverlay"
      },
      {
        "URI Scheme": "ms-getoffice",
        Template: "prov/ms-getoffice",
        Description: "ms-getoffice",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[urischemeowners_at_microsoft.com]",
        Notes: "",
        schema: "ms-getoffice"
      },
      {
        "URI Scheme": "ms-help",
        Template: "prov/ms-help",
        Description: "ms-help",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[Alexey_Melnikov]",
        Notes: "",
        schema: "ms-help"
      },
      {
        "URI Scheme": "ms-infopath",
        Template: "prov/ms-infopath",
        Description: "ms-infopath",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[urischemeowners_at_microsoft.com]",
        Notes: "",
        schema: "ms-infopath"
      },
      {
        "URI Scheme": "ms-inputapp",
        Template: "prov/ms-inputapp",
        Description: "ms-inputapp",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[urischemeowners_at_microsoft.com]",
        Notes: "",
        schema: "ms-inputapp"
      },
      {
        "URI Scheme": "ms-lockscreencomponent-config",
        Template: "prov/ms-lockscreencomponent-config",
        Description: "ms-lockscreencomponent-config",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[urischemeowners_at_microsoft.com]",
        Notes: "",
        schema: "ms-lockscreencomponent-config"
      },
      {
        "URI Scheme": "ms-media-stream-id",
        Template: "prov/ms-media-stream-id",
        Description: "ms-media-stream-id",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[urischemeowners_at_microsoft.com]",
        Notes: "",
        schema: "ms-media-stream-id"
      },
      {
        "URI Scheme": "ms-meetnow",
        Template: "prov/ms-meetnow",
        Description: "ms-meetnow",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[urischemeowners_at_microsoft.com]",
        Notes: "",
        schema: "ms-meetnow"
      },
      {
        "URI Scheme": "ms-mixedrealitycapture",
        Template: "prov/ms-mixedrealitycapture",
        Description: "ms-mixedrealitycapture",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[urischemeowners_at_microsoft.com]",
        Notes: "",
        schema: "ms-mixedrealitycapture"
      },
      {
        "URI Scheme": "ms-mobileplans",
        Template: "prov/ms-mobileplans",
        Description: "ms-mobileplans",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[urischemeowners_at_microsoft.com]",
        Notes: "",
        schema: "ms-mobileplans"
      },
      {
        "URI Scheme": "ms-officeapp",
        Template: "prov/ms-officeapp",
        Description: "ms-officeapp",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[urischemeowners_at_microsoft.com]",
        Notes: "",
        schema: "ms-officeapp"
      },
      {
        "URI Scheme": "ms-people",
        Template: "prov/ms-people",
        Description: "ms-people",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[urischemeowners_at_microsoft.com]",
        Notes: "",
        schema: "ms-people"
      },
      {
        "URI Scheme": "ms-project",
        Template: "prov/ms-project",
        Description: "ms-project",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[urischemeowners_at_microsoft.com]",
        Notes: "",
        schema: "ms-project"
      },
      {
        "URI Scheme": "ms-powerpoint",
        Template: "prov/ms-powerpoint",
        Description: "ms-powerpoint",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[urischemeowners_at_microsoft.com]",
        Notes: "",
        schema: "ms-powerpoint"
      },
      {
        "URI Scheme": "ms-publisher",
        Template: "prov/ms-publisher",
        Description: "ms-publisher",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[urischemeowners_at_microsoft.com]",
        Notes: "",
        schema: "ms-publisher"
      },
      {
        "URI Scheme": "ms-restoretabcompanion",
        Template: "prov/ms-restoretabcompanion",
        Description: "ms-restoretabcompanion",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[urischemeowners_at_microsoft.com]",
        Notes: "",
        schema: "ms-restoretabcompanion"
      },
      {
        "URI Scheme": "ms-screenclip",
        Template: "prov/ms-screenclip",
        Description: "ms-screenclip",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[urischemeowners_at_microsoft.com]",
        Notes: "",
        schema: "ms-screenclip"
      },
      {
        "URI Scheme": "ms-screensketch",
        Template: "prov/ms-screensketch",
        Description: "ms-screensketch",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[urischemeowners_at_microsoft.com]",
        Notes: "",
        schema: "ms-screensketch"
      },
      {
        "URI Scheme": "ms-search",
        Template: "prov/ms-search",
        Description: "ms-search",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[urischemeowners_at_microsoft.com]",
        Notes: "",
        schema: "ms-search"
      },
      {
        "URI Scheme": "ms-search-repair",
        Template: "prov/ms-search-repair",
        Description: "ms-search-repair",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[urischemeowners_at_microsoft.com]",
        Notes: "",
        schema: "ms-search-repair"
      },
      {
        "URI Scheme": "ms-secondary-screen-controller",
        Template: "prov/ms-secondary-screen-controller",
        Description: "ms-secondary-screen-controller",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[urischemeowners_at_microsoft.com]",
        Notes: "",
        schema: "ms-secondary-screen-controller"
      },
      {
        "URI Scheme": "ms-secondary-screen-setup",
        Template: "prov/ms-secondary-screen-setup",
        Description: "ms-secondary-screen-setup",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[urischemeowners_at_microsoft.com]",
        Notes: "",
        schema: "ms-secondary-screen-setup"
      },
      {
        "URI Scheme": "ms-settings",
        Template: "prov/ms-settings",
        Description: "ms-settings",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[urischemeowners_at_microsoft.com]",
        Notes: "",
        schema: "ms-settings"
      },
      {
        "URI Scheme": "ms-settings-airplanemode",
        Template: "prov/ms-settings-airplanemode",
        Description: "ms-settings-airplanemode",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[urischemeowners_at_microsoft.com]",
        Notes: "",
        schema: "ms-settings-airplanemode"
      },
      {
        "URI Scheme": "ms-settings-bluetooth",
        Template: "prov/ms-settings-bluetooth",
        Description: "ms-settings-bluetooth",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[urischemeowners_at_microsoft.com]",
        Notes: "",
        schema: "ms-settings-bluetooth"
      },
      {
        "URI Scheme": "ms-settings-camera",
        Template: "prov/ms-settings-camera",
        Description: "ms-settings-camera",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[urischemeowners_at_microsoft.com]",
        Notes: "",
        schema: "ms-settings-camera"
      },
      {
        "URI Scheme": "ms-settings-cellular",
        Template: "prov/ms-settings-cellular",
        Description: "ms-settings-cellular",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[urischemeowners_at_microsoft.com]",
        Notes: "",
        schema: "ms-settings-cellular"
      },
      {
        "URI Scheme": "ms-settings-cloudstorage",
        Template: "prov/ms-settings-cloudstorage",
        Description: "ms-settings-cloudstorage",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[urischemeowners_at_microsoft.com]",
        Notes: "",
        schema: "ms-settings-cloudstorage"
      },
      {
        "URI Scheme": "ms-settings-connectabledevices",
        Template: "prov/ms-settings-connectabledevices",
        Description: "ms-settings-connectabledevices",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[urischemeowners_at_microsoft.com]",
        Notes: "",
        schema: "ms-settings-connectabledevices"
      },
      {
        "URI Scheme": "ms-settings-displays-topology",
        Template: "prov/ms-settings-displays-topology",
        Description: "ms-settings-displays-topology",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[urischemeowners_at_microsoft.com]",
        Notes: "",
        schema: "ms-settings-displays-topology"
      },
      {
        "URI Scheme": "ms-settings-emailandaccounts",
        Template: "prov/ms-settings-emailandaccounts",
        Description: "ms-settings-emailandaccounts",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[urischemeowners_at_microsoft.com]",
        Notes: "",
        schema: "ms-settings-emailandaccounts"
      },
      {
        "URI Scheme": "ms-settings-language",
        Template: "prov/ms-settings-language",
        Description: "ms-settings-language",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[urischemeowners_at_microsoft.com]",
        Notes: "",
        schema: "ms-settings-language"
      },
      {
        "URI Scheme": "ms-settings-location",
        Template: "prov/ms-settings-location",
        Description: "ms-settings-location",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[urischemeowners_at_microsoft.com]",
        Notes: "",
        schema: "ms-settings-location"
      },
      {
        "URI Scheme": "ms-settings-lock",
        Template: "prov/ms-settings-lock",
        Description: "ms-settings-lock",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[urischemeowners_at_microsoft.com]",
        Notes: "",
        schema: "ms-settings-lock"
      },
      {
        "URI Scheme": "ms-settings-nfctransactions",
        Template: "prov/ms-settings-nfctransactions",
        Description: "ms-settings-nfctransactions",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[urischemeowners_at_microsoft.com]",
        Notes: "",
        schema: "ms-settings-nfctransactions"
      },
      {
        "URI Scheme": "ms-settings-notifications",
        Template: "prov/ms-settings-notifications",
        Description: "ms-settings-notifications",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[urischemeowners_at_microsoft.com]",
        Notes: "",
        schema: "ms-settings-notifications"
      },
      {
        "URI Scheme": "ms-settings-power",
        Template: "prov/ms-settings-power",
        Description: "ms-settings-power",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[urischemeowners_at_microsoft.com]",
        Notes: "",
        schema: "ms-settings-power"
      },
      {
        "URI Scheme": "ms-settings-privacy",
        Template: "prov/ms-settings-privacy",
        Description: "ms-settings-privacy",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[urischemeowners_at_microsoft.com]",
        Notes: "",
        schema: "ms-settings-privacy"
      },
      {
        "URI Scheme": "ms-settings-proximity",
        Template: "prov/ms-settings-proximity",
        Description: "ms-settings-proximity",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[urischemeowners_at_microsoft.com]",
        Notes: "",
        schema: "ms-settings-proximity"
      },
      {
        "URI Scheme": "ms-settings-screenrotation",
        Template: "prov/ms-settings-screenrotation",
        Description: "ms-settings-screenrotation",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[urischemeowners_at_microsoft.com]",
        Notes: "",
        schema: "ms-settings-screenrotation"
      },
      {
        "URI Scheme": "ms-settings-wifi",
        Template: "prov/ms-settings-wifi",
        Description: "ms-settings-wifi",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[urischemeowners_at_microsoft.com]",
        Notes: "",
        schema: "ms-settings-wifi"
      },
      {
        "URI Scheme": "ms-settings-workplace",
        Template: "prov/ms-settings-workplace",
        Description: "ms-settings-workplace",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[urischemeowners_at_microsoft.com]",
        Notes: "",
        schema: "ms-settings-workplace"
      },
      {
        "URI Scheme": "ms-spd",
        Template: "prov/ms-spd",
        Description: "ms-spd",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[urischemeowners_at_microsoft.com]",
        Notes: "",
        schema: "ms-spd"
      },
      {
        "URI Scheme": "ms-sttoverlay",
        Template: "prov/ms-sttoverlay",
        Description: "ms-sttoverlay",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[urischemeowners_at_microsoft.com]",
        Notes: "",
        schema: "ms-sttoverlay"
      },
      {
        "URI Scheme": "ms-transit-to",
        Template: "prov/ms-transit-to",
        Description: "ms-transit-to",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[urischemeowners_at_microsoft.com]",
        Notes: "",
        schema: "ms-transit-to"
      },
      {
        "URI Scheme": "ms-useractivityset",
        Template: "prov/ms-useractivityset",
        Description: "ms-useractivityset",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[urischemeowners_at_microsoft.com]",
        Notes: "",
        schema: "ms-useractivityset"
      },
      {
        "URI Scheme": "ms-virtualtouchpad",
        Template: "prov/ms-virtualtouchpad",
        Description: "ms-virtualtouchpad",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[urischemeowners_at_microsoft.com]",
        Notes: "",
        schema: "ms-virtualtouchpad"
      },
      {
        "URI Scheme": "ms-visio",
        Template: "prov/ms-visio",
        Description: "ms-visio",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[urischemeowners_at_microsoft.com]",
        Notes: "",
        schema: "ms-visio"
      },
      {
        "URI Scheme": "ms-walk-to",
        Template: "prov/ms-walk-to",
        Description: "ms-walk-to",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[urischemeowners_at_microsoft.com]",
        Notes: "",
        schema: "ms-walk-to"
      },
      {
        "URI Scheme": "ms-whiteboard",
        Template: "prov/ms-whiteboard",
        Description: "ms-whiteboard",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[urischemeowners_at_microsoft.com]",
        Notes: "",
        schema: "ms-whiteboard"
      },
      {
        "URI Scheme": "ms-whiteboard-cmd",
        Template: "prov/ms-whiteboard-cmd",
        Description: "ms-whiteboard-cmd",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[urischemeowners_at_microsoft.com]",
        Notes: "",
        schema: "ms-whiteboard-cmd"
      },
      {
        "URI Scheme": "ms-word",
        Template: "prov/ms-word",
        Description: "ms-word",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[urischemeowners_at_microsoft.com]",
        Notes: "",
        schema: "ms-word"
      },
      {
        "URI Scheme": "msnim",
        Template: "prov/msnim",
        Description: "msnim",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[Alexey_Melnikov]",
        Notes: "",
        schema: "msnim"
      },
      {
        "URI Scheme": "msrp",
        Template: "",
        Description: "Message Session Relay Protocol",
        Status: "Permanent",
        "Well-Known URI Support": "-",
        Reference: "[RFC4975]",
        Notes: "",
        schema: "msrp"
      },
      {
        "URI Scheme": "msrps",
        Template: "",
        Description: "Message Session Relay Protocol Secure",
        Status: "Permanent",
        "Well-Known URI Support": "-",
        Reference: "[RFC4975][RFC8873]",
        Notes: "",
        schema: "msrps"
      },
      {
        "URI Scheme": "mss",
        Template: "prov/mss",
        Description: "mss",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[Jarmo_Miettinen]",
        Notes: "",
        schema: "mss"
      },
      {
        "URI Scheme": "mt",
        Template: "prov/mt",
        Description: "Matter protocol",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[Connectivity_Standards_Alliance]",
        Notes: "",
        schema: "mt"
      },
      {
        "URI Scheme": "mtqp",
        Template: "",
        Description: "Message Tracking Query Protocol",
        Status: "Permanent",
        "Well-Known URI Support": "-",
        Reference: "[RFC3887]",
        Notes: "",
        schema: "mtqp"
      },
      {
        "URI Scheme": "mumble",
        Template: "prov/mumble",
        Description: "mumble",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[Dave_Thaler]",
        Notes: "",
        schema: "mumble"
      },
      {
        "URI Scheme": "mupdate",
        Template: "",
        Description: "Mailbox Update (MUPDATE) Protocol",
        Status: "Permanent",
        "Well-Known URI Support": "-",
        Reference: "[RFC3656]",
        Notes: "",
        schema: "mupdate"
      },
      {
        "URI Scheme": "mvn",
        Template: "prov/mvn",
        Description: "mvn",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[Dave_Thaler]",
        Notes: "",
        schema: "mvn"
      },
      {
        "URI Scheme": "news",
        Template: "",
        Description: "USENET news",
        Status: "Permanent",
        "Well-Known URI Support": "-",
        Reference: "[RFC5538]",
        Notes: "",
        schema: "news"
      },
      {
        "URI Scheme": "nfs",
        Template: "",
        Description: "network file system protocol",
        Status: "Permanent",
        "Well-Known URI Support": "-",
        Reference: "[RFC2224]",
        Notes: "",
        schema: "nfs"
      },
      {
        "URI Scheme": "ni",
        Template: "",
        Description: "ni",
        Status: "Permanent",
        "Well-Known URI Support": "-",
        Reference: "[RFC6920]",
        Notes: "",
        schema: "ni"
      },
      {
        "URI Scheme": "nih",
        Template: "",
        Description: "nih",
        Status: "Permanent",
        "Well-Known URI Support": "-",
        Reference: "[RFC6920]",
        Notes: "",
        schema: "nih"
      },
      {
        "URI Scheme": "nntp",
        Template: "",
        Description: "USENET news using NNTP access",
        Status: "Permanent",
        "Well-Known URI Support": "-",
        Reference: "[RFC5538]",
        Notes: "",
        schema: "nntp"
      },
      {
        "URI Scheme": "notes",
        Template: "prov/notes",
        Description: "notes",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[Doug_Conmy]",
        Notes: "",
        schema: "notes"
      },
      {
        "URI Scheme": "num",
        Template: "prov/num",
        Description: "Namespace Utility Modules",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[Elliott_Brown][https://www.numprotocol.com/specification]",
        Notes: "",
        schema: "num"
      },
      {
        "URI Scheme": "ocf",
        Template: "prov/ocf",
        Description: "ocf",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[Dave_Thaler]",
        Notes: "",
        schema: "ocf"
      },
      {
        "URI Scheme": "oid",
        Template: "prov/oid",
        Description: "oid",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[draft-larmouth-oid-iri]",
        Notes: "",
        schema: "oid"
      },
      {
        "URI Scheme": "onenote",
        Template: "prov/onenote",
        Description: "onenote",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[urischemeowners_at_microsoft.com]",
        Notes: "",
        schema: "onenote"
      },
      {
        "URI Scheme": "onenote-cmd",
        Template: "prov/onenote-cmd",
        Description: "onenote-cmd",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[urischemeowners_at_microsoft.com]",
        Notes: "",
        schema: "onenote-cmd"
      },
      {
        "URI Scheme": "opaquelocktoken",
        Template: "",
        Description: "opaquelocktokent",
        Status: "Permanent",
        "Well-Known URI Support": "-",
        Reference: "[RFC4918]",
        Notes: "",
        schema: "opaquelocktoken"
      },
      {
        "URI Scheme": "openpgp4fpr",
        Template: "prov/openpgp4fpr",
        Description: "openpgp4fpr",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[Wiktor_Kwapisiewicz]",
        Notes: "",
        schema: "openpgp4fpr"
      },
      {
        "URI Scheme": "otpauth",
        Template: "prov/otpauth",
        Description: "otpauth",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[Fr\xE9d\xE9ric_Wang][Thomas_Habets]",
        Notes: "",
        schema: "otpauth"
      },
      {
        "URI Scheme": "pack",
        Template: "historic/pack",
        Description: "pack",
        Status: "Historical",
        "Well-Known URI Support": "-",
        Reference: "[draft-shur-pack-uri-scheme]",
        Notes: "",
        schema: "pack"
      },
      {
        "URI Scheme": "palm",
        Template: "prov/palm",
        Description: "palm",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[Dave_Thaler]",
        Notes: "",
        schema: "palm"
      },
      {
        "URI Scheme": "paparazzi",
        Template: "prov/paparazzi",
        Description: "paparazzi",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[Dave_Thaler]",
        Notes: "",
        schema: "paparazzi"
      },
      {
        "URI Scheme": "payment",
        Template: "prov/payment",
        Description: "payment",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[Arild_Hegvik][https://bitcoincheque.org]",
        Notes: "",
        schema: "payment"
      },
      {
        "URI Scheme": "payto",
        Template: "prov/payto",
        Description: "payto",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[RFC8905]",
        Notes: "",
        schema: "payto"
      },
      {
        "URI Scheme": "pkcs11",
        Template: "",
        Description: "PKCS#11",
        Status: "Permanent",
        "Well-Known URI Support": "-",
        Reference: "[RFC7512]",
        Notes: "",
        schema: "pkcs11"
      },
      {
        "URI Scheme": "platform",
        Template: "prov/platform",
        Description: "platform",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[Dave_Thaler]",
        Notes: "",
        schema: "platform"
      },
      {
        "URI Scheme": "pop",
        Template: "",
        Description: "Post Office Protocol v3",
        Status: "Permanent",
        "Well-Known URI Support": "-",
        Reference: "[RFC2384]",
        Notes: "",
        schema: "pop"
      },
      {
        "URI Scheme": "pres",
        Template: "",
        Description: "Presence",
        Status: "Permanent",
        "Well-Known URI Support": "-",
        Reference: "[RFC3859]",
        Notes: "",
        schema: "pres"
      },
      {
        "URI Scheme": "prospero",
        Template: "",
        Description: "Prospero Directory Service",
        Status: "Historical",
        "Well-Known URI Support": "-",
        Reference: "[RFC4157]",
        Notes: "",
        schema: "prospero"
      },
      {
        "URI Scheme": "proxy",
        Template: "prov/proxy",
        Description: "proxy",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[Dave_Thaler]",
        Notes: "",
        schema: "proxy"
      },
      {
        "URI Scheme": "pwid",
        Template: "prov/pwid",
        Description: "pwid",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[Eld_Zierau]",
        Notes: "",
        schema: "pwid"
      },
      {
        "URI Scheme": "psyc",
        Template: "prov/psyc",
        Description: "psyc",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[Dave_Thaler]",
        Notes: "",
        schema: "psyc"
      },
      {
        "URI Scheme": "pttp",
        Template: "prov/pttp",
        Description: "pttp",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[Tony_Deng][Tuan_Hoang][Bob_Hinkle][Mark_Chen]",
        Notes: "",
        schema: "pttp"
      },
      {
        "URI Scheme": "qb",
        Template: "prov/qb",
        Description: "qb",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[Jan_Pokorny]",
        Notes: "",
        schema: "qb"
      },
      {
        "URI Scheme": "query",
        Template: "prov/query",
        Description: "query",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[Dave_Thaler]",
        Notes: "",
        schema: "query"
      },
      {
        "URI Scheme": "quic-transport",
        Template: "prov/quic-transport",
        Description: "quic-transport",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[draft-vvv-webtransport-quic]",
        Notes: "",
        schema: "quic-transport"
      },
      {
        "URI Scheme": "redis",
        Template: "prov/redis",
        Description: "redis",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[Chris_Rebert]",
        Notes: "",
        schema: "redis"
      },
      {
        "URI Scheme": "rediss",
        Template: "prov/rediss",
        Description: "rediss",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[Chris_Rebert]",
        Notes: "",
        schema: "rediss"
      },
      {
        "URI Scheme": "reload",
        Template: "",
        Description: "reload",
        Status: "Permanent",
        "Well-Known URI Support": "-",
        Reference: "[RFC6940]",
        Notes: "",
        schema: "reload"
      },
      {
        "URI Scheme": "res",
        Template: "prov/res",
        Description: "res",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[Alexey_Melnikov]",
        Notes: "",
        schema: "res"
      },
      {
        "URI Scheme": "resource",
        Template: "prov/resource",
        Description: "resource",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[Dave_Thaler]",
        Notes: "",
        schema: "resource"
      },
      {
        "URI Scheme": "rmi",
        Template: "prov/rmi",
        Description: "rmi",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[Dave_Thaler]",
        Notes: "",
        schema: "rmi"
      },
      {
        "URI Scheme": "rsync",
        Template: "",
        Description: "rsync",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[RFC5781]",
        Notes: "",
        schema: "rsync"
      },
      {
        "URI Scheme": "rtmfp",
        Template: "prov/rtmfp",
        Description: "rtmfp",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[RFC7425]",
        Notes: "",
        schema: "rtmfp"
      },
      {
        "URI Scheme": "rtmp",
        Template: "prov/rtmp",
        Description: "rtmp",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[Dave_Thaler]",
        Notes: "",
        schema: "rtmp"
      },
      {
        "URI Scheme": "rtsp",
        Template: "",
        Description: "Real-Time Streaming Protocol (RTSP)",
        Status: "Permanent",
        "Well-Known URI Support": "-",
        Reference: "[RFC2326][RFC7826]",
        Notes: "",
        schema: "rtsp"
      },
      {
        "URI Scheme": "rtsps",
        Template: "",
        Description: "Real-Time Streaming Protocol (RTSP) over TLS",
        Status: "Permanent",
        "Well-Known URI Support": "-",
        Reference: "[RFC2326][RFC7826]",
        Notes: "",
        schema: "rtsps"
      },
      {
        "URI Scheme": "rtspu",
        Template: "",
        Description: "Real-Time Streaming Protocol (RTSP) over unreliable datagram transport",
        Status: "Permanent",
        "Well-Known URI Support": "-",
        Reference: "[RFC2326]",
        Notes: "",
        schema: "rtspu"
      },
      {
        "URI Scheme": "sarif",
        Template: "prov/sarif",
        Description: "sarif",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[OASIS_Open][Michael_C_Fanning][David_Keaton]",
        Notes: "",
        schema: "sarif"
      },
      {
        "URI Scheme": "secondlife",
        Template: "prov/secondlife",
        Description: "query",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[Dave_Thaler]",
        Notes: "",
        schema: "secondlife"
      },
      {
        "URI Scheme": "secret-token",
        Template: "prov/secret-token",
        Description: "secret-token",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[RFC8959]",
        Notes: "",
        schema: "secret-token"
      },
      {
        "URI Scheme": "service",
        Template: "",
        Description: "service location",
        Status: "Permanent",
        "Well-Known URI Support": "-",
        Reference: "[RFC2609]",
        Notes: "",
        schema: "service"
      },
      {
        "URI Scheme": "session",
        Template: "",
        Description: "session",
        Status: "Permanent",
        "Well-Known URI Support": "-",
        Reference: "[RFC6787]",
        Notes: "",
        schema: "session"
      },
      {
        "URI Scheme": "sftp",
        Template: "prov/sftp",
        Description: "query",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[Dave_Thaler]",
        Notes: "",
        schema: "sftp"
      },
      {
        "URI Scheme": "sgn",
        Template: "prov/sgn",
        Description: "sgn",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[Dave_Thaler]",
        Notes: "",
        schema: "sgn"
      },
      {
        "URI Scheme": "shc",
        Template: "prov/shc",
        Description: "shc",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[Josh_Mandel]",
        Notes: "",
        schema: "shc"
      },
      {
        "URI Scheme": "shttp (OBSOLETE)",
        Template: "",
        Description: "Secure Hypertext Transfer Protocol",
        Status: "Permanent",
        "Well-Known URI Support": "-",
        Reference: "[RFC2660][status-change-http-experiments-to-historic]",
        Notes: "",
        schema: "shttp (OBSOLETE)"
      },
      {
        "URI Scheme": "sieve",
        Template: "",
        Description: "ManageSieve Protocol",
        Status: "Permanent",
        "Well-Known URI Support": "-",
        Reference: "[RFC5804]",
        Notes: "",
        schema: "sieve"
      },
      {
        "URI Scheme": "simpleledger",
        Template: "prov/simpleledger",
        Description: "simpleledger",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[James_Cramer]",
        Notes: "",
        schema: "simpleledger"
      },
      {
        "URI Scheme": "simplex",
        Template: "prov/simplex",
        Description: "simplex",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[Evgeny_Poberezkin]",
        Notes: "",
        schema: "simplex"
      },
      {
        "URI Scheme": "sip",
        Template: "",
        Description: "session initiation protocol",
        Status: "Permanent",
        "Well-Known URI Support": "-",
        Reference: "[RFC3261]",
        Notes: "",
        schema: "sip"
      },
      {
        "URI Scheme": "sips",
        Template: "",
        Description: "secure session initiation protocol",
        Status: "Permanent",
        "Well-Known URI Support": "-",
        Reference: "[RFC3261]",
        Notes: "",
        schema: "sips"
      },
      {
        "URI Scheme": "skype",
        Template: "prov/skype",
        Description: "skype",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[Alexey_Melnikov]",
        Notes: "",
        schema: "skype"
      },
      {
        "URI Scheme": "smb",
        Template: "prov/smb",
        Description: "smb",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[Dave_Thaler]",
        Notes: "",
        schema: "smb"
      },
      {
        "URI Scheme": "smp",
        Template: "prov/smp",
        Description: "smp",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[Evgeny_Poberezkin]",
        Notes: "",
        schema: "smp"
      },
      {
        "URI Scheme": "sms",
        Template: "",
        Description: "Short Message Service",
        Status: "Permanent",
        "Well-Known URI Support": "-",
        Reference: "[RFC5724]",
        Notes: "",
        schema: "sms"
      },
      {
        "URI Scheme": "smtp",
        Template: "prov/smtp",
        Description: "smtp",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[draft-melnikov-smime-msa-to-mda]",
        Notes: "",
        schema: "smtp"
      },
      {
        "URI Scheme": "snews",
        Template: "",
        Description: "NNTP over SSL/TLS",
        Status: "Historical",
        "Well-Known URI Support": "-",
        Reference: "[RFC5538]",
        Notes: "",
        schema: "snews"
      },
      {
        "URI Scheme": "snmp",
        Template: "",
        Description: "Simple Network Management Protocol",
        Status: "Permanent",
        "Well-Known URI Support": "-",
        Reference: "[RFC4088]",
        Notes: "",
        schema: "snmp"
      },
      {
        "URI Scheme": "soap.beep",
        Template: "",
        Description: "soap.beep",
        Status: "Permanent",
        "Well-Known URI Support": "-",
        Reference: "[RFC4227]",
        Notes: "",
        schema: "soap.beep"
      },
      {
        "URI Scheme": "soap.beeps",
        Template: "",
        Description: "soap.beeps",
        Status: "Permanent",
        "Well-Known URI Support": "-",
        Reference: "[RFC4227]",
        Notes: "",
        schema: "soap.beeps"
      },
      {
        "URI Scheme": "soldat",
        Template: "prov/soldat",
        Description: "soldat",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[Dave_Thaler]",
        Notes: "",
        schema: "soldat"
      },
      {
        "URI Scheme": "spiffe",
        Template: "prov/spiffe",
        Description: "spiffe",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[Evan_Gilman]",
        Notes: "",
        schema: "spiffe"
      },
      {
        "URI Scheme": "spotify",
        Template: "prov/spotify",
        Description: "spotify",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[Dave_Thaler]",
        Notes: "",
        schema: "spotify"
      },
      {
        "URI Scheme": "ssb",
        Template: "prov/ssb",
        Description: "ssb",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[Fr\xE9d\xE9ric_Wang][Secure_Scuttlebutt_Consortium]",
        Notes: "",
        schema: "ssb"
      },
      {
        "URI Scheme": "ssh",
        Template: "prov/ssh",
        Description: "ssh",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[Dave_Thaler]",
        Notes: "",
        schema: "ssh"
      },
      {
        "URI Scheme": "steam",
        Template: "prov/steam",
        Description: "steam",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[Dave_Thaler]",
        Notes: "",
        schema: "steam"
      },
      {
        "URI Scheme": "stun",
        Template: "",
        Description: "stun",
        Status: "Permanent",
        "Well-Known URI Support": "-",
        Reference: "[RFC7064]",
        Notes: "",
        schema: "stun"
      },
      {
        "URI Scheme": "stuns",
        Template: "",
        Description: "stuns",
        Status: "Permanent",
        "Well-Known URI Support": "-",
        Reference: "[RFC7064]",
        Notes: "",
        schema: "stuns"
      },
      {
        "URI Scheme": "submit",
        Template: "prov/submit",
        Description: "submit",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[draft-melnikov-smime-msa-to-mda]",
        Notes: "",
        schema: "submit"
      },
      {
        "URI Scheme": "svn",
        Template: "prov/svn",
        Description: "svn",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[Dave_Thaler]",
        Notes: "",
        schema: "svn"
      },
      {
        "URI Scheme": "swh",
        Template: "prov/swh",
        Description: "swh",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[Software_Heritage][Stefano_Zacchiroli]",
        Notes: "",
        schema: "swh"
      },
      {
        "URI Scheme": "swid",
        Template: "prov/swid",
        Description: "swid",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[draft-ietf-sacm-coswid-19]",
        Notes: "",
        schema: "swid"
      },
      {
        "URI Scheme": "swidpath",
        Template: "prov/swidpath",
        Description: "swidpath",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[draft-ietf-sacm-coswid-19]",
        Notes: "",
        schema: "swidpath"
      },
      {
        "URI Scheme": "tag",
        Template: "",
        Description: "tag",
        Status: "Permanent",
        "Well-Known URI Support": "-",
        Reference: "[RFC4151]",
        Notes: "",
        schema: "tag"
      },
      {
        "URI Scheme": "teamspeak",
        Template: "prov/teamspeak",
        Description: "teamspeak",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[Dave_Thaler]",
        Notes: "",
        schema: "teamspeak"
      },
      {
        "URI Scheme": "tel",
        Template: "",
        Description: "telephone",
        Status: "Permanent",
        "Well-Known URI Support": "-",
        Reference: "[RFC3966][RFC5341]",
        Notes: "",
        schema: "tel"
      },
      {
        "URI Scheme": "teliaeid",
        Template: "prov/teliaeid",
        Description: "teliaeid",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[Peter_Lewandowski]",
        Notes: "",
        schema: "teliaeid"
      },
      {
        "URI Scheme": "telnet",
        Template: "",
        Description: "Reference to interactive sessions",
        Status: "Permanent",
        "Well-Known URI Support": "-",
        Reference: "[RFC4248]",
        Notes: "",
        schema: "telnet"
      },
      {
        "URI Scheme": "tftp",
        Template: "",
        Description: "Trivial File Transfer Protocol",
        Status: "Permanent",
        "Well-Known URI Support": "-",
        Reference: "[RFC3617]",
        Notes: "",
        schema: "tftp"
      },
      {
        "URI Scheme": "things",
        Template: "prov/things",
        Description: "things",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[Dave_Thaler]",
        Notes: "",
        schema: "things"
      },
      {
        "URI Scheme": "thismessage",
        Template: "perm/thismessage",
        Description: "multipart/related relative reference resolution",
        Status: "Permanent",
        "Well-Known URI Support": "-",
        Reference: "[RFC2557]",
        Notes: "",
        schema: "thismessage"
      },
      {
        "URI Scheme": "tip",
        Template: "",
        Description: "Transaction Internet Protocol",
        Status: "Permanent",
        "Well-Known URI Support": "-",
        Reference: "[RFC2371]",
        Notes: "",
        schema: "tip"
      },
      {
        "URI Scheme": "tn3270",
        Template: "",
        Description: "Interactive 3270 emulation sessions",
        Status: "Permanent",
        "Well-Known URI Support": "-",
        Reference: "[RFC6270]",
        Notes: "",
        schema: "tn3270"
      },
      {
        "URI Scheme": "tool",
        Template: "prov/tool",
        Description: "tool",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[Matthias_Merkel]",
        Notes: "",
        schema: "tool"
      },
      {
        "URI Scheme": "turn",
        Template: "",
        Description: "turn",
        Status: "Permanent",
        "Well-Known URI Support": "-",
        Reference: "[RFC7065]",
        Notes: "",
        schema: "turn"
      },
      {
        "URI Scheme": "turns",
        Template: "",
        Description: "turns",
        Status: "Permanent",
        "Well-Known URI Support": "-",
        Reference: "[RFC7065]",
        Notes: "",
        schema: "turns"
      },
      {
        "URI Scheme": "tv",
        Template: "",
        Description: "TV Broadcasts",
        Status: "Permanent",
        "Well-Known URI Support": "-",
        Reference: "[RFC2838]",
        Notes: "",
        schema: "tv"
      },
      {
        "URI Scheme": "udp",
        Template: "prov/udp",
        Description: "udp",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[Dave_Thaler]",
        Notes: "",
        schema: "udp"
      },
      {
        "URI Scheme": "unreal",
        Template: "prov/unreal",
        Description: "unreal",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[Dave_Thaler]",
        Notes: "",
        schema: "unreal"
      },
      {
        "URI Scheme": "urn",
        Template: "",
        Description: "Uniform Resource Names",
        Status: "Permanent",
        "Well-Known URI Support": "-",
        Reference: "[RFC8141][IANA registry urn-namespaces]",
        Notes: "",
        schema: "urn"
      },
      {
        "URI Scheme": "ut2004",
        Template: "prov/ut2004",
        Description: "ut2004",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[Dave_Thaler]",
        Notes: "",
        schema: "ut2004"
      },
      {
        "URI Scheme": "uuid-in-package",
        Template: "prov/uuid-in-package",
        Description: "uuid-in-package",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[Kunihiko_Sakamoto]",
        Notes: "",
        schema: "uuid-in-package"
      },
      {
        "URI Scheme": "v-event",
        Template: "prov/v-event",
        Description: "v-event",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[draft-menderico-v-event-uri]",
        Notes: "",
        schema: "v-event"
      },
      {
        "URI Scheme": "vemmi",
        Template: "",
        Description: "versatile multimedia interface",
        Status: "Permanent",
        "Well-Known URI Support": "-",
        Reference: "[RFC2122]",
        Notes: "",
        schema: "vemmi"
      },
      {
        "URI Scheme": "ventrilo",
        Template: "prov/ventrilo",
        Description: "ventrilo",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[Dave_Thaler]",
        Notes: "",
        schema: "ventrilo"
      },
      {
        "URI Scheme": "ves",
        Template: "prov/ves",
        Description: "ves",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[Jim_Zubov]",
        Notes: "",
        schema: "ves"
      },
      {
        "URI Scheme": "videotex",
        Template: "historic/videotex",
        Description: "videotex",
        Status: "Historical",
        "Well-Known URI Support": "-",
        Reference: "[draft-mavrakis-videotex-url-spec][RFC2122][RFC3986]",
        Notes: "",
        schema: "videotex"
      },
      {
        "URI Scheme": "vnc",
        Template: "",
        Description: "Remote Framebuffer Protocol",
        Status: "Permanent",
        "Well-Known URI Support": "-",
        Reference: "[RFC7869]",
        Notes: "",
        schema: "vnc"
      },
      {
        "URI Scheme": "view-source",
        Template: "prov/view-source",
        Description: "view-source",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[Mykyta_Yevstifeyev]",
        Notes: "",
        schema: "view-source"
      },
      {
        "URI Scheme": "vscode",
        Template: "prov/vscode",
        Description: "vscode",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[urischemeowners_at_microsoft.com]",
        Notes: "",
        schema: "vscode"
      },
      {
        "URI Scheme": "vscode-insiders",
        Template: "prov/vscode-insiders",
        Description: "vscode-insiders",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[urischemeowners_at_microsoft.com]",
        Notes: "",
        schema: "vscode-insiders"
      },
      {
        "URI Scheme": "vsls",
        Template: "prov/vsls",
        Description: "vsls",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[urischemeowners_at_microsoft.com]",
        Notes: "",
        schema: "vsls"
      },
      {
        "URI Scheme": "wais",
        Template: "",
        Description: "Wide Area Information Servers",
        Status: "Historical",
        "Well-Known URI Support": "-",
        Reference: "[RFC4156]",
        Notes: "",
        schema: "wais"
      },
      {
        "URI Scheme": "wcr",
        Template: "prov/wcr",
        Description: "wcr",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[Jason_Dzubak]",
        Notes: "",
        schema: "wcr"
      },
      {
        "URI Scheme": "webcal",
        Template: "prov/webcal",
        Description: "webcal",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[Dave_Thaler]",
        Notes: "",
        schema: "webcal"
      },
      {
        "URI Scheme": "wifi",
        Template: "prov/wifi",
        Description: "wifi",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[Wi-Fi_Alliance][Jun_Tian]",
        Notes: "",
        schema: "wifi"
      },
      {
        "URI Scheme": "wpid",
        Template: "prov/wpid",
        Description: "wpid",
        Status: "Historical",
        "Well-Known URI Support": "-",
        Reference: "[Eld_Zierau]",
        Notes: "",
        schema: "wpid"
      },
      {
        "URI Scheme": "ws",
        Template: "",
        Description: "WebSocket connections",
        Status: "Permanent",
        "Well-Known URI Support": "[RFC8307]",
        Reference: "[RFC6455]",
        Notes: "",
        schema: "ws"
      },
      {
        "URI Scheme": "wss",
        Template: "",
        Description: "Encrypted WebSocket connections",
        Status: "Permanent",
        "Well-Known URI Support": "[RFC8307]",
        Reference: "[RFC6455]",
        Notes: "",
        schema: "wss"
      },
      {
        "URI Scheme": "wtai",
        Template: "prov/wtai",
        Description: "wtai",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[Dave_Thaler]",
        Notes: "",
        schema: "wtai"
      },
      {
        "URI Scheme": "wyciwyg",
        Template: "prov/wyciwyg",
        Description: "wyciwyg",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[Dave_Thaler]",
        Notes: "",
        schema: "wyciwyg"
      },
      {
        "URI Scheme": "xcon",
        Template: "",
        Description: "xcon",
        Status: "Permanent",
        "Well-Known URI Support": "-",
        Reference: "[RFC6501]",
        Notes: "",
        schema: "xcon"
      },
      {
        "URI Scheme": "xcon-userid",
        Template: "",
        Description: "xcon-userid",
        Status: "Permanent",
        "Well-Known URI Support": "-",
        Reference: "[RFC6501]",
        Notes: "",
        schema: "xcon-userid"
      },
      {
        "URI Scheme": "xfire",
        Template: "prov/xfire",
        Description: "xfire",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[Dave_Thaler]",
        Notes: "",
        schema: "xfire"
      },
      {
        "URI Scheme": "xmlrpc.beep",
        Template: "",
        Description: "xmlrpc.beep",
        Status: "Permanent",
        "Well-Known URI Support": "-",
        Reference: "[RFC3529]",
        Notes: "",
        schema: "xmlrpc.beep"
      },
      {
        "URI Scheme": "xmlrpc.beeps",
        Template: "",
        Description: "xmlrpc.beeps",
        Status: "Permanent",
        "Well-Known URI Support": "-",
        Reference: "[RFC3529]",
        Notes: "",
        schema: "xmlrpc.beeps"
      },
      {
        "URI Scheme": "xmpp",
        Template: "",
        Description: "Extensible Messaging and Presence Protocol",
        Status: "Permanent",
        "Well-Known URI Support": "-",
        Reference: "[RFC5122]",
        Notes: "",
        schema: "xmpp"
      },
      {
        "URI Scheme": "xri",
        Template: "prov/xri",
        Description: "xri",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[Dave_Thaler]",
        Notes: "",
        schema: "xri"
      },
      {
        "URI Scheme": "ymsgr",
        Template: "prov/ymsgr",
        Description: "ymsgr",
        Status: "Provisional",
        "Well-Known URI Support": "-",
        Reference: "[Dave_Thaler]",
        Notes: "",
        schema: "ymsgr"
      },
      {
        "URI Scheme": "z39.50",
        Template: "",
        Description: "Z39.50 information access",
        Status: "Historical",
        "Well-Known URI Support": "-",
        Reference: "[RFC1738][RFC2056]",
        Notes: "",
        schema: "z39.50"
      },
      {
        "URI Scheme": "z39.50r",
        Template: "",
        Description: "Z39.50 Retrieval",
        Status: "Permanent",
        "Well-Known URI Support": "-",
        Reference: "[RFC2056]",
        Notes: "",
        schema: "z39.50r"
      },
      {
        "URI Scheme": "z39.50s",
        Template: "",
        Description: "Z39.50 Session",
        Status: "Permanent",
        "Well-Known URI Support": "-",
        Reference: "[RFC2056]",
        Notes: "",
        schema: "z39.50s"
      }
    ];
  }
});

// src/main.ts
__export(exports, {
  default: () => FaviconPlugin
});
var import_obsidian6 = __toModule(require("obsidian"));

// src/settings.ts
var import_obsidian4 = __toModule(require("obsidian"));

// src/provider.ts
var import_obsidian = __toModule(require("obsidian"));
var providers = {
  "google": { name: "Google", url: (domain) => Promise.resolve("https://www.google.com/s2/favicons?domain=" + domain) },
  "duckduckgo": { name: "DuckDuckGo", url: (domain) => Promise.resolve("https://icons.duckduckgo.com/ip3/" + domain + ".ico") },
  "iconhorse": { name: "Icon Horse", url: (domain) => Promise.resolve("https://icon.horse/icon/" + domain) },
  "splitbee": { name: "Splitbee", url: (domain) => Promise.resolve("https://favicon.splitbee.io/?url=" + domain) },
  "besticon": { name: "The Favicon Finder", url: (domain, settings) => {
    const host = settings.provider === "besticon" ? settings.providerDomain : settings.fallbackProviderDomain;
    return Promise.resolve(host + "/icon?url=" + domain + "&size=32..64..256");
  } },
  "favicongrabber": { name: "Favicon Grabber", url: (domain) => __async(void 0, null, function* () {
    const icons = JSON.parse(yield (0, import_obsidian.request)({
      method: "GET",
      url: "https://favicongrabber.com/api/grab/" + domain
    }));
    if (icons.length === 0)
      return Promise.resolve("http://invalid.stuff");
    return Promise.resolve(icons.icons[0].src);
  }) }
};

// src/OverwrittenIconModal.ts
var import_obsidian3 = __toModule(require("obsidian"));
var import_obsidian_icon_shortcodes = __toModule(require_lib());

// src/suggest.ts
var import_obsidian2 = __toModule(require("obsidian"));

// node_modules/@popperjs/core/lib/enums.js
var top = "top";
var bottom = "bottom";
var right = "right";
var left = "left";
var auto = "auto";
var basePlacements = [top, bottom, right, left];
var start = "start";
var end = "end";
var clippingParents = "clippingParents";
var viewport = "viewport";
var popper = "popper";
var reference = "reference";
var variationPlacements = /* @__PURE__ */ basePlacements.reduce(function(acc, placement) {
  return acc.concat([placement + "-" + start, placement + "-" + end]);
}, []);
var placements = /* @__PURE__ */ [].concat(basePlacements, [auto]).reduce(function(acc, placement) {
  return acc.concat([placement, placement + "-" + start, placement + "-" + end]);
}, []);
var beforeRead = "beforeRead";
var read = "read";
var afterRead = "afterRead";
var beforeMain = "beforeMain";
var main = "main";
var afterMain = "afterMain";
var beforeWrite = "beforeWrite";
var write = "write";
var afterWrite = "afterWrite";
var modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];

// node_modules/@popperjs/core/lib/dom-utils/getNodeName.js
function getNodeName(element) {
  return element ? (element.nodeName || "").toLowerCase() : null;
}

// node_modules/@popperjs/core/lib/dom-utils/getWindow.js
function getWindow(node) {
  if (node == null) {
    return window;
  }
  if (node.toString() !== "[object Window]") {
    var ownerDocument = node.ownerDocument;
    return ownerDocument ? ownerDocument.defaultView || window : window;
  }
  return node;
}

// node_modules/@popperjs/core/lib/dom-utils/instanceOf.js
function isElement(node) {
  var OwnElement = getWindow(node).Element;
  return node instanceof OwnElement || node instanceof Element;
}
function isHTMLElement(node) {
  var OwnElement = getWindow(node).HTMLElement;
  return node instanceof OwnElement || node instanceof HTMLElement;
}
function isShadowRoot(node) {
  if (typeof ShadowRoot === "undefined") {
    return false;
  }
  var OwnElement = getWindow(node).ShadowRoot;
  return node instanceof OwnElement || node instanceof ShadowRoot;
}

// node_modules/@popperjs/core/lib/modifiers/applyStyles.js
function applyStyles(_ref) {
  var state = _ref.state;
  Object.keys(state.elements).forEach(function(name) {
    var style = state.styles[name] || {};
    var attributes = state.attributes[name] || {};
    var element = state.elements[name];
    if (!isHTMLElement(element) || !getNodeName(element)) {
      return;
    }
    Object.assign(element.style, style);
    Object.keys(attributes).forEach(function(name2) {
      var value = attributes[name2];
      if (value === false) {
        element.removeAttribute(name2);
      } else {
        element.setAttribute(name2, value === true ? "" : value);
      }
    });
  });
}
function effect(_ref2) {
  var state = _ref2.state;
  var initialStyles = {
    popper: {
      position: state.options.strategy,
      left: "0",
      top: "0",
      margin: "0"
    },
    arrow: {
      position: "absolute"
    },
    reference: {}
  };
  Object.assign(state.elements.popper.style, initialStyles.popper);
  state.styles = initialStyles;
  if (state.elements.arrow) {
    Object.assign(state.elements.arrow.style, initialStyles.arrow);
  }
  return function() {
    Object.keys(state.elements).forEach(function(name) {
      var element = state.elements[name];
      var attributes = state.attributes[name] || {};
      var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]);
      var style = styleProperties.reduce(function(style2, property) {
        style2[property] = "";
        return style2;
      }, {});
      if (!isHTMLElement(element) || !getNodeName(element)) {
        return;
      }
      Object.assign(element.style, style);
      Object.keys(attributes).forEach(function(attribute) {
        element.removeAttribute(attribute);
      });
    });
  };
}
var applyStyles_default = {
  name: "applyStyles",
  enabled: true,
  phase: "write",
  fn: applyStyles,
  effect,
  requires: ["computeStyles"]
};

// node_modules/@popperjs/core/lib/utils/getBasePlacement.js
function getBasePlacement(placement) {
  return placement.split("-")[0];
}

// node_modules/@popperjs/core/lib/utils/math.js
var max = Math.max;
var min = Math.min;
var round = Math.round;

// node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js
function getBoundingClientRect(element, includeScale) {
  if (includeScale === void 0) {
    includeScale = false;
  }
  var rect = element.getBoundingClientRect();
  var scaleX = 1;
  var scaleY = 1;
  if (isHTMLElement(element) && includeScale) {
    var offsetHeight = element.offsetHeight;
    var offsetWidth = element.offsetWidth;
    if (offsetWidth > 0) {
      scaleX = round(rect.width) / offsetWidth || 1;
    }
    if (offsetHeight > 0) {
      scaleY = round(rect.height) / offsetHeight || 1;
    }
  }
  return {
    width: rect.width / scaleX,
    height: rect.height / scaleY,
    top: rect.top / scaleY,
    right: rect.right / scaleX,
    bottom: rect.bottom / scaleY,
    left: rect.left / scaleX,
    x: rect.left / scaleX,
    y: rect.top / scaleY
  };
}

// node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js
function getLayoutRect(element) {
  var clientRect = getBoundingClientRect(element);
  var width = element.offsetWidth;
  var height = element.offsetHeight;
  if (Math.abs(clientRect.width - width) <= 1) {
    width = clientRect.width;
  }
  if (Math.abs(clientRect.height - height) <= 1) {
    height = clientRect.height;
  }
  return {
    x: element.offsetLeft,
    y: element.offsetTop,
    width,
    height
  };
}

// node_modules/@popperjs/core/lib/dom-utils/contains.js
function contains(parent, child) {
  var rootNode = child.getRootNode && child.getRootNode();
  if (parent.contains(child)) {
    return true;
  } else if (rootNode && isShadowRoot(rootNode)) {
    var next = child;
    do {
      if (next && parent.isSameNode(next)) {
        return true;
      }
      next = next.parentNode || next.host;
    } while (next);
  }
  return false;
}

// node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js
function getComputedStyle(element) {
  return getWindow(element).getComputedStyle(element);
}

// node_modules/@popperjs/core/lib/dom-utils/isTableElement.js
function isTableElement(element) {
  return ["table", "td", "th"].indexOf(getNodeName(element)) >= 0;
}

// node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js
function getDocumentElement(element) {
  return ((isElement(element) ? element.ownerDocument : element.document) || window.document).documentElement;
}

// node_modules/@popperjs/core/lib/dom-utils/getParentNode.js
function getParentNode(element) {
  if (getNodeName(element) === "html") {
    return element;
  }
  return element.assignedSlot || element.parentNode || (isShadowRoot(element) ? element.host : null) || getDocumentElement(element);
}

// node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js
function getTrueOffsetParent(element) {
  if (!isHTMLElement(element) || getComputedStyle(element).position === "fixed") {
    return null;
  }
  return element.offsetParent;
}
function getContainingBlock(element) {
  var isFirefox = navigator.userAgent.toLowerCase().indexOf("firefox") !== -1;
  var isIE = navigator.userAgent.indexOf("Trident") !== -1;
  if (isIE && isHTMLElement(element)) {
    var elementCss = getComputedStyle(element);
    if (elementCss.position === "fixed") {
      return null;
    }
  }
  var currentNode = getParentNode(element);
  while (isHTMLElement(currentNode) && ["html", "body"].indexOf(getNodeName(currentNode)) < 0) {
    var css = getComputedStyle(currentNode);
    if (css.transform !== "none" || css.perspective !== "none" || css.contain === "paint" || ["transform", "perspective"].indexOf(css.willChange) !== -1 || isFirefox && css.willChange === "filter" || isFirefox && css.filter && css.filter !== "none") {
      return currentNode;
    } else {
      currentNode = currentNode.parentNode;
    }
  }
  return null;
}
function getOffsetParent(element) {
  var window2 = getWindow(element);
  var offsetParent = getTrueOffsetParent(element);
  while (offsetParent && isTableElement(offsetParent) && getComputedStyle(offsetParent).position === "static") {
    offsetParent = getTrueOffsetParent(offsetParent);
  }
  if (offsetParent && (getNodeName(offsetParent) === "html" || getNodeName(offsetParent) === "body" && getComputedStyle(offsetParent).position === "static")) {
    return window2;
  }
  return offsetParent || getContainingBlock(element) || window2;
}

// node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js
function getMainAxisFromPlacement(placement) {
  return ["top", "bottom"].indexOf(placement) >= 0 ? "x" : "y";
}

// node_modules/@popperjs/core/lib/utils/within.js
function within(min2, value, max2) {
  return max(min2, min(value, max2));
}
function withinMaxClamp(min2, value, max2) {
  var v = within(min2, value, max2);
  return v > max2 ? max2 : v;
}

// node_modules/@popperjs/core/lib/utils/getFreshSideObject.js
function getFreshSideObject() {
  return {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0
  };
}

// node_modules/@popperjs/core/lib/utils/mergePaddingObject.js
function mergePaddingObject(paddingObject) {
  return Object.assign({}, getFreshSideObject(), paddingObject);
}

// node_modules/@popperjs/core/lib/utils/expandToHashMap.js
function expandToHashMap(value, keys) {
  return keys.reduce(function(hashMap, key) {
    hashMap[key] = value;
    return hashMap;
  }, {});
}

// node_modules/@popperjs/core/lib/modifiers/arrow.js
var toPaddingObject = function toPaddingObject2(padding, state) {
  padding = typeof padding === "function" ? padding(Object.assign({}, state.rects, {
    placement: state.placement
  })) : padding;
  return mergePaddingObject(typeof padding !== "number" ? padding : expandToHashMap(padding, basePlacements));
};
function arrow(_ref) {
  var _state$modifiersData$;
  var state = _ref.state, name = _ref.name, options = _ref.options;
  var arrowElement = state.elements.arrow;
  var popperOffsets2 = state.modifiersData.popperOffsets;
  var basePlacement = getBasePlacement(state.placement);
  var axis = getMainAxisFromPlacement(basePlacement);
  var isVertical = [left, right].indexOf(basePlacement) >= 0;
  var len = isVertical ? "height" : "width";
  if (!arrowElement || !popperOffsets2) {
    return;
  }
  var paddingObject = toPaddingObject(options.padding, state);
  var arrowRect = getLayoutRect(arrowElement);
  var minProp = axis === "y" ? top : left;
  var maxProp = axis === "y" ? bottom : right;
  var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets2[axis] - state.rects.popper[len];
  var startDiff = popperOffsets2[axis] - state.rects.reference[axis];
  var arrowOffsetParent = getOffsetParent(arrowElement);
  var clientSize = arrowOffsetParent ? axis === "y" ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
  var centerToReference = endDiff / 2 - startDiff / 2;
  var min2 = paddingObject[minProp];
  var max2 = clientSize - arrowRect[len] - paddingObject[maxProp];
  var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
  var offset2 = within(min2, center, max2);
  var axisProp = axis;
  state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset2, _state$modifiersData$.centerOffset = offset2 - center, _state$modifiersData$);
}
function effect2(_ref2) {
  var state = _ref2.state, options = _ref2.options;
  var _options$element = options.element, arrowElement = _options$element === void 0 ? "[data-popper-arrow]" : _options$element;
  if (arrowElement == null) {
    return;
  }
  if (typeof arrowElement === "string") {
    arrowElement = state.elements.popper.querySelector(arrowElement);
    if (!arrowElement) {
      return;
    }
  }
  if (true) {
    if (!isHTMLElement(arrowElement)) {
      console.error(['Popper: "arrow" element must be an HTMLElement (not an SVGElement).', "To use an SVG arrow, wrap it in an HTMLElement that will be used as", "the arrow."].join(" "));
    }
  }
  if (!contains(state.elements.popper, arrowElement)) {
    if (true) {
      console.error(['Popper: "arrow" modifier\'s `element` must be a child of the popper', "element."].join(" "));
    }
    return;
  }
  state.elements.arrow = arrowElement;
}
var arrow_default = {
  name: "arrow",
  enabled: true,
  phase: "main",
  fn: arrow,
  effect: effect2,
  requires: ["popperOffsets"],
  requiresIfExists: ["preventOverflow"]
};

// node_modules/@popperjs/core/lib/utils/getVariation.js
function getVariation(placement) {
  return placement.split("-")[1];
}

// node_modules/@popperjs/core/lib/modifiers/computeStyles.js
var unsetSides = {
  top: "auto",
  right: "auto",
  bottom: "auto",
  left: "auto"
};
function roundOffsetsByDPR(_ref) {
  var x = _ref.x, y = _ref.y;
  var win = window;
  var dpr = win.devicePixelRatio || 1;
  return {
    x: round(x * dpr) / dpr || 0,
    y: round(y * dpr) / dpr || 0
  };
}
function mapToStyles(_ref2) {
  var _Object$assign2;
  var popper2 = _ref2.popper, popperRect = _ref2.popperRect, placement = _ref2.placement, variation = _ref2.variation, offsets = _ref2.offsets, position = _ref2.position, gpuAcceleration = _ref2.gpuAcceleration, adaptive = _ref2.adaptive, roundOffsets = _ref2.roundOffsets, isFixed = _ref2.isFixed;
  var _offsets$x = offsets.x, x = _offsets$x === void 0 ? 0 : _offsets$x, _offsets$y = offsets.y, y = _offsets$y === void 0 ? 0 : _offsets$y;
  var _ref3 = typeof roundOffsets === "function" ? roundOffsets({
    x,
    y
  }) : {
    x,
    y
  };
  x = _ref3.x;
  y = _ref3.y;
  var hasX = offsets.hasOwnProperty("x");
  var hasY = offsets.hasOwnProperty("y");
  var sideX = left;
  var sideY = top;
  var win = window;
  if (adaptive) {
    var offsetParent = getOffsetParent(popper2);
    var heightProp = "clientHeight";
    var widthProp = "clientWidth";
    if (offsetParent === getWindow(popper2)) {
      offsetParent = getDocumentElement(popper2);
      if (getComputedStyle(offsetParent).position !== "static" && position === "absolute") {
        heightProp = "scrollHeight";
        widthProp = "scrollWidth";
      }
    }
    offsetParent = offsetParent;
    if (placement === top || (placement === left || placement === right) && variation === end) {
      sideY = bottom;
      var offsetY = isFixed && win.visualViewport ? win.visualViewport.height : offsetParent[heightProp];
      y -= offsetY - popperRect.height;
      y *= gpuAcceleration ? 1 : -1;
    }
    if (placement === left || (placement === top || placement === bottom) && variation === end) {
      sideX = right;
      var offsetX = isFixed && win.visualViewport ? win.visualViewport.width : offsetParent[widthProp];
      x -= offsetX - popperRect.width;
      x *= gpuAcceleration ? 1 : -1;
    }
  }
  var commonStyles = Object.assign({
    position
  }, adaptive && unsetSides);
  var _ref4 = roundOffsets === true ? roundOffsetsByDPR({
    x,
    y
  }) : {
    x,
    y
  };
  x = _ref4.x;
  y = _ref4.y;
  if (gpuAcceleration) {
    var _Object$assign;
    return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? "0" : "", _Object$assign[sideX] = hasX ? "0" : "", _Object$assign.transform = (win.devicePixelRatio || 1) <= 1 ? "translate(" + x + "px, " + y + "px)" : "translate3d(" + x + "px, " + y + "px, 0)", _Object$assign));
  }
  return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y + "px" : "", _Object$assign2[sideX] = hasX ? x + "px" : "", _Object$assign2.transform = "", _Object$assign2));
}
function computeStyles(_ref5) {
  var state = _ref5.state, options = _ref5.options;
  var _options$gpuAccelerat = options.gpuAcceleration, gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat, _options$adaptive = options.adaptive, adaptive = _options$adaptive === void 0 ? true : _options$adaptive, _options$roundOffsets = options.roundOffsets, roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;
  if (true) {
    var transitionProperty = getComputedStyle(state.elements.popper).transitionProperty || "";
    if (adaptive && ["transform", "top", "right", "bottom", "left"].some(function(property) {
      return transitionProperty.indexOf(property) >= 0;
    })) {
      console.warn(["Popper: Detected CSS transitions on at least one of the following", 'CSS properties: "transform", "top", "right", "bottom", "left".', "\n\n", 'Disable the "computeStyles" modifier\'s `adaptive` option to allow', "for smooth transitions, or remove these properties from the CSS", "transition declaration on the popper element if only transitioning", "opacity or background-color for example.", "\n\n", "We recommend using the popper element as a wrapper around an inner", "element that can have any CSS property transitioned for animations."].join(" "));
    }
  }
  var commonStyles = {
    placement: getBasePlacement(state.placement),
    variation: getVariation(state.placement),
    popper: state.elements.popper,
    popperRect: state.rects.popper,
    gpuAcceleration,
    isFixed: state.options.strategy === "fixed"
  };
  if (state.modifiersData.popperOffsets != null) {
    state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {
      offsets: state.modifiersData.popperOffsets,
      position: state.options.strategy,
      adaptive,
      roundOffsets
    })));
  }
  if (state.modifiersData.arrow != null) {
    state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {
      offsets: state.modifiersData.arrow,
      position: "absolute",
      adaptive: false,
      roundOffsets
    })));
  }
  state.attributes.popper = Object.assign({}, state.attributes.popper, {
    "data-popper-placement": state.placement
  });
}
var computeStyles_default = {
  name: "computeStyles",
  enabled: true,
  phase: "beforeWrite",
  fn: computeStyles,
  data: {}
};

// node_modules/@popperjs/core/lib/modifiers/eventListeners.js
var passive = {
  passive: true
};
function effect3(_ref) {
  var state = _ref.state, instance = _ref.instance, options = _ref.options;
  var _options$scroll = options.scroll, scroll = _options$scroll === void 0 ? true : _options$scroll, _options$resize = options.resize, resize = _options$resize === void 0 ? true : _options$resize;
  var window2 = getWindow(state.elements.popper);
  var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);
  if (scroll) {
    scrollParents.forEach(function(scrollParent) {
      scrollParent.addEventListener("scroll", instance.update, passive);
    });
  }
  if (resize) {
    window2.addEventListener("resize", instance.update, passive);
  }
  return function() {
    if (scroll) {
      scrollParents.forEach(function(scrollParent) {
        scrollParent.removeEventListener("scroll", instance.update, passive);
      });
    }
    if (resize) {
      window2.removeEventListener("resize", instance.update, passive);
    }
  };
}
var eventListeners_default = {
  name: "eventListeners",
  enabled: true,
  phase: "write",
  fn: function fn() {
  },
  effect: effect3,
  data: {}
};

// node_modules/@popperjs/core/lib/utils/getOppositePlacement.js
var hash = {
  left: "right",
  right: "left",
  bottom: "top",
  top: "bottom"
};
function getOppositePlacement(placement) {
  return placement.replace(/left|right|bottom|top/g, function(matched) {
    return hash[matched];
  });
}

// node_modules/@popperjs/core/lib/utils/getOppositeVariationPlacement.js
var hash2 = {
  start: "end",
  end: "start"
};
function getOppositeVariationPlacement(placement) {
  return placement.replace(/start|end/g, function(matched) {
    return hash2[matched];
  });
}

// node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js
function getWindowScroll(node) {
  var win = getWindow(node);
  var scrollLeft = win.pageXOffset;
  var scrollTop = win.pageYOffset;
  return {
    scrollLeft,
    scrollTop
  };
}

// node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js
function getWindowScrollBarX(element) {
  return getBoundingClientRect(getDocumentElement(element)).left + getWindowScroll(element).scrollLeft;
}

// node_modules/@popperjs/core/lib/dom-utils/getViewportRect.js
function getViewportRect(element) {
  var win = getWindow(element);
  var html = getDocumentElement(element);
  var visualViewport = win.visualViewport;
  var width = html.clientWidth;
  var height = html.clientHeight;
  var x = 0;
  var y = 0;
  if (visualViewport) {
    width = visualViewport.width;
    height = visualViewport.height;
    if (!/^((?!chrome|android).)*safari/i.test(navigator.userAgent)) {
      x = visualViewport.offsetLeft;
      y = visualViewport.offsetTop;
    }
  }
  return {
    width,
    height,
    x: x + getWindowScrollBarX(element),
    y
  };
}

// node_modules/@popperjs/core/lib/dom-utils/getDocumentRect.js
function getDocumentRect(element) {
  var _element$ownerDocumen;
  var html = getDocumentElement(element);
  var winScroll = getWindowScroll(element);
  var body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
  var width = max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
  var height = max(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
  var x = -winScroll.scrollLeft + getWindowScrollBarX(element);
  var y = -winScroll.scrollTop;
  if (getComputedStyle(body || html).direction === "rtl") {
    x += max(html.clientWidth, body ? body.clientWidth : 0) - width;
  }
  return {
    width,
    height,
    x,
    y
  };
}

// node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js
function isScrollParent(element) {
  var _getComputedStyle = getComputedStyle(element), overflow = _getComputedStyle.overflow, overflowX = _getComputedStyle.overflowX, overflowY = _getComputedStyle.overflowY;
  return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
}

// node_modules/@popperjs/core/lib/dom-utils/getScrollParent.js
function getScrollParent(node) {
  if (["html", "body", "#document"].indexOf(getNodeName(node)) >= 0) {
    return node.ownerDocument.body;
  }
  if (isHTMLElement(node) && isScrollParent(node)) {
    return node;
  }
  return getScrollParent(getParentNode(node));
}

// node_modules/@popperjs/core/lib/dom-utils/listScrollParents.js
function listScrollParents(element, list) {
  var _element$ownerDocumen;
  if (list === void 0) {
    list = [];
  }
  var scrollParent = getScrollParent(element);
  var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);
  var win = getWindow(scrollParent);
  var target = isBody ? [win].concat(win.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;
  var updatedList = list.concat(target);
  return isBody ? updatedList : updatedList.concat(listScrollParents(getParentNode(target)));
}

// node_modules/@popperjs/core/lib/utils/rectToClientRect.js
function rectToClientRect(rect) {
  return Object.assign({}, rect, {
    left: rect.x,
    top: rect.y,
    right: rect.x + rect.width,
    bottom: rect.y + rect.height
  });
}

// node_modules/@popperjs/core/lib/dom-utils/getClippingRect.js
function getInnerBoundingClientRect(element) {
  var rect = getBoundingClientRect(element);
  rect.top = rect.top + element.clientTop;
  rect.left = rect.left + element.clientLeft;
  rect.bottom = rect.top + element.clientHeight;
  rect.right = rect.left + element.clientWidth;
  rect.width = element.clientWidth;
  rect.height = element.clientHeight;
  rect.x = rect.left;
  rect.y = rect.top;
  return rect;
}
function getClientRectFromMixedType(element, clippingParent) {
  return clippingParent === viewport ? rectToClientRect(getViewportRect(element)) : isElement(clippingParent) ? getInnerBoundingClientRect(clippingParent) : rectToClientRect(getDocumentRect(getDocumentElement(element)));
}
function getClippingParents(element) {
  var clippingParents2 = listScrollParents(getParentNode(element));
  var canEscapeClipping = ["absolute", "fixed"].indexOf(getComputedStyle(element).position) >= 0;
  var clipperElement = canEscapeClipping && isHTMLElement(element) ? getOffsetParent(element) : element;
  if (!isElement(clipperElement)) {
    return [];
  }
  return clippingParents2.filter(function(clippingParent) {
    return isElement(clippingParent) && contains(clippingParent, clipperElement) && getNodeName(clippingParent) !== "body";
  });
}
function getClippingRect(element, boundary, rootBoundary) {
  var mainClippingParents = boundary === "clippingParents" ? getClippingParents(element) : [].concat(boundary);
  var clippingParents2 = [].concat(mainClippingParents, [rootBoundary]);
  var firstClippingParent = clippingParents2[0];
  var clippingRect = clippingParents2.reduce(function(accRect, clippingParent) {
    var rect = getClientRectFromMixedType(element, clippingParent);
    accRect.top = max(rect.top, accRect.top);
    accRect.right = min(rect.right, accRect.right);
    accRect.bottom = min(rect.bottom, accRect.bottom);
    accRect.left = max(rect.left, accRect.left);
    return accRect;
  }, getClientRectFromMixedType(element, firstClippingParent));
  clippingRect.width = clippingRect.right - clippingRect.left;
  clippingRect.height = clippingRect.bottom - clippingRect.top;
  clippingRect.x = clippingRect.left;
  clippingRect.y = clippingRect.top;
  return clippingRect;
}

// node_modules/@popperjs/core/lib/utils/computeOffsets.js
function computeOffsets(_ref) {
  var reference2 = _ref.reference, element = _ref.element, placement = _ref.placement;
  var basePlacement = placement ? getBasePlacement(placement) : null;
  var variation = placement ? getVariation(placement) : null;
  var commonX = reference2.x + reference2.width / 2 - element.width / 2;
  var commonY = reference2.y + reference2.height / 2 - element.height / 2;
  var offsets;
  switch (basePlacement) {
    case top:
      offsets = {
        x: commonX,
        y: reference2.y - element.height
      };
      break;
    case bottom:
      offsets = {
        x: commonX,
        y: reference2.y + reference2.height
      };
      break;
    case right:
      offsets = {
        x: reference2.x + reference2.width,
        y: commonY
      };
      break;
    case left:
      offsets = {
        x: reference2.x - element.width,
        y: commonY
      };
      break;
    default:
      offsets = {
        x: reference2.x,
        y: reference2.y
      };
  }
  var mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;
  if (mainAxis != null) {
    var len = mainAxis === "y" ? "height" : "width";
    switch (variation) {
      case start:
        offsets[mainAxis] = offsets[mainAxis] - (reference2[len] / 2 - element[len] / 2);
        break;
      case end:
        offsets[mainAxis] = offsets[mainAxis] + (reference2[len] / 2 - element[len] / 2);
        break;
      default:
    }
  }
  return offsets;
}

// node_modules/@popperjs/core/lib/utils/detectOverflow.js
function detectOverflow(state, options) {
  if (options === void 0) {
    options = {};
  }
  var _options = options, _options$placement = _options.placement, placement = _options$placement === void 0 ? state.placement : _options$placement, _options$boundary = _options.boundary, boundary = _options$boundary === void 0 ? clippingParents : _options$boundary, _options$rootBoundary = _options.rootBoundary, rootBoundary = _options$rootBoundary === void 0 ? viewport : _options$rootBoundary, _options$elementConte = _options.elementContext, elementContext = _options$elementConte === void 0 ? popper : _options$elementConte, _options$altBoundary = _options.altBoundary, altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary, _options$padding = _options.padding, padding = _options$padding === void 0 ? 0 : _options$padding;
  var paddingObject = mergePaddingObject(typeof padding !== "number" ? padding : expandToHashMap(padding, basePlacements));
  var altContext = elementContext === popper ? reference : popper;
  var popperRect = state.rects.popper;
  var element = state.elements[altBoundary ? altContext : elementContext];
  var clippingClientRect = getClippingRect(isElement(element) ? element : element.contextElement || getDocumentElement(state.elements.popper), boundary, rootBoundary);
  var referenceClientRect = getBoundingClientRect(state.elements.reference);
  var popperOffsets2 = computeOffsets({
    reference: referenceClientRect,
    element: popperRect,
    strategy: "absolute",
    placement
  });
  var popperClientRect = rectToClientRect(Object.assign({}, popperRect, popperOffsets2));
  var elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect;
  var overflowOffsets = {
    top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
    bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
    left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
    right: elementClientRect.right - clippingClientRect.right + paddingObject.right
  };
  var offsetData = state.modifiersData.offset;
  if (elementContext === popper && offsetData) {
    var offset2 = offsetData[placement];
    Object.keys(overflowOffsets).forEach(function(key) {
      var multiply = [right, bottom].indexOf(key) >= 0 ? 1 : -1;
      var axis = [top, bottom].indexOf(key) >= 0 ? "y" : "x";
      overflowOffsets[key] += offset2[axis] * multiply;
    });
  }
  return overflowOffsets;
}

// node_modules/@popperjs/core/lib/utils/computeAutoPlacement.js
function computeAutoPlacement(state, options) {
  if (options === void 0) {
    options = {};
  }
  var _options = options, placement = _options.placement, boundary = _options.boundary, rootBoundary = _options.rootBoundary, padding = _options.padding, flipVariations = _options.flipVariations, _options$allowedAutoP = _options.allowedAutoPlacements, allowedAutoPlacements = _options$allowedAutoP === void 0 ? placements : _options$allowedAutoP;
  var variation = getVariation(placement);
  var placements2 = variation ? flipVariations ? variationPlacements : variationPlacements.filter(function(placement2) {
    return getVariation(placement2) === variation;
  }) : basePlacements;
  var allowedPlacements = placements2.filter(function(placement2) {
    return allowedAutoPlacements.indexOf(placement2) >= 0;
  });
  if (allowedPlacements.length === 0) {
    allowedPlacements = placements2;
    if (true) {
      console.error(["Popper: The `allowedAutoPlacements` option did not allow any", "placements. Ensure the `placement` option matches the variation", "of the allowed placements.", 'For example, "auto" cannot be used to allow "bottom-start".', 'Use "auto-start" instead.'].join(" "));
    }
  }
  var overflows = allowedPlacements.reduce(function(acc, placement2) {
    acc[placement2] = detectOverflow(state, {
      placement: placement2,
      boundary,
      rootBoundary,
      padding
    })[getBasePlacement(placement2)];
    return acc;
  }, {});
  return Object.keys(overflows).sort(function(a, b) {
    return overflows[a] - overflows[b];
  });
}

// node_modules/@popperjs/core/lib/modifiers/flip.js
function getExpandedFallbackPlacements(placement) {
  if (getBasePlacement(placement) === auto) {
    return [];
  }
  var oppositePlacement = getOppositePlacement(placement);
  return [getOppositeVariationPlacement(placement), oppositePlacement, getOppositeVariationPlacement(oppositePlacement)];
}
function flip(_ref) {
  var state = _ref.state, options = _ref.options, name = _ref.name;
  if (state.modifiersData[name]._skip) {
    return;
  }
  var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis, specifiedFallbackPlacements = options.fallbackPlacements, padding = options.padding, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, _options$flipVariatio = options.flipVariations, flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio, allowedAutoPlacements = options.allowedAutoPlacements;
  var preferredPlacement = state.options.placement;
  var basePlacement = getBasePlacement(preferredPlacement);
  var isBasePlacement = basePlacement === preferredPlacement;
  var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));
  var placements2 = [preferredPlacement].concat(fallbackPlacements).reduce(function(acc, placement2) {
    return acc.concat(getBasePlacement(placement2) === auto ? computeAutoPlacement(state, {
      placement: placement2,
      boundary,
      rootBoundary,
      padding,
      flipVariations,
      allowedAutoPlacements
    }) : placement2);
  }, []);
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var checksMap = new Map();
  var makeFallbackChecks = true;
  var firstFittingPlacement = placements2[0];
  for (var i = 0; i < placements2.length; i++) {
    var placement = placements2[i];
    var _basePlacement = getBasePlacement(placement);
    var isStartVariation = getVariation(placement) === start;
    var isVertical = [top, bottom].indexOf(_basePlacement) >= 0;
    var len = isVertical ? "width" : "height";
    var overflow = detectOverflow(state, {
      placement,
      boundary,
      rootBoundary,
      altBoundary,
      padding
    });
    var mainVariationSide = isVertical ? isStartVariation ? right : left : isStartVariation ? bottom : top;
    if (referenceRect[len] > popperRect[len]) {
      mainVariationSide = getOppositePlacement(mainVariationSide);
    }
    var altVariationSide = getOppositePlacement(mainVariationSide);
    var checks = [];
    if (checkMainAxis) {
      checks.push(overflow[_basePlacement] <= 0);
    }
    if (checkAltAxis) {
      checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
    }
    if (checks.every(function(check) {
      return check;
    })) {
      firstFittingPlacement = placement;
      makeFallbackChecks = false;
      break;
    }
    checksMap.set(placement, checks);
  }
  if (makeFallbackChecks) {
    var numberOfChecks = flipVariations ? 3 : 1;
    var _loop = function _loop2(_i2) {
      var fittingPlacement = placements2.find(function(placement2) {
        var checks2 = checksMap.get(placement2);
        if (checks2) {
          return checks2.slice(0, _i2).every(function(check) {
            return check;
          });
        }
      });
      if (fittingPlacement) {
        firstFittingPlacement = fittingPlacement;
        return "break";
      }
    };
    for (var _i = numberOfChecks; _i > 0; _i--) {
      var _ret = _loop(_i);
      if (_ret === "break")
        break;
    }
  }
  if (state.placement !== firstFittingPlacement) {
    state.modifiersData[name]._skip = true;
    state.placement = firstFittingPlacement;
    state.reset = true;
  }
}
var flip_default = {
  name: "flip",
  enabled: true,
  phase: "main",
  fn: flip,
  requiresIfExists: ["offset"],
  data: {
    _skip: false
  }
};

// node_modules/@popperjs/core/lib/modifiers/hide.js
function getSideOffsets(overflow, rect, preventedOffsets) {
  if (preventedOffsets === void 0) {
    preventedOffsets = {
      x: 0,
      y: 0
    };
  }
  return {
    top: overflow.top - rect.height - preventedOffsets.y,
    right: overflow.right - rect.width + preventedOffsets.x,
    bottom: overflow.bottom - rect.height + preventedOffsets.y,
    left: overflow.left - rect.width - preventedOffsets.x
  };
}
function isAnySideFullyClipped(overflow) {
  return [top, right, bottom, left].some(function(side) {
    return overflow[side] >= 0;
  });
}
function hide(_ref) {
  var state = _ref.state, name = _ref.name;
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var preventedOffsets = state.modifiersData.preventOverflow;
  var referenceOverflow = detectOverflow(state, {
    elementContext: "reference"
  });
  var popperAltOverflow = detectOverflow(state, {
    altBoundary: true
  });
  var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);
  var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
  var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
  var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
  state.modifiersData[name] = {
    referenceClippingOffsets,
    popperEscapeOffsets,
    isReferenceHidden,
    hasPopperEscaped
  };
  state.attributes.popper = Object.assign({}, state.attributes.popper, {
    "data-popper-reference-hidden": isReferenceHidden,
    "data-popper-escaped": hasPopperEscaped
  });
}
var hide_default = {
  name: "hide",
  enabled: true,
  phase: "main",
  requiresIfExists: ["preventOverflow"],
  fn: hide
};

// node_modules/@popperjs/core/lib/modifiers/offset.js
function distanceAndSkiddingToXY(placement, rects, offset2) {
  var basePlacement = getBasePlacement(placement);
  var invertDistance = [left, top].indexOf(basePlacement) >= 0 ? -1 : 1;
  var _ref = typeof offset2 === "function" ? offset2(Object.assign({}, rects, {
    placement
  })) : offset2, skidding = _ref[0], distance = _ref[1];
  skidding = skidding || 0;
  distance = (distance || 0) * invertDistance;
  return [left, right].indexOf(basePlacement) >= 0 ? {
    x: distance,
    y: skidding
  } : {
    x: skidding,
    y: distance
  };
}
function offset(_ref2) {
  var state = _ref2.state, options = _ref2.options, name = _ref2.name;
  var _options$offset = options.offset, offset2 = _options$offset === void 0 ? [0, 0] : _options$offset;
  var data = placements.reduce(function(acc, placement) {
    acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset2);
    return acc;
  }, {});
  var _data$state$placement = data[state.placement], x = _data$state$placement.x, y = _data$state$placement.y;
  if (state.modifiersData.popperOffsets != null) {
    state.modifiersData.popperOffsets.x += x;
    state.modifiersData.popperOffsets.y += y;
  }
  state.modifiersData[name] = data;
}
var offset_default = {
  name: "offset",
  enabled: true,
  phase: "main",
  requires: ["popperOffsets"],
  fn: offset
};

// node_modules/@popperjs/core/lib/modifiers/popperOffsets.js
function popperOffsets(_ref) {
  var state = _ref.state, name = _ref.name;
  state.modifiersData[name] = computeOffsets({
    reference: state.rects.reference,
    element: state.rects.popper,
    strategy: "absolute",
    placement: state.placement
  });
}
var popperOffsets_default = {
  name: "popperOffsets",
  enabled: true,
  phase: "read",
  fn: popperOffsets,
  data: {}
};

// node_modules/@popperjs/core/lib/utils/getAltAxis.js
function getAltAxis(axis) {
  return axis === "x" ? "y" : "x";
}

// node_modules/@popperjs/core/lib/modifiers/preventOverflow.js
function preventOverflow(_ref) {
  var state = _ref.state, options = _ref.options, name = _ref.name;
  var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, padding = options.padding, _options$tether = options.tether, tether = _options$tether === void 0 ? true : _options$tether, _options$tetherOffset = options.tetherOffset, tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
  var overflow = detectOverflow(state, {
    boundary,
    rootBoundary,
    padding,
    altBoundary
  });
  var basePlacement = getBasePlacement(state.placement);
  var variation = getVariation(state.placement);
  var isBasePlacement = !variation;
  var mainAxis = getMainAxisFromPlacement(basePlacement);
  var altAxis = getAltAxis(mainAxis);
  var popperOffsets2 = state.modifiersData.popperOffsets;
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var tetherOffsetValue = typeof tetherOffset === "function" ? tetherOffset(Object.assign({}, state.rects, {
    placement: state.placement
  })) : tetherOffset;
  var normalizedTetherOffsetValue = typeof tetherOffsetValue === "number" ? {
    mainAxis: tetherOffsetValue,
    altAxis: tetherOffsetValue
  } : Object.assign({
    mainAxis: 0,
    altAxis: 0
  }, tetherOffsetValue);
  var offsetModifierState = state.modifiersData.offset ? state.modifiersData.offset[state.placement] : null;
  var data = {
    x: 0,
    y: 0
  };
  if (!popperOffsets2) {
    return;
  }
  if (checkMainAxis) {
    var _offsetModifierState$;
    var mainSide = mainAxis === "y" ? top : left;
    var altSide = mainAxis === "y" ? bottom : right;
    var len = mainAxis === "y" ? "height" : "width";
    var offset2 = popperOffsets2[mainAxis];
    var min2 = offset2 + overflow[mainSide];
    var max2 = offset2 - overflow[altSide];
    var additive = tether ? -popperRect[len] / 2 : 0;
    var minLen = variation === start ? referenceRect[len] : popperRect[len];
    var maxLen = variation === start ? -popperRect[len] : -referenceRect[len];
    var arrowElement = state.elements.arrow;
    var arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : {
      width: 0,
      height: 0
    };
    var arrowPaddingObject = state.modifiersData["arrow#persistent"] ? state.modifiersData["arrow#persistent"].padding : getFreshSideObject();
    var arrowPaddingMin = arrowPaddingObject[mainSide];
    var arrowPaddingMax = arrowPaddingObject[altSide];
    var arrowLen = within(0, referenceRect[len], arrowRect[len]);
    var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis : minLen - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis;
    var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis : maxLen + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis;
    var arrowOffsetParent = state.elements.arrow && getOffsetParent(state.elements.arrow);
    var clientOffset = arrowOffsetParent ? mainAxis === "y" ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
    var offsetModifierValue = (_offsetModifierState$ = offsetModifierState == null ? void 0 : offsetModifierState[mainAxis]) != null ? _offsetModifierState$ : 0;
    var tetherMin = offset2 + minOffset - offsetModifierValue - clientOffset;
    var tetherMax = offset2 + maxOffset - offsetModifierValue;
    var preventedOffset = within(tether ? min(min2, tetherMin) : min2, offset2, tether ? max(max2, tetherMax) : max2);
    popperOffsets2[mainAxis] = preventedOffset;
    data[mainAxis] = preventedOffset - offset2;
  }
  if (checkAltAxis) {
    var _offsetModifierState$2;
    var _mainSide = mainAxis === "x" ? top : left;
    var _altSide = mainAxis === "x" ? bottom : right;
    var _offset = popperOffsets2[altAxis];
    var _len = altAxis === "y" ? "height" : "width";
    var _min = _offset + overflow[_mainSide];
    var _max = _offset - overflow[_altSide];
    var isOriginSide = [top, left].indexOf(basePlacement) !== -1;
    var _offsetModifierValue = (_offsetModifierState$2 = offsetModifierState == null ? void 0 : offsetModifierState[altAxis]) != null ? _offsetModifierState$2 : 0;
    var _tetherMin = isOriginSide ? _min : _offset - referenceRect[_len] - popperRect[_len] - _offsetModifierValue + normalizedTetherOffsetValue.altAxis;
    var _tetherMax = isOriginSide ? _offset + referenceRect[_len] + popperRect[_len] - _offsetModifierValue - normalizedTetherOffsetValue.altAxis : _max;
    var _preventedOffset = tether && isOriginSide ? withinMaxClamp(_tetherMin, _offset, _tetherMax) : within(tether ? _tetherMin : _min, _offset, tether ? _tetherMax : _max);
    popperOffsets2[altAxis] = _preventedOffset;
    data[altAxis] = _preventedOffset - _offset;
  }
  state.modifiersData[name] = data;
}
var preventOverflow_default = {
  name: "preventOverflow",
  enabled: true,
  phase: "main",
  fn: preventOverflow,
  requiresIfExists: ["offset"]
};

// node_modules/@popperjs/core/lib/dom-utils/getHTMLElementScroll.js
function getHTMLElementScroll(element) {
  return {
    scrollLeft: element.scrollLeft,
    scrollTop: element.scrollTop
  };
}

// node_modules/@popperjs/core/lib/dom-utils/getNodeScroll.js
function getNodeScroll(node) {
  if (node === getWindow(node) || !isHTMLElement(node)) {
    return getWindowScroll(node);
  } else {
    return getHTMLElementScroll(node);
  }
}

// node_modules/@popperjs/core/lib/dom-utils/getCompositeRect.js
function isElementScaled(element) {
  var rect = element.getBoundingClientRect();
  var scaleX = round(rect.width) / element.offsetWidth || 1;
  var scaleY = round(rect.height) / element.offsetHeight || 1;
  return scaleX !== 1 || scaleY !== 1;
}
function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {
  if (isFixed === void 0) {
    isFixed = false;
  }
  var isOffsetParentAnElement = isHTMLElement(offsetParent);
  var offsetParentIsScaled = isHTMLElement(offsetParent) && isElementScaled(offsetParent);
  var documentElement = getDocumentElement(offsetParent);
  var rect = getBoundingClientRect(elementOrVirtualElement, offsetParentIsScaled);
  var scroll = {
    scrollLeft: 0,
    scrollTop: 0
  };
  var offsets = {
    x: 0,
    y: 0
  };
  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
    if (getNodeName(offsetParent) !== "body" || isScrollParent(documentElement)) {
      scroll = getNodeScroll(offsetParent);
    }
    if (isHTMLElement(offsetParent)) {
      offsets = getBoundingClientRect(offsetParent, true);
      offsets.x += offsetParent.clientLeft;
      offsets.y += offsetParent.clientTop;
    } else if (documentElement) {
      offsets.x = getWindowScrollBarX(documentElement);
    }
  }
  return {
    x: rect.left + scroll.scrollLeft - offsets.x,
    y: rect.top + scroll.scrollTop - offsets.y,
    width: rect.width,
    height: rect.height
  };
}

// node_modules/@popperjs/core/lib/utils/orderModifiers.js
function order(modifiers) {
  var map = new Map();
  var visited = new Set();
  var result = [];
  modifiers.forEach(function(modifier) {
    map.set(modifier.name, modifier);
  });
  function sort(modifier) {
    visited.add(modifier.name);
    var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
    requires.forEach(function(dep) {
      if (!visited.has(dep)) {
        var depModifier = map.get(dep);
        if (depModifier) {
          sort(depModifier);
        }
      }
    });
    result.push(modifier);
  }
  modifiers.forEach(function(modifier) {
    if (!visited.has(modifier.name)) {
      sort(modifier);
    }
  });
  return result;
}
function orderModifiers(modifiers) {
  var orderedModifiers = order(modifiers);
  return modifierPhases.reduce(function(acc, phase) {
    return acc.concat(orderedModifiers.filter(function(modifier) {
      return modifier.phase === phase;
    }));
  }, []);
}

// node_modules/@popperjs/core/lib/utils/debounce.js
function debounce(fn2) {
  var pending;
  return function() {
    if (!pending) {
      pending = new Promise(function(resolve) {
        Promise.resolve().then(function() {
          pending = void 0;
          resolve(fn2());
        });
      });
    }
    return pending;
  };
}

// node_modules/@popperjs/core/lib/utils/format.js
function format(str) {
  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }
  return [].concat(args).reduce(function(p, c) {
    return p.replace(/%s/, c);
  }, str);
}

// node_modules/@popperjs/core/lib/utils/validateModifiers.js
var INVALID_MODIFIER_ERROR = 'Popper: modifier "%s" provided an invalid %s property, expected %s but got %s';
var MISSING_DEPENDENCY_ERROR = 'Popper: modifier "%s" requires "%s", but "%s" modifier is not available';
var VALID_PROPERTIES = ["name", "enabled", "phase", "fn", "effect", "requires", "options"];
function validateModifiers(modifiers) {
  modifiers.forEach(function(modifier) {
    [].concat(Object.keys(modifier), VALID_PROPERTIES).filter(function(value, index, self) {
      return self.indexOf(value) === index;
    }).forEach(function(key) {
      switch (key) {
        case "name":
          if (typeof modifier.name !== "string") {
            console.error(format(INVALID_MODIFIER_ERROR, String(modifier.name), '"name"', '"string"', '"' + String(modifier.name) + '"'));
          }
          break;
        case "enabled":
          if (typeof modifier.enabled !== "boolean") {
            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"enabled"', '"boolean"', '"' + String(modifier.enabled) + '"'));
          }
          break;
        case "phase":
          if (modifierPhases.indexOf(modifier.phase) < 0) {
            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"phase"', "either " + modifierPhases.join(", "), '"' + String(modifier.phase) + '"'));
          }
          break;
        case "fn":
          if (typeof modifier.fn !== "function") {
            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"fn"', '"function"', '"' + String(modifier.fn) + '"'));
          }
          break;
        case "effect":
          if (modifier.effect != null && typeof modifier.effect !== "function") {
            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"effect"', '"function"', '"' + String(modifier.fn) + '"'));
          }
          break;
        case "requires":
          if (modifier.requires != null && !Array.isArray(modifier.requires)) {
            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"requires"', '"array"', '"' + String(modifier.requires) + '"'));
          }
          break;
        case "requiresIfExists":
          if (!Array.isArray(modifier.requiresIfExists)) {
            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"requiresIfExists"', '"array"', '"' + String(modifier.requiresIfExists) + '"'));
          }
          break;
        case "options":
        case "data":
          break;
        default:
          console.error('PopperJS: an invalid property has been provided to the "' + modifier.name + '" modifier, valid properties are ' + VALID_PROPERTIES.map(function(s) {
            return '"' + s + '"';
          }).join(", ") + '; but "' + key + '" was provided.');
      }
      modifier.requires && modifier.requires.forEach(function(requirement) {
        if (modifiers.find(function(mod) {
          return mod.name === requirement;
        }) == null) {
          console.error(format(MISSING_DEPENDENCY_ERROR, String(modifier.name), requirement, requirement));
        }
      });
    });
  });
}

// node_modules/@popperjs/core/lib/utils/uniqueBy.js
function uniqueBy(arr, fn2) {
  var identifiers = new Set();
  return arr.filter(function(item) {
    var identifier = fn2(item);
    if (!identifiers.has(identifier)) {
      identifiers.add(identifier);
      return true;
    }
  });
}

// node_modules/@popperjs/core/lib/utils/mergeByName.js
function mergeByName(modifiers) {
  var merged = modifiers.reduce(function(merged2, current) {
    var existing = merged2[current.name];
    merged2[current.name] = existing ? Object.assign({}, existing, current, {
      options: Object.assign({}, existing.options, current.options),
      data: Object.assign({}, existing.data, current.data)
    }) : current;
    return merged2;
  }, {});
  return Object.keys(merged).map(function(key) {
    return merged[key];
  });
}

// node_modules/@popperjs/core/lib/createPopper.js
var INVALID_ELEMENT_ERROR = "Popper: Invalid reference or popper argument provided. They must be either a DOM element or virtual element.";
var INFINITE_LOOP_ERROR = "Popper: An infinite loop in the modifiers cycle has been detected! The cycle has been interrupted to prevent a browser crash.";
var DEFAULT_OPTIONS = {
  placement: "bottom",
  modifiers: [],
  strategy: "absolute"
};
function areValidElements() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }
  return !args.some(function(element) {
    return !(element && typeof element.getBoundingClientRect === "function");
  });
}
function popperGenerator(generatorOptions) {
  if (generatorOptions === void 0) {
    generatorOptions = {};
  }
  var _generatorOptions = generatorOptions, _generatorOptions$def = _generatorOptions.defaultModifiers, defaultModifiers2 = _generatorOptions$def === void 0 ? [] : _generatorOptions$def, _generatorOptions$def2 = _generatorOptions.defaultOptions, defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;
  return function createPopper2(reference2, popper2, options) {
    if (options === void 0) {
      options = defaultOptions;
    }
    var state = {
      placement: "bottom",
      orderedModifiers: [],
      options: Object.assign({}, DEFAULT_OPTIONS, defaultOptions),
      modifiersData: {},
      elements: {
        reference: reference2,
        popper: popper2
      },
      attributes: {},
      styles: {}
    };
    var effectCleanupFns = [];
    var isDestroyed = false;
    var instance = {
      state,
      setOptions: function setOptions(setOptionsAction) {
        var options2 = typeof setOptionsAction === "function" ? setOptionsAction(state.options) : setOptionsAction;
        cleanupModifierEffects();
        state.options = Object.assign({}, defaultOptions, state.options, options2);
        state.scrollParents = {
          reference: isElement(reference2) ? listScrollParents(reference2) : reference2.contextElement ? listScrollParents(reference2.contextElement) : [],
          popper: listScrollParents(popper2)
        };
        var orderedModifiers = orderModifiers(mergeByName([].concat(defaultModifiers2, state.options.modifiers)));
        state.orderedModifiers = orderedModifiers.filter(function(m) {
          return m.enabled;
        });
        if (true) {
          var modifiers = uniqueBy([].concat(orderedModifiers, state.options.modifiers), function(_ref) {
            var name = _ref.name;
            return name;
          });
          validateModifiers(modifiers);
          if (getBasePlacement(state.options.placement) === auto) {
            var flipModifier = state.orderedModifiers.find(function(_ref2) {
              var name = _ref2.name;
              return name === "flip";
            });
            if (!flipModifier) {
              console.error(['Popper: "auto" placements require the "flip" modifier be', "present and enabled to work."].join(" "));
            }
          }
          var _getComputedStyle = getComputedStyle(popper2), marginTop = _getComputedStyle.marginTop, marginRight = _getComputedStyle.marginRight, marginBottom = _getComputedStyle.marginBottom, marginLeft = _getComputedStyle.marginLeft;
          if ([marginTop, marginRight, marginBottom, marginLeft].some(function(margin) {
            return parseFloat(margin);
          })) {
            console.warn(['Popper: CSS "margin" styles cannot be used to apply padding', "between the popper and its reference element or boundary.", "To replicate margin, use the `offset` modifier, as well as", "the `padding` option in the `preventOverflow` and `flip`", "modifiers."].join(" "));
          }
        }
        runModifierEffects();
        return instance.update();
      },
      forceUpdate: function forceUpdate() {
        if (isDestroyed) {
          return;
        }
        var _state$elements = state.elements, reference3 = _state$elements.reference, popper3 = _state$elements.popper;
        if (!areValidElements(reference3, popper3)) {
          if (true) {
            console.error(INVALID_ELEMENT_ERROR);
          }
          return;
        }
        state.rects = {
          reference: getCompositeRect(reference3, getOffsetParent(popper3), state.options.strategy === "fixed"),
          popper: getLayoutRect(popper3)
        };
        state.reset = false;
        state.placement = state.options.placement;
        state.orderedModifiers.forEach(function(modifier) {
          return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);
        });
        var __debug_loops__ = 0;
        for (var index = 0; index < state.orderedModifiers.length; index++) {
          if (true) {
            __debug_loops__ += 1;
            if (__debug_loops__ > 100) {
              console.error(INFINITE_LOOP_ERROR);
              break;
            }
          }
          if (state.reset === true) {
            state.reset = false;
            index = -1;
            continue;
          }
          var _state$orderedModifie = state.orderedModifiers[index], fn2 = _state$orderedModifie.fn, _state$orderedModifie2 = _state$orderedModifie.options, _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2, name = _state$orderedModifie.name;
          if (typeof fn2 === "function") {
            state = fn2({
              state,
              options: _options,
              name,
              instance
            }) || state;
          }
        }
      },
      update: debounce(function() {
        return new Promise(function(resolve) {
          instance.forceUpdate();
          resolve(state);
        });
      }),
      destroy: function destroy() {
        cleanupModifierEffects();
        isDestroyed = true;
      }
    };
    if (!areValidElements(reference2, popper2)) {
      if (true) {
        console.error(INVALID_ELEMENT_ERROR);
      }
      return instance;
    }
    instance.setOptions(options).then(function(state2) {
      if (!isDestroyed && options.onFirstUpdate) {
        options.onFirstUpdate(state2);
      }
    });
    function runModifierEffects() {
      state.orderedModifiers.forEach(function(_ref3) {
        var name = _ref3.name, _ref3$options = _ref3.options, options2 = _ref3$options === void 0 ? {} : _ref3$options, effect4 = _ref3.effect;
        if (typeof effect4 === "function") {
          var cleanupFn = effect4({
            state,
            name,
            instance,
            options: options2
          });
          var noopFn = function noopFn2() {
          };
          effectCleanupFns.push(cleanupFn || noopFn);
        }
      });
    }
    function cleanupModifierEffects() {
      effectCleanupFns.forEach(function(fn2) {
        return fn2();
      });
      effectCleanupFns = [];
    }
    return instance;
  };
}

// node_modules/@popperjs/core/lib/popper.js
var defaultModifiers = [eventListeners_default, popperOffsets_default, computeStyles_default, applyStyles_default, offset_default, flip_default, preventOverflow_default, arrow_default, hide_default];
var createPopper = /* @__PURE__ */ popperGenerator({
  defaultModifiers
});

// src/suggest.ts
var wrapAround = (value, size) => {
  return (value % size + size) % size;
};
var Suggest = class {
  constructor(owner, containerEl, scope) {
    this.owner = owner;
    this.containerEl = containerEl;
    containerEl.on("click", ".suggestion-item", this.onSuggestionClick.bind(this));
    containerEl.on("mousemove", ".suggestion-item", this.onSuggestionMouseover.bind(this));
    scope.register([], "ArrowUp", (event) => {
      if (!event.isComposing) {
        this.setSelectedItem(this.selectedItem - 1, true);
        return false;
      }
    });
    scope.register([], "ArrowDown", (event) => {
      if (!event.isComposing) {
        this.setSelectedItem(this.selectedItem + 1, true);
        return false;
      }
    });
    scope.register([], "Enter", (event) => {
      if (!event.isComposing) {
        this.useSelectedItem(event);
        return false;
      }
    });
  }
  onSuggestionClick(event, el) {
    event.preventDefault();
    const item = this.suggestions.indexOf(el);
    this.setSelectedItem(item, false);
    this.useSelectedItem(event);
  }
  onSuggestionMouseover(_event, el) {
    const item = this.suggestions.indexOf(el);
    this.setSelectedItem(item, false);
  }
  setSuggestions(values) {
    this.containerEl.empty();
    const suggestionEls = [];
    values.forEach((value) => {
      const suggestionEl = this.containerEl.createDiv("suggestion-item");
      this.owner.renderSuggestion(value, suggestionEl);
      suggestionEls.push(suggestionEl);
    });
    this.values = values;
    this.suggestions = suggestionEls;
    this.setSelectedItem(0, false);
  }
  useSelectedItem(event) {
    const currentValue = this.values[this.selectedItem];
    if (currentValue) {
      this.owner.selectSuggestion(currentValue, event);
    }
  }
  setSelectedItem(selectedIndex, scrollIntoView) {
    const normalizedIndex = wrapAround(selectedIndex, this.suggestions.length);
    const prevSelectedSuggestion = this.suggestions[this.selectedItem];
    const selectedSuggestion = this.suggestions[normalizedIndex];
    prevSelectedSuggestion == null ? void 0 : prevSelectedSuggestion.removeClass("is-selected");
    selectedSuggestion == null ? void 0 : selectedSuggestion.addClass("is-selected");
    this.selectedItem = normalizedIndex;
    if (scrollIntoView) {
      selectedSuggestion.scrollIntoView(false);
    }
  }
};
var TextInputSuggest = class {
  constructor(app, inputEl) {
    this.app = app;
    this.inputEl = inputEl;
    this.scope = new import_obsidian2.Scope();
    this.suggestEl = createDiv("suggestion-container");
    const suggestion = this.suggestEl.createDiv("suggestion");
    this.suggest = new Suggest(this, suggestion, this.scope);
    this.scope.register([], "Escape", this.close.bind(this));
    this.inputEl.addEventListener("input", this.onInputChanged.bind(this));
    this.inputEl.addEventListener("focus", this.onInputChanged.bind(this));
    this.inputEl.addEventListener("blur", this.close.bind(this));
    this.suggestEl.on("mousedown", ".suggestion-container", (event) => {
      event.preventDefault();
    });
  }
  onInputChanged() {
    const inputStr = this.inputEl.value;
    const suggestions = this.getSuggestions(inputStr);
    if (!suggestions) {
      this.close();
      return;
    }
    if (suggestions.length > 0) {
      this.suggest.setSuggestions(suggestions);
      this.open(this.app.dom.appContainerEl, this.inputEl);
    } else {
      this.close();
    }
  }
  open(container, inputEl) {
    this.app.keymap.pushScope(this.scope);
    container.appendChild(this.suggestEl);
    this.popper = createPopper(inputEl, this.suggestEl, {
      placement: "bottom-start",
      modifiers: [
        {
          name: "sameWidth",
          enabled: true,
          fn: ({ state, instance }) => {
            const targetWidth = `${state.rects.reference.width}px`;
            if (state.styles.popper.width === targetWidth) {
              return;
            }
            state.styles.popper.width = targetWidth;
            instance.update();
          },
          phase: "beforeWrite",
          requires: ["computeStyles"]
        }
      ]
    });
  }
  close() {
    this.app.keymap.popScope(this.scope);
    this.suggest.setSuggestions([]);
    if (this.popper)
      this.popper.destroy();
    this.suggestEl.detach();
  }
};

// src/SchemaSuggest.ts
var SchemaSuggest = class extends TextInputSuggest {
  constructor(app, input, content, descriptions) {
    super(app, input);
    this.content = content;
    this.descriptions = descriptions;
  }
  getSuggestions(inputStr) {
    const lowerCaseInputStr = inputStr.toLowerCase();
    const schemas = [...this.descriptions].filter((schema) => {
      return schema.name.toLowerCase().contains(lowerCaseInputStr) || schema.description.toLowerCase().contains(lowerCaseInputStr);
    });
    return Object.values(schemas).map((value) => value.name);
  }
  renderSuggestion(content, el) {
    el.createSpan().setText(content + "   ");
    const description = [...this.descriptions].filter((item) => content === item.name)[0].description;
    if (description !== content) {
      el.createEl("small").setText(description);
    }
  }
  selectSuggestion(content) {
    this.inputEl.value = content;
    this.inputEl.trigger("input");
    this.close();
  }
};

// src/OverwrittenIconModal.ts
var OverwrittenIconModal = class extends import_obsidian3.Modal {
  constructor(plugin, map, name) {
    super(plugin.app);
    this.name = "Domain";
    this.plugin = plugin;
    if (name) {
      this.name = name;
    }
    if (map) {
      this.domain = map.domain;
      this.icon = map.icon;
    }
  }
  displayPreview(contentEl) {
    return __async(this, null, function* () {
      if ((0, import_obsidian_icon_shortcodes.isPluginEnabled)(this.plugin) && this.icon) {
        contentEl.empty();
        const iconPreview = contentEl.createDiv("preview");
        iconPreview.addClass("link-favicon-preview");
        const iconApi = (0, import_obsidian_icon_shortcodes.getApi)(this.plugin);
        const icon = iconApi.getIcon(this.icon, false);
        if (icon !== null)
          iconPreview.append(icon);
      }
    });
  }
  display() {
    return __async(this, null, function* () {
      const { contentEl } = this;
      contentEl.empty();
      let previewEL;
      const nameSetting = new import_obsidian3.Setting(contentEl).setName(this.name);
      if (this.name !== "Domain") {
        let schemas = require_schemas();
        schemas = schemas.filter((item) => !item.schema.contains("http"));
        const schemaNames = Object.values(schemas).map((schema) => schema.schema);
        const descriptions = Object.values(schemas).map((schema) => {
          return { name: schema.schema, description: schema.Description };
        });
        nameSetting.addSearch((search) => {
          new SchemaSuggest(this.plugin.app, search.inputEl, new Set(schemaNames), new Set(descriptions));
          search.setValue(this.domain).onChange((value) => {
            this.domain = value;
          });
        });
      } else {
        nameSetting.addText((text) => {
          text.setValue(this.domain).onChange((value) => {
            this.domain = value;
          });
        });
      }
      const api = (0, import_obsidian_icon_shortcodes.getApi)(this.plugin);
      if (api) {
        if (api.version.compare(">=", "0.6.1")) {
          new import_obsidian3.Setting(contentEl).setName("Icon").addButton((button) => {
            button.setButtonText("Choose").onClick(() => __async(this, null, function* () {
              const icon = yield api.getIconFromUser();
              if (icon) {
                this.icon = icon.id;
                if (previewEL) {
                  yield this.displayPreview(previewEL);
                }
              }
            }));
          });
        } else {
          new import_obsidian3.Setting(contentEl).setName("Icon").addText((text) => {
            text.setValue(this.icon).onChange((value) => __async(this, null, function* () {
              this.icon = value;
              if (previewEL) {
                yield this.displayPreview(previewEL);
              }
            }));
          });
        }
      }
      previewEL = contentEl.createDiv("preview");
      yield this.displayPreview(previewEL);
      const footerEl = contentEl.createDiv();
      const footerButtons = new import_obsidian3.Setting(footerEl);
      footerButtons.addButton((b) => {
        b.setTooltip("Save").setIcon("checkmark").onClick(() => __async(this, null, function* () {
          this.saved = true;
          this.close();
        }));
        return b;
      });
      footerButtons.addExtraButton((b) => {
        b.setIcon("cross").setTooltip("Cancel").onClick(() => {
          this.saved = false;
          this.close();
        });
        return b;
      });
    });
  }
  onOpen() {
    return __async(this, null, function* () {
      yield this.display();
    });
  }
};

// src/settings.ts
var import_obsidian_icon_shortcodes2 = __toModule(require_lib());
var DEFAULT_SETTINGS = {
  provider: "duckduckgo",
  fallbackProvider: "google",
  providerDomain: "",
  fallbackProviderDomain: "",
  ignored: "",
  overwritten: [],
  protocol: []
};
var FaviconSettings = class extends import_obsidian4.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Link Favicons" });
    new import_obsidian4.Setting(containerEl).setName("Icon Provider").addDropdown((dropdown) => {
      for (const id in providers) {
        if (providers.hasOwnProperty(id)) {
          dropdown.addOption(id, providers[id].name);
        }
      }
      dropdown.setValue(this.plugin.settings.provider).onChange((value) => __async(this, null, function* () {
        this.plugin.settings.provider = value;
        yield this.plugin.saveSettings();
        this.display();
      }));
    });
    if (Array.of("besticon").includes(this.plugin.settings.provider)) {
      new import_obsidian4.Setting(containerEl).setName("Provider Domain").setDesc("This Provider is selfhosted, please specify your deployment url. Refer to the readme of the provider for deployment instructions.").addText((text) => text.setValue(this.plugin.settings.providerDomain).onChange((value) => __async(this, null, function* () {
        this.plugin.settings.providerDomain = value;
        yield this.plugin.saveSettings();
      })));
    }
    new import_obsidian4.Setting(containerEl).setName("Fallback Icon Provider").addDropdown((dropdown) => {
      for (const id in providers) {
        if (providers.hasOwnProperty(id)) {
          dropdown.addOption(id, providers[id].name);
        }
      }
      dropdown.setValue(this.plugin.settings.fallbackProvider).onChange((value) => __async(this, null, function* () {
        this.plugin.settings.fallbackProvider = value;
        yield this.plugin.saveSettings();
        this.display();
      }));
    });
    if (Array.of("besticon").includes(this.plugin.settings.fallbackProvider)) {
      new import_obsidian4.Setting(containerEl).setName("Fallback Provider Domain").setDesc("This Provider is be selfhosted, please specify your deployment url. Refer to the readme of the provider for deployment instructions.").addText((text) => text.setValue(this.plugin.settings.fallbackProviderDomain).onChange((value) => __async(this, null, function* () {
        this.plugin.settings.fallbackProviderDomain = value;
        yield this.plugin.saveSettings();
      })));
    }
    new import_obsidian4.Setting(containerEl).setName("Ignored Domains").setDesc("Don't show an favicon for these domains(one per line)").addTextArea((text) => {
      text.setValue(this.plugin.settings.ignored).onChange((value) => __async(this, null, function* () {
        this.plugin.settings.ignored = value;
        yield this.plugin.saveSettings();
      }));
      text.inputEl.setAttr("rows", 8);
    });
    if ((0, import_obsidian_icon_shortcodes2.isPluginEnabled)(this.plugin)) {
      containerEl.createEl("h2", { text: "Custom icons" });
      containerEl.createEl("h3", { text: "for Domains" });
      new import_obsidian4.Setting(containerEl).setName("Add New").setDesc("Add custom icon").addButton((button) => {
        return button.setTooltip("add custom icon").setIcon("plus-with-circle").onClick(() => __async(this, null, function* () {
          const modal = new OverwrittenIconModal(this.plugin);
          modal.onClose = () => __async(this, null, function* () {
            if (modal.saved) {
              this.plugin.settings.overwritten.push({
                domain: modal.domain,
                icon: modal.icon
              });
              yield this.plugin.saveSettings();
              this.display();
            }
          });
          modal.open();
        }));
      });
      const overwrittenContainer = containerEl.createDiv("overwritten");
      const overwrittenDiv = overwrittenContainer.createDiv("overwritten");
      for (const overwritten of this.plugin.settings.overwritten) {
        const setting = new import_obsidian4.Setting(overwrittenDiv);
        const iconAPI = (0, import_obsidian_icon_shortcodes2.getApi)(this.plugin);
        const desc = new DocumentFragment();
        desc.createEl("p", { text: "		" + overwritten.icon }).prepend(iconAPI.getIcon(overwritten.icon));
        setting.setName(overwritten.domain).setDesc(desc).addExtraButton((b) => {
          b.setIcon("pencil").setTooltip("Edit").onClick(() => {
            const modal = new OverwrittenIconModal(this.plugin, overwritten);
            modal.onClose = () => __async(this, null, function* () {
              if (modal.saved) {
                const setting2 = this.plugin.settings.overwritten.filter((overwritten2) => {
                  return overwritten2.domain !== modal.domain;
                });
                setting2.push({ domain: modal.domain, icon: modal.icon });
                this.plugin.settings.overwritten = setting2;
                yield this.plugin.saveSettings();
                this.display();
              }
            });
            modal.open();
          });
        }).addExtraButton((b) => {
          b.setIcon("trash").setTooltip("Delete").onClick(() => __async(this, null, function* () {
            this.plugin.settings.overwritten = this.plugin.settings.overwritten.filter((tmp) => {
              return overwritten.domain !== tmp.domain;
            });
            yield this.plugin.saveSettings();
            this.display();
          }));
        });
      }
      containerEl.createEl("h3", { text: "for URI Schemas" });
      new import_obsidian4.Setting(containerEl).setName("Add New").setDesc("Add custom icon").addButton((button) => {
        return button.setTooltip("add custom icon").setIcon("plus-with-circle").onClick(() => __async(this, null, function* () {
          const modal = new OverwrittenIconModal(this.plugin, null, "URI Schema");
          modal.onClose = () => __async(this, null, function* () {
            if (modal.saved) {
              this.plugin.settings.protocol.push({
                domain: modal.domain,
                icon: modal.icon
              });
              yield this.plugin.saveSettings();
              this.display();
            }
          });
          modal.open();
        }));
      });
      const protocolContainer = containerEl.createDiv("overwritten");
      const voicesDiv = protocolContainer.createDiv("overwritten");
      for (const protocol of this.plugin.settings.protocol) {
        const setting = new import_obsidian4.Setting(voicesDiv);
        const iconAPI = (0, import_obsidian_icon_shortcodes2.getApi)(this.plugin);
        const desc = new DocumentFragment();
        desc.createEl("p", { text: "		" + protocol.icon }).prepend(iconAPI.getIcon(protocol.icon));
        setting.setName(protocol.domain).setDesc(desc).addExtraButton((b) => {
          b.setIcon("pencil").setTooltip("Edit").onClick(() => {
            const modal = new OverwrittenIconModal(this.plugin, protocol, "URI Schema");
            modal.onClose = () => __async(this, null, function* () {
              if (modal.saved) {
                const setting2 = this.plugin.settings.protocol.filter((overwritten) => {
                  return overwritten.domain !== modal.domain;
                });
                setting2.push({ domain: modal.domain, icon: modal.icon });
                this.plugin.settings.protocol = setting2;
                yield this.plugin.saveSettings();
                this.display();
              }
            });
            modal.open();
          });
        }).addExtraButton((b) => {
          b.setIcon("trash").setTooltip("Delete").onClick(() => __async(this, null, function* () {
            this.plugin.settings.protocol = this.plugin.settings.protocol.filter((overwritten) => {
              return overwritten.domain !== protocol.domain;
            });
            yield this.plugin.saveSettings();
            this.display();
          }));
        });
      }
    }
  }
};

// src/main.ts
var import_obsidian_icon_shortcodes3 = __toModule(require_lib());
var import_state2 = __toModule(require("@codemirror/state"));

// src/Decorations.ts
var import_obsidian5 = __toModule(require("obsidian"));
var import_view = __toModule(require("@codemirror/view"));
var import_state = __toModule(require("@codemirror/state"));
var import_language = __toModule(require("@codemirror/language"));
var import_stream_parser = __toModule(require("@codemirror/stream-parser"));
var statefulDecorations = defineStatefulDecoration();
var StatefulDecorationSet = class {
  constructor(editor, plugin) {
    this.decoCache = Object.create(null);
    this.debouncedUpdate = (0, import_obsidian5.debounce)(this.updateAsyncDecorations, 100, true);
    this.editor = editor;
    this.plugin = plugin;
  }
  computeAsyncDecorations(tokens) {
    return __async(this, null, function* () {
      const decorations = [];
      for (const token of tokens) {
        let deco = this.decoCache[token.value];
        if (!deco) {
          const provider = providers[this.plugin.settings.provider];
          const fallbackProvider = providers[this.plugin.settings.fallbackProvider];
          let url;
          try {
            url = new URL(token.value);
          } catch (e) {
            console.error("Invalid url: " + token.value);
            console.error(e);
          }
          const icon = yield this.plugin.getIcon(url, provider);
          const fallbackIcon = yield this.plugin.getIcon(url, fallbackProvider);
          const domain = url.protocol.contains("http") ? url.hostname : url.protocol;
          deco = this.decoCache[token.value] = import_view.Decoration.widget({ widget: new IconWidget(this.plugin, icon, fallbackIcon, domain) });
        }
        decorations.push(deco.range(token.from, token.from));
      }
      return import_view.Decoration.set(decorations, true);
    });
  }
  updateAsyncDecorations(tokens) {
    return __async(this, null, function* () {
      const decorations = yield this.computeAsyncDecorations(tokens);
      if (decorations || this.editor.state.field(statefulDecorations.field).size) {
        this.editor.dispatch({ effects: statefulDecorations.update.of(decorations || import_view.Decoration.none) });
      }
    });
  }
};
function buildViewPlugin(plugin) {
  return import_view.ViewPlugin.fromClass(class {
    constructor(view) {
      this.decoManager = new StatefulDecorationSet(view, plugin);
      this.buildAsyncDecorations(view);
    }
    update(update) {
      if (update.docChanged || update.viewportChanged) {
        this.buildAsyncDecorations(update.view);
      }
    }
    destroy() {
    }
    buildAsyncDecorations(view) {
      const targetElements = [];
      for (const { from, to } of view.visibleRanges) {
        const tree = (0, import_language.syntaxTree)(view.state);
        tree.iterate({
          from,
          to,
          enter: (type, from2, to2) => {
            const tokenProps = type.prop(import_stream_parser.tokenClassNodeProp);
            if (tokenProps) {
              const props = new Set(tokenProps.split(" "));
              const isExternalLink = props.has("url");
              const linkText = view.state.doc.sliceString(from2, to2);
              if (isExternalLink && linkText.contains("://")) {
                const line = view.state.doc.lineAt(from2);
                const before = view.state.doc.sliceString(from2 - 1, from2);
                if (before !== "(") {
                  targetElements.push({ from: from2, to: to2, value: linkText });
                  return;
                }
                const toLine = line.to - to2;
                const toLineT = line.length - toLine;
                const fromIndex = line.text.lastIndexOf("[", toLineT);
                if (fromIndex === -1) {
                  return;
                }
                let fromTarget = line.from + fromIndex;
                const before2 = view.state.doc.sliceString(fromTarget - 2, fromTarget);
                if (before2 === "[\\") {
                  fromTarget -= 2;
                }
                targetElements.push({ from: fromTarget, to: to2, value: linkText });
              }
            }
          }
        });
      }
      this.decoManager.debouncedUpdate(targetElements);
    }
  });
}
function asyncDecoBuilderExt(plugin) {
  return [statefulDecorations.field, buildViewPlugin(plugin)];
}
function defineStatefulDecoration() {
  const update = import_state.StateEffect.define();
  const field = import_state.StateField.define({
    create() {
      return import_view.Decoration.none;
    },
    update(deco, tr) {
      return tr.effects.reduce((deco2, effect4) => effect4.is(update) ? effect4.value : deco2, deco.map(tr.changes));
    },
    provide: (field2) => import_view.EditorView.decorations.from(field2)
  });
  return { update, field };
}
var IconWidget = class extends import_view.WidgetType {
  constructor(plugin, icon, fallbackIcon, domain) {
    super();
    this.plugin = plugin;
    this.icon = icon;
    this.fallbackIcon = fallbackIcon;
    this.domain = domain;
  }
  eq(other) {
    return other == this;
  }
  toDOM() {
    if (!this.icon || this.icon === "") {
      return document.createElement("span");
    }
    if (typeof this.icon === "string") {
      if (!this.icon.startsWith("http")) {
        const span = document.createElement("span");
        span.textContent = this.icon;
        span.className = "link-favicon";
        return span;
      }
      const el = document.createElement("object");
      el.addClass("link-favicon");
      el.dataset.host = this.domain;
      el.data = this.icon;
      el.data.contains(".ico") ? el.type = "image/x-icon" : el.type = "image/png";
      el.style.height = "0.8em";
      el.style.display = "inline-block";
      if (typeof this.fallbackIcon === "string") {
        const img = el.createEl("img");
        img.src = this.fallbackIcon;
        img.addClass("link-favicon");
        img.style.height = "0.8em";
        img.style.display = "block";
        el.append(img);
      }
      return el;
    } else {
      return this.icon;
    }
  }
  ignoreEvent() {
    return false;
  }
};

// src/main.ts
var FaviconPlugin = class extends import_obsidian6.Plugin {
  isDisabled(el) {
    if (el.getAttribute("data-no-favicon"))
      return true;
    if (el.getAttribute("data-favicon"))
      return true;
  }
  getCustomDomainIcon(domain) {
    if ((0, import_obsidian_icon_shortcodes3.isPluginEnabled)(this)) {
      const icons = this.settings.overwritten.filter((value) => value.domain === domain);
      if (icons.length > 0) {
        const iconApi = (0, import_obsidian_icon_shortcodes3.getApi)(this);
        const icon = icons[0].icon;
        return iconApi.getIcon(icon, false);
      }
    }
  }
  getCustomSchemeIcon(scheme) {
    if ((0, import_obsidian_icon_shortcodes3.isPluginEnabled)(this)) {
      const icons = this.settings.protocol.filter((value) => value.domain === scheme.substr(0, scheme.length - 1));
      if (icons.length > 0) {
        const iconApi = (0, import_obsidian_icon_shortcodes3.getApi)(this);
        const icon = icons[0].icon;
        return iconApi.getIcon(icon, false);
      }
    }
  }
  getIcon(domain, provider) {
    return __async(this, null, function* () {
      if (!domain.protocol.startsWith("http")) {
        const customSchemeIcon = this.getCustomSchemeIcon(domain.protocol);
        if (customSchemeIcon) {
          if (typeof customSchemeIcon !== "string") {
            customSchemeIcon.addClass("link-favicon");
            customSchemeIcon.dataset.host = domain.hostname;
          }
          return customSchemeIcon;
        }
        return null;
      }
      if (this.settings.ignored.split("\n").contains(domain.hostname)) {
        return null;
      }
      const customDomainIcon = this.getCustomDomainIcon(domain.hostname);
      if (customDomainIcon) {
        if (typeof customDomainIcon !== "string") {
          customDomainIcon.addClass("link-favicon");
          customDomainIcon.dataset.host = domain.hostname;
        }
        return customDomainIcon;
      }
      return provider.url(domain.hostname, this.settings);
    });
  }
  onload() {
    return __async(this, null, function* () {
      console.log("enabling plugin: link favicons");
      yield this.loadSettings();
      this.addSettingTab(new FaviconSettings(this.app, this));
      this.registerEditorExtension(import_state2.Prec.lowest(asyncDecoBuilderExt(this)));
      this.registerMarkdownPostProcessor((element, ctx) => __async(this, null, function* () {
        if (ctx.sourcePath.contains("no-favicon")) {
          return;
        }
        const provider = providers[this.settings.provider];
        const fallbackProvider = providers[this.settings.fallbackProvider];
        if (!provider || !fallbackProvider) {
          console.error("Link Favicons: misconfigured providers");
          return;
        }
        const links = element.querySelectorAll("a.external-link:not([data-favicon])");
        for (let index = 0; index < links.length; index++) {
          const link = links.item(index);
          if (!this.isDisabled(link)) {
            link.dataset.favicon = "true";
            let domain;
            try {
              domain = new URL(link.href);
            } catch (e) {
              console.error("Invalid url: " + link.href);
              console.error(e);
            }
            if (!domain)
              continue;
            const icon = yield this.getIcon(domain, provider);
            const fallbackIcon = yield this.getIcon(domain, fallbackProvider);
            let el;
            if (!icon || icon === "") {
              console.log("no icon for " + domain.href);
              continue;
            }
            if (typeof icon === "string") {
              if (!icon.startsWith("http")) {
                el = icon;
              } else {
                el = document.createElement("object");
                el.addClass("link-favicon");
                el.dataset.host = domain.hostname;
                el.data = icon;
                el.data.contains(".ico") ? el.type = "image/x-icon" : el.type = "image/png";
                el.style.height = "0.8em";
                el.style.display = "inline-block";
              }
            } else {
              el = icon;
            }
            if (!el)
              continue;
            if (typeof el !== "string" && typeof fallbackIcon === "string") {
              const img = el.createEl("img");
              img.src = fallbackIcon;
              img.addClass("link-favicon");
              img.style.height = "0.8em";
              img.style.display = "block";
              el.append(img);
            }
            if (el) {
              link.prepend(el);
            }
          }
        }
      }));
    });
  }
  onunload() {
    console.log("disabling plugin: link favicons");
  }
  loadSettings() {
    return __async(this, null, function* () {
      this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
    });
  }
  saveSettings() {
    return __async(this, null, function* () {
      yield this.saveData(this.settings);
    });
  }
};
